from dataclasses import dataclass, field
from decimal import Decimal
from enum import Enum
from typing import List, Optional, Union, Any
from xsdata.models.datatype import (
    XmlDate,
    XmlDateTime,
    XmlDuration,
    XmlPeriod,
    XmlTime,
)


@dataclass
class AbstractObjectType1:
    class Meta:
        name = "AbstractObject_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    uuid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BinaryType1:
    class Meta:
        name = "Binary_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Boolean1:
    class Meta:
        name = "Boolean"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class CharacterString1:
    class Meta:
        name = "CharacterString"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class CodeListValueType1:
    class Meta:
        name = "CodeListValue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code_list: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeList",
            "type": "Attribute",
            "required": True,
        },
    )
    code_list_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeListValue",
            "type": "Attribute",
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class CodeType1:
    """Gml:CodeType is a generalized type to be used for a term, keyword or name.

    It adds a XML attribute codeSpace to a term, where the value of the
    codeSpace attribute (if present) shall indicate a dictionary,
    thesaurus, classification scheme, authority, or pattern for the
    term.
    """

    class Meta:
        name = "CodeType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class DateTime1:
    class Meta:
        name = "DateTime"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Date1:
    class Meta:
        name = "Date"
        nillable = True
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[Union[XmlDate, XmlPeriod]] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )


@dataclass
class Decimal1:
    class Meta:
        name = "Decimal"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Integer1:
    class Meta:
        name = "Integer"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MeasureType1:
    """Copied from gml32:MeasureType, which supports recording an amount encoded as
    a value of XML Schema double, together with a units of measure indicated by an
    attribute uom, short for "units Of measure".

    The value of the uom attribute identifies a reference system for the
    amount, usually a ratio or interval scale. Namespace changed to gco
    """

    class Meta:
        name = "MeasureType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


class NilReasonEnumerationValue1(Enum):
    INAPPLICABLE = "inapplicable"
    MISSING = "missing"
    TEMPLATE = "template"
    UNKNOWN = "unknown"
    WITHHELD = "withheld"


@dataclass
class Real1:
    class Meta:
        name = "Real"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Record1:
    class Meta:
        name = "Record"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class TmPeriodDuration1:
    class Meta:
        name = "TM_PeriodDuration"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class UnlimitedIntegerType1:
    class Meta:
        name = "UnlimitedInteger_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    is_infinite: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isInfinite",
            "type": "Attribute",
        },
    )


@dataclass
class UomIdentifier:
    class Meta:
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: str = field(
        default="",
        metadata={
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class FileNameType:
    class Meta:
        name = "FileName_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MimeFileTypeType:
    class Meta:
        name = "MimeFileType_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class LocalisedCharacterStringType1:
    class Meta:
        name = "LocalisedCharacterString_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    locale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class MdObligationCodeType2(Enum):
    """
    Obligation of the element or entity.

    :cvar MANDATORY: element is always required
    :cvar OPTIONAL: element is not required
    :cvar CONDITIONAL: element is required when a specific condition is
        met
    """

    MANDATORY = "mandatory"
    OPTIONAL = "optional"
    CONDITIONAL = "conditional"


class MdTopicCategoryCodeType2(Enum):
    """High-level geographic data thematic classification to assist in the grouping
    and search of available geographic data sets.

    Can be used to group keywords as well. Listed examples are not
    exhaustive. NOTE: It is understood there are overlaps between
    general categories and the user is encouraged to select the one most
    appropriate.

    :cvar FARMING: rearing of animals and/or cultivation of
        plantsExamples: agriculture, irrigation, aquaculture,
        plantations, herding, pests and diseases affecting crops and
        livestock
    :cvar BIOTA: flora and/or fauna in natural environment Examples:
        wildlife, vegetation, biological sciences, ecology, wilderness,
        sealife, wetlands, habitat
    :cvar BOUNDARIES: legal land descriptions Examples: political and
        administrative boundaries
    :cvar CLIMATOLOGY_METEOROLOGY_ATMOSPHERE: processes and phenomena of
        the atmosphere Examples: cloud cover, weather, climate,
        atmospheric conditions, climate change, precipitation
    :cvar ECONOMY: economic activities, conditions and employment
        Examples: production, labour, revenue, commerce, industry,
        tourism and ecotourism, forestry, fisheries, commercial or
        subsistence hunting, exploration and exploitation of resources
        such as minerals, oil and gas
    :cvar ELEVATION: height above or below a vertical datumExamples:
        altitude, bathymetry, digital elevation models, slope, derived
        products
    :cvar ENVIRONMENT: environmental resources, protection and
        conservation Examples: environmental pollution, waste storage
        and treatment, environmental impact assessment, monitoring
        environmental risk, nature reserves, landscape
    :cvar GEOSCIENTIFIC_INFORMATION: information pertaining to earth
        sciences Examples: geophysical features and processes, geology,
        minerals, sciences dealing with the composition, structure and
        origin of the earth's rocks, risks of earthquakes, volcanic
        activity, landslides, gravity information, soils, permafrost,
        hydrogeology, erosion
    :cvar HEALTH: health, health services, human ecology, and safety
        Examples: disease and illness, factors affecting health,
        hygiene, substance abuse, mental and physical health, health
        services
    :cvar IMAGERY_BASE_MAPS_EARTH_COVER: base maps Examples: land cover,
        topographic maps, imagery, unclassified images, annotations
    :cvar INTELLIGENCE_MILITARY: military bases, structures, activities
        Examples: barracks, training grounds, military transportation,
        information collection
    :cvar INLAND_WATERS: inland water features, drainage systems and
        their characteristics Examples: rivers and glaciers, salt lakes,
        water utilization plans, dams, currents, floods, water quality,
        hydrographic charts
    :cvar LOCATION: positional information and services Examples:
        addresses, geodetic networks, control points, postal zones and
        services, place names
    :cvar OCEANS: features and characteristics of salt water bodies
        (excluding inland waters) Examples: tides, tidal waves, coastal
        information, reefs
    :cvar PLANNING_CADASTRE: information used for appropriate actions
        for future use of the land Examples: land use maps, zoning maps,
        cadastral surveys, land ownership
    :cvar SOCIETY: characteristics of society and cultures Examples:
        settlements, anthropology, archaeology, education, traditional
        beliefs, manners and customs, demographic data, recreational
        areas and activities, social impact assessments, crime and
        justice, census information
    :cvar STRUCTURE: man-made construction Examples: buildings, museums,
        churches, factories, housing, monuments, shops, towers
    :cvar TRANSPORTATION: means and aids for conveying persons and/or
        goods Examples: roads, airports/airstrips, shipping routes,
        tunnels, nautical charts, vehicle or vessel location,
        aeronautical charts, railways
    :cvar UTILITIES_COMMUNICATION: energy, water and waste systems and
        communications infrastructure and servicesExamples:
        hydroelectricity, geothermal, solar and nuclear sources of
        energy, water purification and distribution, sewage collection
        and disposal, electricity and gas distribution, data
        communication, telecommunication, radio, communication networks
    :cvar EXTRA_TERRESTRIAL: region more than 100 km above the surface
        of the Earth
    :cvar DISASTER:
    """

    FARMING = "farming"
    BIOTA = "biota"
    BOUNDARIES = "boundaries"
    CLIMATOLOGY_METEOROLOGY_ATMOSPHERE = "climatologyMeteorologyAtmosphere"
    ECONOMY = "economy"
    ELEVATION = "elevation"
    ENVIRONMENT = "environment"
    GEOSCIENTIFIC_INFORMATION = "geoscientificInformation"
    HEALTH = "health"
    IMAGERY_BASE_MAPS_EARTH_COVER = "imageryBaseMapsEarthCover"
    INTELLIGENCE_MILITARY = "intelligenceMilitary"
    INLAND_WATERS = "inlandWaters"
    LOCATION = "location"
    OCEANS = "oceans"
    PLANNING_CADASTRE = "planningCadastre"
    SOCIETY = "society"
    STRUCTURE = "structure"
    TRANSPORTATION = "transportation"
    UTILITIES_COMMUNICATION = "utilitiesCommunication"
    EXTRA_TERRESTRIAL = "extraTerrestrial"
    DISASTER = "disaster"


class LeParameterDirectionType(Enum):
    """
    Direction of parameter (in, out, in/out)

    :cvar IN: the parameter is an input parameter to the process
    :cvar OUT: the parameter is an output parameter to the process
    :cvar IN_OUT: the parameter is both an input and output parameter to
        the process
    """

    IN = "in"
    OUT = "out"
    IN_OUT = "in/out"


class MdPixelOrientationCodeType2(Enum):
    """
    Point in a pixel corresponding to the Earth location of the pixel.

    :cvar CENTRE: point halfway between the lower left and the upper
        right of the pixel
    :cvar LOWER_LEFT: the corner in the pixel closest to the origin of
        the SRS; if two are at the same distance from the origin, the
        one with the smallest x-value
    :cvar LOWER_RIGHT: next corner counterclockwise from the lower left
    :cvar UPPER_RIGHT: next corner counterclockwise from the lower right
    :cvar UPPER_LEFT: next corner counterclockwise from the upper right
    """

    CENTRE = "centre"
    LOWER_LEFT = "lowerLeft"
    LOWER_RIGHT = "lowerRight"
    UPPER_RIGHT = "upperRight"
    UPPER_LEFT = "upperLeft"


class SvParameterDirectionType(Enum):
    """
    Class of information to which the referencing entity applies.

    :cvar IN: the parameter is an input parameter to the service
        instance
    :cvar OUT: the parameter is an output parameter to the service
        instance
    :cvar IN_OUT: the parameter is both an input and output parameter to
        the service instance
    """

    IN = "in"
    OUT = "out"
    IN_OUT = "in/out"


@dataclass
class AbstractObjectType2:
    class Meta:
        name = "AbstractObject_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    uuid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BinaryType2:
    class Meta:
        name = "Binary_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Boolean3:
    class Meta:
        name = "Boolean"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class CharacterString2:
    class Meta:
        name = "CharacterString"
        namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class CodeListValueType2:
    class Meta:
        name = "CodeListValue_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code_list: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeList",
            "type": "Attribute",
            "required": True,
        },
    )
    code_list_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeListValue",
            "type": "Attribute",
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class DateTime2:
    class Meta:
        name = "DateTime"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Date2:
    class Meta:
        name = "Date"
        nillable = True
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[Union[XmlDate, XmlPeriod]] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )


@dataclass
class Decimal2:
    class Meta:
        name = "Decimal"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Integer2:
    class Meta:
        name = "Integer"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Real2:
    class Meta:
        name = "Real"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Record2:
    class Meta:
        name = "Record"
        namespace = "http://www.isotc211.org/2005/gco"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class UnlimitedIntegerType2:
    class Meta:
        name = "UnlimitedInteger_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    is_infinite: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isInfinite",
            "type": "Attribute",
        },
    )


@dataclass
class LocalisedCharacterStringType2:
    class Meta:
        name = "LocalisedCharacterString_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    locale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class MdObligationCodeType1(Enum):
    MANDATORY = "mandatory"
    OPTIONAL = "optional"
    CONDITIONAL = "conditional"


class MdPixelOrientationCodeType1(Enum):
    CENTER = "center"
    LOWER_LEFT = "lowerLeft"
    LOWER_RIGHT = "lowerRight"
    UPPER_RIGHT = "upperRight"
    UPPER_LEFT = "upperLeft"


class MdTopicCategoryCodeType1(Enum):
    """
    High-level geospatial data thematic classification to assist in the grouping
    and search of available geospatial datasets.
    """

    FARMING = "farming"
    BIOTA = "biota"
    BOUNDARIES = "boundaries"
    CLIMATOLOGY_METEOROLOGY_ATMOSPHERE = "climatologyMeteorologyAtmosphere"
    ECONOMY = "economy"
    ELEVATION = "elevation"
    ENVIRONMENT = "environment"
    GEOSCIENTIFIC_INFORMATION = "geoscientificInformation"
    HEALTH = "health"
    IMAGERY_BASE_MAPS_EARTH_COVER = "imageryBaseMapsEarthCover"
    INTELLIGENCE_MILITARY = "intelligenceMilitary"
    INLAND_WATERS = "inlandWaters"
    LOCATION = "location"
    OCEANS = "oceans"
    PLANNING_CADASTRE = "planningCadastre"
    SOCIETY = "society"
    STRUCTURE = "structure"
    TRANSPORTATION = "transportation"
    UTILITIES_COMMUNICATION = "utilitiesCommunication"


@dataclass
class Url:
    class Meta:
        name = "URL"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class TmPeriodDuration2:
    class Meta:
        name = "TM_PeriodDuration"
        namespace = "http://www.isotc211.org/2005/gts"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class AbstractCurveSegmentType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    num_derivatives_at_start: int = field(
        default=0,
        metadata={
            "name": "numDerivativesAtStart",
            "type": "Attribute",
        },
    )
    num_derivatives_at_end: int = field(
        default=0,
        metadata={
            "name": "numDerivativesAtEnd",
            "type": "Attribute",
        },
    )
    num_derivative_interior: int = field(
        default=0,
        metadata={
            "name": "numDerivativeInterior",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFeatureMemberType:
    """To create a collection of GML features, a property type shall be derived by
    extension from gml:AbstractFeatureMemberType.

    By default, this abstract property type does not imply any ownership
    of the features in the collection. The owns attribute of
    gml:OwnershipAttributeGroup may be used on a property element
    instance to assert ownership of a feature in the collection. A
    collection shall not own a feature already owned by another object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGeneralParameterValueType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractMemberType:
    """To create a collection of GML Objects that are not all features, a property
    type shall be derived by extension from gml:AbstractMemberType.

    This abstract property type is intended to be used only in object
    types where software shall be able to identify that an instance of
    such an object type is to be interpreted as a collection of objects.
    By default, this abstract property type does not imply any ownership
    of the objects in the collection. The owns attribute of
    gml:OwnershipAttributeGroup may be used on a property element
    instance to assert ownership of an object in the collection. A
    collection shall not own an object already owned by another object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractMetaDataType1:
    class Meta:
        name = "AbstractMetaDataType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class AbstractMetadataPropertyType1:
    """To associate metadata described by any XML Schema with a GML object, a
    property element shall be defined whose content model is derived by extension
    from gml:AbstractMetadataPropertyType.

    The value of such a property shall be metadata. The content model of
    such a property type, i.e. the metadata application schema shall be
    specified by the GML Application Schema. By default, this abstract
    property type does not imply any ownership of the metadata. The owns
    attribute of gml:OwnershipAttributeGroup may be used on a metadata
    property element instance to assert ownership of the metadata. If
    metadata following the conceptual model of ISO 19115 is to be
    encoded in a GML document, the corresponding Implementation
    Specification specified in ISO/TS 19139 shall be used to encode the
    metadata information.
    """

    class Meta:
        name = "AbstractMetadataPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractObject2:
    """This element has no type defined, and is therefore implicitly (according to
    the rules of W3C XML Schema) an XML Schema anyType.

    It is used as the head of an XML Schema substitution group which
    unifies complex content and certain simple content elements used for
    datatypes in GML, including the gml:AbstractGML substitution group.
    """

    class Meta:
        name = "AbstractObject"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractScalarValue:
    """
    Gml:AbstractScalarValue is an abstract element which acts as the head of a
    substitution group which contains gml:Boolean, gml:Category, gml:Count and
    gml:Quantity, and (transitively) the elements in their substitution groups.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class AbstractScalarValueList:
    """
    Gml:AbstractScalarValueList is an abstract element which acts as the head of a
    substitution group which contains gml:BooleanList, gml:CategoryList,
    gml:CountList and gml:QuantityList, and (transitively) the elements in their
    substitution groups.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class AbstractSurfacePatchType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractValue:
    """Gml:AbstractValue is an abstract element which acts as the head of a
    substitution group which contains gml:AbstractScalarValue,
    gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and
    (transitively) the elements in their substitution groups.

    These elements may be used in an application schema as variables, so
    that in an XML instance document any member of its substitution
    group may occur.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class AggregationType(Enum):
    SET = "set"
    BAG = "bag"
    SEQUENCE = "sequence"
    ARRAY = "array"
    RECORD = "record"
    TABLE = "table"


@dataclass
class CodeListType:
    """Gml:CodeListType provides for lists of terms.

    The values in an instance element shall all be valid according to
    the rules of the dictionary, classification scheme, or authority
    identified by the value of its codeSpace attribute.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: List[str] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class CodeType2:
    """Gml:CodeType is a generalized type to be used for a term, keyword or name.

    It adds a XML attribute codeSpace to a term, where the value of the
    codeSpace attribute (if present) shall indicate a dictionary,
    thesaurus, classification scheme, authority, or pattern for the
    term.
    """

    class Meta:
        name = "CodeType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


class CompassPointEnumeration(Enum):
    """These directions are necessarily approximate, giving direction with a
    precision of 22.5°.

    It is thus generally unnecessary to specify the reference frame,
    though this may be detailed in the definition of a GML application
    language.
    """

    N = "N"
    NNE = "NNE"
    NE = "NE"
    ENE = "ENE"
    E = "E"
    ESE = "ESE"
    SE = "SE"
    SSE = "SSE"
    S = "S"
    SSW = "SSW"
    SW = "SW"
    WSW = "WSW"
    W = "W"
    WNW = "WNW"
    NW = "NW"
    NNW = "NNW"


@dataclass
class CoordinatesType:
    """This type is deprecated for tuples with ordinate values that are numbers.

    CoordinatesType is a text string, intended to be used to record an
    array of tuples or coordinates. While it is not possible to enforce
    the internal structure of the string through schema validation, some
    optional attributes have been provided in previous versions of GML
    to support a description of the internal structure. These attributes
    are deprecated. The attributes were intended to be used as follows:
    Decimal symbol used for a decimal point (default="." a stop or
    period) cs              symbol used to separate components within a
    tuple or coordinate string (default="," a comma) ts
    symbol used to separate tuples or coordinate strings (default=" " a
    space) Since it is based on the XML Schema string type,
    CoordinatesType may be used in the construction of tables of tuples
    or arrays of tuples, including ones that contain mixed text and
    numeric values.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    decimal: str = field(
        default=".",
        metadata={
            "type": "Attribute",
        },
    )
    cs: str = field(
        default=",",
        metadata={
            "type": "Attribute",
        },
    )
    ts: str = field(
        default=" ",
        metadata={
            "type": "Attribute",
        },
    )


class CurveInterpolationType(Enum):
    """
    Gml:CurveInterpolationType is a list of codes that may be used to identify the
    interpolation mechanisms specified by an application schema.
    """

    LINEAR = "linear"
    GEODESIC = "geodesic"
    CIRCULAR_ARC3_POINTS = "circularArc3Points"
    CIRCULAR_ARC2_POINT_WITH_BULGE = "circularArc2PointWithBulge"
    CIRCULAR_ARC_CENTER_POINT_WITH_RADIUS = "circularArcCenterPointWithRadius"
    ELLIPTICAL = "elliptical"
    CLOTHOID = "clothoid"
    CONIC = "conic"
    POLYNOMIAL_SPLINE = "polynomialSpline"
    CUBIC_SPLINE = "cubicSpline"
    RATIONAL_SPLINE = "rationalSpline"


class DegreesTypeDirection(Enum):
    N = "N"
    E = "E"
    S = "S"
    W = "W"
    VALUE = "+"
    VALUE_1 = "-"


@dataclass
class DirectPositionListType:
    """PosList instances (and other instances with the content model specified by
    DirectPositionListType) hold the coordinates for a sequence of direct positions
    within the same coordinate reference system (CRS).

    if no srsName attribute is given, the CRS shall be specified as part
    of the larger context this geometry element is part of, typically a
    geometric object like a point, curve, etc. The optional attribute
    count specifies the number of direct positions in the list. If the
    attribute count is present then the attribute srsDimension shall be
    present, too. The number of entries in the list is equal to the
    product of the dimensionality of the coordinate reference system
    (i.e. it is a derived value of the coordinate reference system
    definition) and the number of direct positions.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: List[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    count: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DirectPositionType:
    """Direct position instances hold the coordinates for a position within some
    coordinate reference system (CRS).

    Since direct positions, as data types, will often be included in
    larger objects (such as geometry elements) that have references to
    CRS, the srsName attribute will in general be missing, if this
    particular direct position is included in a larger element with such
    a reference to a CRS. In this case, the CRS is implicitly assumed to
    take on the value of the containing object's CRS. if no srsName
    attribute is given, the CRS shall be specified as part of the larger
    context this geometry element is part of, typically a geometric
    object like a point, curve, etc.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: List[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class FormulaType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    a: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    b: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    c: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    d: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridEnvelopeType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    low: List[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
            "tokens": True,
        },
    )
    high: List[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
            "tokens": True,
        },
    )


class IncrementOrder(Enum):
    X_Y = "+x+y"
    Y_X = "+y+x"
    X_Y_1 = "+x-y"
    X_Y_2 = "-x-y"


@dataclass
class InlinePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class KnotType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    multiplicity: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    weight: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


class KnotTypesType(Enum):
    """
    This enumeration type specifies values for the knots' type (see ISO 19107:2003,
    6.4.25).
    """

    UNIFORM = "uniform"
    QUASI_UNIFORM = "quasiUniform"
    PIECEWISE_BEZIER = "piecewiseBezier"


@dataclass
class MeasureListType:
    """
    Gml:MeasureListType provides for a list of quantities.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: List[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class MeasureType2:
    """Gml:MeasureType supports recording an amount encoded as a value of XML
    Schema double, together with a units of measure indicated by an attribute uom,
    short for "units Of measure".

    The value of the uom attribute identifies a reference system for the
    amount, usually a ratio or interval scale.
    """

    class Meta:
        name = "MeasureType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


class NilReasonEnumerationValue2(Enum):
    INAPPLICABLE = "inapplicable"
    MISSING = "missing"
    TEMPLATE = "template"
    UNKNOWN = "unknown"
    WITHHELD = "withheld"


class RelatedTimeTypeRelativePosition(Enum):
    BEFORE = "Before"
    AFTER = "After"
    BEGINS = "Begins"
    ENDS = "Ends"
    DURING = "During"
    EQUALS = "Equals"
    CONTAINS = "Contains"
    OVERLAPS = "Overlaps"
    MEETS = "Meets"
    OVERLAPPED_BY = "OverlappedBy"
    MET_BY = "MetBy"
    BEGUN_BY = "BegunBy"
    ENDED_BY = "EndedBy"


class SequenceRuleEnumeration(Enum):
    LINEAR = "Linear"
    BOUSTROPHEDONIC = "Boustrophedonic"
    CANTOR_DIAGONAL = "Cantor-diagonal"
    SPIRAL = "Spiral"
    MORTON = "Morton"
    HILBERT = "Hilbert"


class SignType(Enum):
    """
    Gml:SignType is a convenience type with values "+" (plus) and "-" (minus).
    """

    VALUE = "-"
    VALUE_1 = "+"


class SurfaceInterpolationType(Enum):
    """
    Gml:SurfaceInterpolationType is a list of codes that may be used to identify
    the interpolation mechanisms specified by an application schema.
    """

    NONE = "none"
    PLANAR = "planar"
    SPHERICAL = "spherical"
    ELLIPTICAL = "elliptical"
    CONIC = "conic"
    TIN = "tin"
    PARAMETRIC_CURVE = "parametricCurve"
    POLYNOMIAL_SPLINE = "polynomialSpline"
    RATIONAL_SPLINE = "rationalSpline"
    TRIANGULATED_SPLINE = "triangulatedSpline"


class TimeIndeterminateValueType(Enum):
    """These values are interpreted as follows:
    -	"unknown" indicates that no specific value for temporal position is provided.
    -	"now" indicates that the specified value shall be replaced with the current temporal position whenever the value is accessed.
    -	"before" indicates that the actual temporal position is unknown, but it is known to be before the specified value.
    -	"after" indicates that the actual temporal position is unknown, but it is known to be after the specified value.
    A value for indeterminatePosition may
    -	be used either alone, or
    -	qualify a specific value for temporal position."""

    AFTER = "after"
    BEFORE = "before"
    NOW = "now"
    UNKNOWN = "unknown"


class TimeUnitTypeValue(Enum):
    YEAR = "year"
    MONTH = "month"
    DAY = "day"
    HOUR = "hour"
    MINUTE = "minute"
    SECOND = "second"


@dataclass
class UnitOfMeasureType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class AssociationName:
    class Meta:
        name = "associationName"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class BooleanValue:
    """Gml:booleanValue is a boolean value of an operation parameter.

    A Boolean value does not have an associated unit of measure.
    """

    class Meta:
        name = "booleanValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class DecimalMinutes:
    class Meta:
        name = "decimalMinutes"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
            "min_inclusive": Decimal("0.00"),
            "max_exclusive": Decimal("60.00"),
        },
    )


@dataclass
class DefaultCodeSpace:
    class Meta:
        name = "defaultCodeSpace"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Duration:
    """
    Gml:duration conforms to the ISO 8601 syntax for temporal length as implemented
    by the XML Schema duration type.
    """

    class Meta:
        name = "duration"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class GmlProfileSchema:
    class Meta:
        name = "gmlProfileSchema"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class IntegerValue:
    """Gml:integerValue is a positive integer value of an operation parameter,
    usually used for a count.

    An integer value does not have an associated unit of measure.
    """

    class Meta:
        name = "integerValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class IntegerValueList:
    """Gml:integerValueList is an ordered sequence of two or more integer values of
    an operation parameter list, usually used for counts.

    These integer values do not have an associated unit of measure. An
    element of this type contains a space-separated sequence of integer
    values.
    """

    class Meta:
        name = "integerValueList"
        namespace = "http://www.opengis.net/gml/3.2"

    value: List[int] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )


@dataclass
class MaximumOccurs:
    """Gml:maximumOccurs is the maximum number of times that values for this
    parameter group may be included.

    If this attribute is omitted, the maximum number shall be one.
    """

    class Meta:
        name = "maximumOccurs"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MaximumValue:
    """The gml:minimumValue and gml:maximumValue properties allow the specification
    of minimum and maximum value normally allowed for this axis, in the unit of
    measure for the axis.

    For a continuous angular axis such as longitude, the values wrap-
    around at this value. Also, values beyond this minimum/maximum can
    be used for specified purposes, such as in a bounding box. A value
    of minus infinity shall be allowed for the gml:minimumValue element,
    a value of plus infiniy for the gml:maximumValue element. If these
    elements are omitted, the value is unspecified.
    """

    class Meta:
        name = "maximumValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MinimumOccurs:
    """Gml:minimumOccurs is the minimum number of times that values for this
    parameter group or parameter are required.

    If this attribute is omitted, the minimum number shall be one.
    """

    class Meta:
        name = "minimumOccurs"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MinimumValue:
    """The gml:minimumValue and gml:maximumValue properties allow the specification
    of minimum and maximum value normally allowed for this axis, in the unit of
    measure for the axis.

    For a continuous angular axis such as longitude, the values wrap-
    around at this value. Also, values beyond this minimum/maximum can
    be used for specified purposes, such as in a bounding box. A value
    of minus infinity shall be allowed for the gml:minimumValue element,
    a value of plus infiniy for the gml:maximumValue element. If these
    elements are omitted, the value is unspecified.
    """

    class Meta:
        name = "minimumValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Minutes:
    class Meta:
        name = "minutes"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
            "max_inclusive": 59,
        },
    )


@dataclass
class ModifiedCoordinate:
    """
    Gml:modifiedCoordinate is a positive integer defining a position in a
    coordinate tuple.
    """

    class Meta:
        name = "modifiedCoordinate"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class OperationVersion:
    """Gml:operationVersion is the version of the coordinate transformation (i.e.,
    instantiation due to the stochastic nature of the parameters).

    Mandatory when describing a transformation, and should not be
    supplied for a conversion.
    """

    class Meta:
        name = "operationVersion"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Origin:
    """
    Gml:origin is the date and time origin of this temporal datum.
    """

    class Meta:
        name = "origin"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class RealizationEpoch:
    """Gml:realizationEpoch is the time after which this datum definition is valid.

    See ISO 19111 Table 32 for details.
    """

    class Meta:
        name = "realizationEpoch"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[XmlDate] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Remarks:
    class Meta:
        name = "remarks"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class ReversePropertyName:
    """If the value of an object property is another object and that object
    contains also a property for the association between the two objects, then this
    name of the reverse property may be encoded in a gml:reversePropertyName
    element in an appinfo annotation of the property element to document the
    constraint between the two properties.

    The value of the element shall contain the qualified name of the
    property element.
    """

    class Meta:
        name = "reversePropertyName"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Scope:
    """The gml:scope property provides a description of the usage, or limitations
    of usage, for which this CRS-related object is valid.

    If unknown, enter "not known".
    """

    class Meta:
        name = "scope"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Seconds:
    class Meta:
        name = "seconds"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
            "min_inclusive": Decimal("0.00"),
            "max_exclusive": Decimal("60.00"),
        },
    )


@dataclass
class SourceDimensions:
    """
    Gml:sourceDimensions is the number of dimensions in the source CRS of this
    operation method.
    """

    class Meta:
        name = "sourceDimensions"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class StringValue:
    """Gml:stringValue is a character string value of an operation parameter.

    A string value does not have an associated unit of measure.
    """

    class Meta:
        name = "stringValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class TargetDimensions:
    """
    Gml:targetDimensions is the number of dimensions in the target CRS of this
    operation method.
    """

    class Meta:
        name = "targetDimensions"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class TargetElement:
    class Meta:
        name = "targetElement"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class ValueFile:
    """Gml:valueFile is a reference to a file or a part of a file containing one or
    more parameter values, each numeric value with its associated unit of measure.

    When referencing a part of a file, that file shall contain multiple
    identified parts, such as an XML encoded document. Furthermore, the
    referenced file or part of a file may reference another part of the
    same or different files, as allowed in XML documents.
    """

    class Meta:
        name = "valueFile"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


class ActuateType(Enum):
    ON_LOAD = "onLoad"
    ON_REQUEST = "onRequest"
    OTHER = "other"
    NONE = "none"


class ShowType(Enum):
    NEW = "new"
    REPLACE = "replace"
    EMBED = "embed"
    OTHER = "other"
    NONE = "none"


class TypeType(Enum):
    SIMPLE = "simple"
    EXTENDED = "extended"
    TITLE = "title"
    RESOURCE = "resource"
    LOCATOR = "locator"
    ARC = "arc"


class LangValue(Enum):
    VALUE = ""


@dataclass
class CtOperationType(AbstractObjectType1):
    class Meta:
        name = "CT_Operation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CiDateTypeCode2(CodeListValueType1):
    """
    Identification of when a given event occurred.
    """

    class Meta:
        name = "CI_DateTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiOnLineFunctionCode2(CodeListValueType1):
    """
    Function performed by the resource.
    """

    class Meta:
        name = "CI_OnLineFunctionCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiPresentationFormCode2(CodeListValueType1):
    """
    Mode in which the data is represented.
    """

    class Meta:
        name = "CI_PresentationFormCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiRoleCode2(CodeListValueType1):
    """
    Function performed by the responsible party.
    """

    class Meta:
        name = "CI_RoleCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiTelephoneTypeCode2(CodeListValueType1):
    """
    Type of telephone.
    """

    class Meta:
        name = "CI_TelephoneTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiDateTypeCode1(CodeListValueType1):
    """
    Identification of when a given event occurred.
    """

    class Meta:
        name = "CI_DateTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiOnLineFunctionCode1(CodeListValueType1):
    """
    Function performed by the resource.
    """

    class Meta:
        name = "CI_OnLineFunctionCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiPresentationFormCode1(CodeListValueType1):
    """
    Mode in which the data is represented.
    """

    class Meta:
        name = "CI_PresentationFormCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiRoleCode1(CodeListValueType1):
    """
    Function performed by the responsible party.
    """

    class Meta:
        name = "CI_RoleCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiTelephoneTypeCode1(CodeListValueType1):
    """
    Type of telephone.
    """

    class Meta:
        name = "CI_TelephoneTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class AbstractGenericName1(CodeType1):
    class Meta:
        name = "AbstractGenericName"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class AbstractObject1(AbstractObjectType1):
    class Meta:
        name = "AbstractObject"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class Angle1(MeasureType1):
    class Meta:
        name = "Angle"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class Binary1(BinaryType1):
    class Meta:
        name = "Binary"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class BooleanPropertyType2:
    class Meta:
        name = "Boolean_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    boolean: Optional[Boolean1] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DateTimePropertyType1:
    class Meta:
        name = "DateTime_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    date_time: Optional[DateTime1] = field(
        default=None,
        metadata={
            "name": "DateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DatePropertyType1:
    class Meta:
        name = "Date_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    date: Optional[Date1] = field(
        default=None,
        metadata={
            "name": "Date",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "nillable": True,
        },
    )
    date_time: Optional[DateTime1] = field(
        default=None,
        metadata={
            "name": "DateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DecimalPropertyType1:
    class Meta:
        name = "Decimal_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    decimal: Optional[Decimal1] = field(
        default=None,
        metadata={
            "name": "Decimal",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Distance1(MeasureType1):
    class Meta:
        name = "Distance"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class IntegerPropertyType1:
    class Meta:
        name = "Integer_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    integer: Optional[Integer1] = field(
        default=None,
        metadata={
            "name": "Integer",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Length1(MeasureType1):
    class Meta:
        name = "Length"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class Measure1(MeasureType1):
    class Meta:
        name = "Measure"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class NumberPropertyType1:
    class Meta:
        name = "Number_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    real: Optional[Real1] = field(
        default=None,
        metadata={
            "name": "Real",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    decimal: Optional[Decimal1] = field(
        default=None,
        metadata={
            "name": "Decimal",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    integer: Optional[Integer1] = field(
        default=None,
        metadata={
            "name": "Integer",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ObjectReferencePropertyType1:
    class Meta:
        name = "ObjectReference_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RealPropertyType1:
    class Meta:
        name = "Real_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    real: Optional[Real1] = field(
        default=None,
        metadata={
            "name": "Real",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RecordTypeType1:
    class Meta:
        name = "RecordType_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class RecordPropertyType1:
    class Meta:
        name = "Record_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    record: Optional[Record1] = field(
        default=None,
        metadata={
            "name": "Record",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScopedName1(CodeType1):
    class Meta:
        name = "ScopedName"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class TmPeriodDurationPropertyType1:
    class Meta:
        name = "TM_PeriodDuration_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    tm_period_duration: Optional[TmPeriodDuration1] = field(
        default=None,
        metadata={
            "name": "TM_PeriodDuration",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UnlimitedInteger1(UnlimitedIntegerType1):
    class Meta:
        name = "UnlimitedInteger"
        nillable = True
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class UomIdentifierPropertyType:
    class Meta:
        name = "UomIdentifier_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    uom_identifier: Optional[UomIdentifier] = field(
        default=None,
        metadata={
            "name": "UomIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AnchorType:
    class Meta:
        name = "Anchor_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class FileName(FileNameType):
    class Meta:
        namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"


@dataclass
class MimeFileType(MimeFileTypeType):
    class Meta:
        namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"


@dataclass
class CountryCode(CodeListValueType1):
    class Meta:
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class LanguageCode1(CodeListValueType1):
    class Meta:
        name = "LanguageCode"
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class LocalisedCharacterString1(LocalisedCharacterStringType1):
    class Meta:
        name = "LocalisedCharacterString"
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class MdCharacterSetCode1(CodeListValueType1):
    class Meta:
        name = "MD_CharacterSetCode"
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class MiContextCode(CodeListValueType1):
    """Description: context of activation shortName: CntxtCode"""

    class Meta:
        name = "MI_ContextCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiGeometryTypeCode(CodeListValueType1):
    """Description: geometric description of collection shortName: GeoTypeCode"""

    class Meta:
        name = "MI_GeometryTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiInstrumentationEventTypeCode(CodeListValueType1):
    class Meta:
        name = "MI_InstrumentationEventTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiObjectiveTypeCode(CodeListValueType1):
    """Description: temporal persistence of collection objective shortName: ObjTypeCode"""

    class Meta:
        name = "MI_ObjectiveTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiOperationTypeCode(CodeListValueType1):
    class Meta:
        name = "MI_OperationTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiPriorityCode(CodeListValueType1):
    """Description: ordered list of priorities shortName: PriCode"""

    class Meta:
        name = "MI_PriorityCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiSensorTypeCode(CodeListValueType1):
    """&lt;UsedBy&gt; &lt;NameSpace&gt;ISO 19115-2 Metadata - Imagery&lt;/NameSpace&gt; &lt;Class&gt;MI_Instrument&lt;/Class&gt; &lt;Package&gt;Acquisition information - Imagery&lt;/Package&gt; &lt;Attribute&gt;type&lt;/Attribute&gt; &lt;Type&gt;MI_SensorTypeCode&lt;/Type&gt; &lt;UsedBy&gt;"""

    class Meta:
        name = "MI_SensorTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiSensorPropertyType:
    class Meta:
        name = "MI_Sensor_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_sensor: Optional["MiSensor"] = field(
        default=None,
        metadata={
            "name": "MI_Sensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiSequenceCode(CodeListValueType1):
    """Description: temporal relation of activation shortName: SeqCode"""

    class Meta:
        name = "MI_SequenceCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiTriggerCode(CodeListValueType1):
    """Description: mechanism of activation shortName: TriggerCode"""

    class Meta:
        name = "MI_TriggerCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class AbstractAcquisitionInformationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_AcquisitionInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractApplicationSchemaInformationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_ApplicationSchemaInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractCitationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Citation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractConstraintsType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Constraints_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractContentInformationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_ContentInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractDistributionType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Distribution_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractExtentType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Extent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractFormatType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Format_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractLineageInformationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_LineageInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractMaintenanceInformationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_MaintenanceInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractMetadataExtensionType(AbstractObjectType1):
    class Meta:
        name = "Abstract_MetadataExtension_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractMetadataType2(AbstractObjectType1):
    class Meta:
        name = "Abstract_Metadata_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractOnlineResourceType(AbstractObjectType1):
    class Meta:
        name = "Abstract_OnlineResource_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractParameterType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Parameter_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractPlatformType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Platform_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractPortrayalCatalogueInformationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_PortrayalCatalogueInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractReferenceSystemType(AbstractObjectType1):
    class Meta:
        name = "Abstract_ReferenceSystem_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractResourceDescriptionType(AbstractObjectType1):
    class Meta:
        name = "Abstract_ResourceDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractResponsibilityType(AbstractObjectType1):
    class Meta:
        name = "Abstract_Responsibility_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractSpatialRepresentationType(AbstractObjectType1):
    class Meta:
        name = "Abstract_SpatialRepresentation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractSpatialResolutionType(AbstractObjectType1):
    class Meta:
        name = "Abstract_SpatialResolution_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractStandardOrderProcessType(AbstractObjectType1):
    class Meta:
        name = "Abstract_StandardOrderProcess_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractTypedDateType(AbstractObjectType1):
    class Meta:
        name = "Abstract_TypedDate_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdProgressCode1(CodeListValueType1):
    """
    Status of the resource.
    """

    class Meta:
        name = "MD_ProgressCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdScopeCode1(CodeListValueType1):
    """
    Class of information to which the referencing entity applies.
    """

    class Meta:
        name = "MD_ScopeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdSpatialRepresentationTypeCode1(CodeListValueType1):
    """
    Method used to represent geographic information in the resource.
    """

    class Meta:
        name = "MD_SpatialRepresentationTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class UriType(AbstractObjectType1):
    class Meta:
        name = "URI_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdClassificationCode2(CodeListValueType1):
    """
    Name of the handling restrictions on the resource.
    """

    class Meta:
        name = "MD_ClassificationCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"


@dataclass
class MdRestrictionCode2(CodeListValueType1):
    """
    Limitation(s) placed upon the access or use of the data.
    """

    class Meta:
        name = "MD_RestrictionCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"


@dataclass
class MdMetadataPropertyType2:
    class Meta:
        name = "MD_Metadata_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mdb/2.0"

    mi_metadata: Optional["MiMetadata"] = field(
        default=None,
        metadata={
            "name": "MI_Metadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    md_metadata: Optional["MdMetadata2"] = field(
        default=None,
        metadata={
            "name": "MD_Metadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDatatypeCode2(CodeListValueType1):
    """
    Datatype of element or entity.
    """

    class Meta:
        name = "MD_DatatypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"


@dataclass
class MdObligationCode2:
    """
    Obligation of the element or entity.
    """

    class Meta:
        name = "MD_ObligationCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    value: Optional[MdObligationCodeType2] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdMaintenanceFrequencyCode2(CodeListValueType1):
    """
    Frequency with which modifications and deletions are made to the data after it
    is first produced.
    """

    class Meta:
        name = "MD_MaintenanceFrequencyCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mmi/1.0"


@dataclass
class AbstractMdContentInformationPropertyType:
    class Meta:
        name = "AbstractMD_ContentInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMdContentInformationType2(AbstractObjectType1):
    class Meta:
        name = "AbstractMD_ContentInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdCoverageContentTypeCode2(CodeListValueType1):
    """
    Specific type of information represented in the cell.
    """

    class Meta:
        name = "MD_CoverageContentTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdImagingConditionCode2(CodeListValueType1):
    """
    Code which indicates conditions which may affect the image.
    """

    class Meta:
        name = "MD_ImagingConditionCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiBandDefinition(CodeListValueType1):
    """Description: Designation of criterion for defining maximum and minimum wavelengths for a spectral band FGDC: Band_Boundry_Definition shortName: BndDef"""

    class Meta:
        name = "MI_BandDefinition"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiPolarisationOrientationCode(CodeListValueType1):
    """Description: polarisation of the antenna relative to the waveform shortName: PolarOrienCode"""

    class Meta:
        name = "MI_PolarisationOrientationCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiTransferFunctionTypeCode(CodeListValueType1):
    """Description: transform function to be used when scaling a physical value for a given element shortName: XfrFuncTypeCode"""

    class Meta:
        name = "MI_TransferFunctionTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdFormatPropertyType2:
    class Meta:
        name = "MD_Format_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_format: Optional["MdFormat2"] = field(
        default=None,
        metadata={
            "name": "MD_Format",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMediumFormatCode2(CodeListValueType1):
    """
    Method used to write to the medium.
    """

    class Meta:
        name = "MD_MediumFormatCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class DsAssociationTypeCode2(CodeListValueType1):
    """
    Justification for the correlation of two resources.
    """

    class Meta:
        name = "DS_AssociationTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class DsInitiativeTypeCode2(CodeListValueType1):
    """
    Type of aggregation activity in which resources are related.
    """

    class Meta:
        name = "DS_InitiativeTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class MdKeywordTypeCode2(CodeListValueType1):
    """
    Methods used to group similar keywords.
    """

    class Meta:
        name = "MD_KeywordTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class MdTopicCategoryCode2:
    """High-level geographic data thematic classification to assist in the grouping
    and search of available geographic data sets.

    Can be used to group keywords as well. Listed examples are not
    exhaustive. NOTE: It is understood there are overlaps between
    general categories and the user is encouraged to select the one most
    appropriate.
    """

    class Meta:
        name = "MD_TopicCategoryCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    value: Optional[MdTopicCategoryCodeType2] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class LeParameterDirection:
    """
    Direction of parameter (in, out, in/out)
    """

    class Meta:
        name = "LE_ParameterDirection"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    value: Optional[LeParameterDirectionType] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class LeSourcePropertyType:
    class Meta:
        name = "LE_Source_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_source: Optional["LeSource"] = field(
        default=None,
        metadata={
            "name": "LE_Source",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdReferenceSystemTypeCode(CodeListValueType1):
    """
    Defines type of reference system used.
    """

    class Meta:
        name = "MD_ReferenceSystemTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/mrs/1.0"


@dataclass
class MdCellGeometryCode2(CodeListValueType1):
    """
    Code indicating the geometry represented by the grid cell value.
    """

    class Meta:
        name = "MD_CellGeometryCode"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdDimensionNameTypeCode2(CodeListValueType1):
    """
    Name of the dimension.
    """

    class Meta:
        name = "MD_DimensionNameTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdGeometricObjectTypeCode2(CodeListValueType1):
    """
    Name of point or vector objects used to locate zero-, one-, two-, or three-
    dimensional spatial locations in the dataset.
    """

    class Meta:
        name = "MD_GeometricObjectTypeCode"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdPixelOrientationCode2:
    """
    Point in a pixel corresponding to the Earth location of the pixel.
    """

    class Meta:
        name = "MD_PixelOrientationCode"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    value: Optional[MdPixelOrientationCodeType2] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdTopologyLevelCode2(CodeListValueType1):
    """
    Degree of complexity of the spatial relationships.
    """

    class Meta:
        name = "MD_TopologyLevelCode"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class Dcplist(CodeListValueType1):
    """
    Class of information to which the referencing entity applies.
    """

    class Meta:
        name = "DCPList"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class SvCouplingType(CodeListValueType1):
    """
    Class of information to which the referencing entity applies.
    """

    class Meta:
        name = "SV_CouplingType"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class SvParameterDirection:
    """
    Class of information to which the referencing entity applies.
    """

    class Meta:
        name = "SV_ParameterDirection"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    value: Optional[SvParameterDirectionType] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class AbstractDataQualityType(AbstractObjectType1):
    class Meta:
        name = "Abstract_DataQuality_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/dqc/1.0"


@dataclass
class DqEvaluationMethodTypeCode2(CodeListValueType1):
    """
    Type of method for evaluating an identified data quality measure.
    """

    class Meta:
        name = "DQ_EvaluationMethodTypeCode"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractGenericName2(CodeType2):
    class Meta:
        name = "AbstractGenericName"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class AbstractObject3(AbstractObjectType2):
    class Meta:
        name = "AbstractObject"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Binary2(BinaryType2):
    class Meta:
        name = "Binary"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class BooleanPropertyType3:
    class Meta:
        name = "Boolean_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    boolean: Optional[Boolean3] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DateTimePropertyType2:
    class Meta:
        name = "DateTime_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    date_time: Optional[DateTime2] = field(
        default=None,
        metadata={
            "name": "DateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DatePropertyType2:
    class Meta:
        name = "Date_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    date: Optional[Date2] = field(
        default=None,
        metadata={
            "name": "Date",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "nillable": True,
        },
    )
    date_time: Optional[DateTime2] = field(
        default=None,
        metadata={
            "name": "DateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DecimalPropertyType2:
    class Meta:
        name = "Decimal_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    decimal: Optional[Decimal2] = field(
        default=None,
        metadata={
            "name": "Decimal",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class IntegerPropertyType2:
    class Meta:
        name = "Integer_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    integer: Optional[Integer2] = field(
        default=None,
        metadata={
            "name": "Integer",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LocalName(CodeType2):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Measure2(MeasureType2):
    class Meta:
        name = "Measure"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class NumberPropertyType2:
    class Meta:
        name = "Number_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    real: Optional[Real2] = field(
        default=None,
        metadata={
            "name": "Real",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    decimal: Optional[Decimal2] = field(
        default=None,
        metadata={
            "name": "Decimal",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    integer: Optional[Integer2] = field(
        default=None,
        metadata={
            "name": "Integer",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ObjectReferencePropertyType2:
    class Meta:
        name = "ObjectReference_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RealPropertyType2:
    class Meta:
        name = "Real_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    real: Optional[Real2] = field(
        default=None,
        metadata={
            "name": "Real",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RecordTypeType2:
    class Meta:
        name = "RecordType_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class RecordPropertyType2:
    class Meta:
        name = "Record_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    record: Optional[Record2] = field(
        default=None,
        metadata={
            "name": "Record",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScopedName2(CodeType2):
    class Meta:
        name = "ScopedName"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class UnlimitedInteger2(UnlimitedIntegerType2):
    class Meta:
        name = "UnlimitedInteger"
        nillable = True
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class AbstractDqResultType1(AbstractObjectType2):
    class Meta:
        name = "AbstractDQ_Result_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdContentInformationType1(AbstractObjectType2):
    class Meta:
        name = "AbstractMD_ContentInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdSpatialRepresentationType1(AbstractObjectType2):
    """
    Digital mechanism used to represent spatial information.
    """

    class Meta:
        name = "AbstractMD_SpatialRepresentation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiDateTypeCode3(CodeListValueType2):
    class Meta:
        name = "CI_DateTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiOnLineFunctionCode3(CodeListValueType2):
    class Meta:
        name = "CI_OnLineFunctionCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiPresentationFormCode3(CodeListValueType2):
    class Meta:
        name = "CI_PresentationFormCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiRoleCode3(CodeListValueType2):
    class Meta:
        name = "CI_RoleCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class Country(CodeListValueType2):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqEvaluationMethodTypeCode1(CodeListValueType2):
    class Meta:
        name = "DQ_EvaluationMethodTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsAssociationTypeCode1(CodeListValueType2):
    class Meta:
        name = "DS_AssociationTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsAssociationType(AbstractObjectType2):
    class Meta:
        name = "DS_Association_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsInitiativeTypeCode1(CodeListValueType2):
    class Meta:
        name = "DS_InitiativeTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LiProcessStepPropertyType1:
    class Meta:
        name = "LI_ProcessStep_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    li_process_step: Optional["LiProcessStep1"] = field(
        default=None,
        metadata={
            "name": "LI_ProcessStep",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LanguageCode2(CodeListValueType2):
    class Meta:
        name = "LanguageCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LocalisedCharacterString2(LocalisedCharacterStringType2):
    class Meta:
        name = "LocalisedCharacterString"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCellGeometryCode1(CodeListValueType2):
    class Meta:
        name = "MD_CellGeometryCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCharacterSetCode2(CodeListValueType2):
    class Meta:
        name = "MD_CharacterSetCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdClassificationCode1(CodeListValueType2):
    class Meta:
        name = "MD_ClassificationCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCoverageContentTypeCode1(CodeListValueType2):
    class Meta:
        name = "MD_CoverageContentTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDatatypeCode1(CodeListValueType2):
    class Meta:
        name = "MD_DatatypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDimensionNameTypeCode1(CodeListValueType2):
    class Meta:
        name = "MD_DimensionNameTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistributionUnits(CodeListValueType2):
    class Meta:
        name = "MD_DistributionUnits"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistributorPropertyType1:
    class Meta:
        name = "MD_Distributor_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_distributor: Optional["MdDistributor1"] = field(
        default=None,
        metadata={
            "name": "MD_Distributor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeometricObjectTypeCode1(CodeListValueType2):
    class Meta:
        name = "MD_GeometricObjectTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdImagingConditionCode1(CodeListValueType2):
    class Meta:
        name = "MD_ImagingConditionCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdKeywordTypeCode1(CodeListValueType2):
    class Meta:
        name = "MD_KeywordTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMaintenanceFrequencyCode1(CodeListValueType2):
    class Meta:
        name = "MD_MaintenanceFrequencyCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMediumFormatCode1(CodeListValueType2):
    class Meta:
        name = "MD_MediumFormatCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMediumNameCode(CodeListValueType2):
    class Meta:
        name = "MD_MediumNameCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMetadataPropertyType1:
    class Meta:
        name = "MD_Metadata_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_metadata: Optional["MdMetadata1"] = field(
        default=None,
        metadata={
            "name": "MD_Metadata",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdObligationCode1:
    class Meta:
        name = "MD_ObligationCode"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: Optional[MdObligationCodeType1] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdPixelOrientationCode1:
    class Meta:
        name = "MD_PixelOrientationCode"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: Optional[MdPixelOrientationCodeType1] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdProgressCode2(CodeListValueType2):
    class Meta:
        name = "MD_ProgressCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdRestrictionCode1(CodeListValueType2):
    class Meta:
        name = "MD_RestrictionCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdScopeCode2(CodeListValueType2):
    class Meta:
        name = "MD_ScopeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdSpatialRepresentationTypeCode2(CodeListValueType2):
    class Meta:
        name = "MD_SpatialRepresentationTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdTopicCategoryCode1:
    class Meta:
        name = "MD_TopicCategoryCode"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: Optional[MdTopicCategoryCodeType1] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdTopologyLevelCode1(CodeListValueType2):
    class Meta:
        name = "MD_TopologyLevelCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class RsReferenceSystemPropertyType:
    class Meta:
        name = "RS_ReferenceSystem_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UrlPropertyType:
    class Meta:
        name = "URL_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    url: Optional[Url] = field(
        default=None,
        metadata={
            "name": "URL",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScCrsPropertyType1:
    class Meta:
        name = "SC_CRS_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gsr"

    compound_crs: Optional["CompoundCrs"] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional["GeocentricCrs"] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional["GeographicCrs"] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional["TemporalCrs"] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional["ImageCrs"] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional["EngineeringCrs"] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional["VerticalCrs"] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional["GeodeticCrs"] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional["DerivedCrs"] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional["ProjectedCrs"] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TmPeriodDurationPropertyType2:
    class Meta:
        name = "TM_PeriodDuration_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gts"

    tm_period_duration: Optional[TmPeriodDuration2] = field(
        default=None,
        metadata={
            "name": "TM_PeriodDuration",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gts",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCurveSegment(AbstractCurveSegmentType):
    """A curve segment defines a homogeneous segment of a curve.

    The attributes numDerivativesAtStart, numDerivativesAtEnd and
    numDerivativesInterior specify the type of continuity as specified
    in ISO 19107:2003, 6.4.9.3. The AbstractCurveSegment element is the
    abstract head of the substituition group for all curve segment
    elements, i.e. continuous segments of the same interpolation
    mechanism. All curve segments shall have an attribute interpolation
    with type gml:CurveInterpolationType specifying the curve
    interpolation mechanism used for this segment. This mechanism uses
    the control points and control parameters to determine the position
    of this curve segment.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralParameterValue(AbstractGeneralParameterValueType):
    """Gml:AbstractGeneralParameterValue is an abstract parameter value or group of
    parameter values.

    This abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "operationParameter" property element that references one element substitutable for the "OperationParameter" object element.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractMetaData1(AbstractMetaDataType1):
    class Meta:
        name = "AbstractMetaData"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractParametricCurveSurfaceType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractSurfacePatch(AbstractSurfacePatchType):
    """A surface patch defines a homogenuous portion of a surface.

    The AbstractSurfacePatch element is the abstract head of the
    substituition group for all surface patch elements describing a
    continuous portion of a surface. All surface patches shall have an
    attribute interpolation (declared in the types derived from
    gml:AbstractSurfacePatchType) specifying the interpolation mechanism
    used for the patch using gml:SurfaceInterpolationType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AngleType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AreaType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AssociationRoleType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BooleanList:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: List[Union[str, NilReasonEnumerationValue2]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class Boolean2:
    class Meta:
        name = "Boolean"
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CrspropertyType:
    """
    Gml:CRSPropertyType is a property type for association roles to a CRS abstract
    coordinate reference system, either referencing or containing the definition of
    that CRS.
    """

    class Meta:
        name = "CRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    compound_crs: Optional["CompoundCrs"] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional["GeocentricCrs"] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional["GeographicCrs"] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional["TemporalCrs"] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional["ImageCrs"] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional["EngineeringCrs"] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional["VerticalCrs"] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional["GeodeticCrs"] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional["DerivedCrs"] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional["ProjectedCrs"] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Category(CodeType2):
    """
    A gml:Category has an optional XML attribute codeSpace, whose value is a URI
    which identifies a dictionary, codelist or authority for the term.
    """

    class Meta:
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CodeOrNilReasonListType:
    """Gml:CodeOrNilReasonListType provides for lists of terms.

    The values in an instance element shall all be valid according to
    the rules of the dictionary, classification scheme, or authority
    identified by the value of its codeSpace attribute. An instance
    element may also include embedded values from NilReasonType. It is
    intended to be used in situations where a term or classification is
    expected, but the value may be absent for some reason.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: List[Union[str, NilReasonEnumerationValue2]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class CodeWithAuthorityType(CodeType2):
    """
    Gml:CodeWithAuthorityType requires that the codeSpace attribute is provided in
    an instance.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ConversionToPreferredUnitType(UnitOfMeasureType):
    """The inherited attribute uom references the preferred unit that this
    conversion applies to. The conversion of a unit to the preferred unit for this
    physical quantity type is specified by an arithmetic conversion (scaling and/or
    offset). The content model extends gml:UnitOfMeasureType, which has a mandatory
    attribute uom which identifies the preferred unit for the physical quantity
    type that this conversion applies to. The conversion is specified by a choice
    of.

    -       gml:factor, which defines the scale factor, or
    -       gml:formula, which defines a formula
    by which a value using the conventional unit of measure can be converted to obtain the corresponding value using the preferred unit of measure.
    The formula defines the parameters of a simple formula by which a value using the conventional unit of measure can be converted to the corresponding value using the preferred unit of measure. The formula element contains elements a, b, c and d, whose values use the XML Schema type double. These values are used in the formula y = (a + bx) / (c + dx), where x is a value using this unit, and y is the corresponding value using the base unit. The elements a and d are optional, and if values are not provided, those parameters are considered to be zero. If values are not provided for both a and d, the formula is equivalent to a fraction with numerator and denominator parameters.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    factor: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    formula: Optional[FormulaType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Count:
    class Meta:
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CountExtent:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: List[Union[str, NilReasonEnumerationValue2]] = field(
        default_factory=list,
        metadata={
            "length": 2,
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class CountList:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: List[Union[str, NilReasonEnumerationValue2]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class DegreesType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
            "max_inclusive": 359,
        },
    )
    direction: Optional[DegreesTypeDirection] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DerivationUnitTermType(UnitOfMeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exponent: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DirectedFacePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    face: Optional["Face"] = field(
        default=None,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.VALUE_1,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DirectedNodePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    node: Optional["Node"] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.VALUE_1,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericMetaDataType(AbstractMetaDataType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticCrspropertyType:
    """
    Gml:GeodeticCRSPropertyType is a property type for association roles to a
    geodetic coordinate reference system, either referencing or containing the
    definition of that reference system.
    """

    class Meta:
        name = "GeodeticCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geodetic_crs: Optional["GeodeticCrs"] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeographicCrspropertyType:
    class Meta:
        name = "GeographicCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geographic_crs: Optional["GeographicCrs"] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridLengthType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridLimitsType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    grid_envelope: Optional[GridEnvelopeType] = field(
        default=None,
        metadata={
            "name": "GridEnvelope",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class KnotPropertyType:
    """
    Gml:KnotPropertyType encapsulates a knot to use it in a geometric type.

    :ivar knot: A knot is a breakpoint on a piecewise spline curve.
        value is the value of the parameter at the knot of the spline
        (see ISO 19107:2003, 6.4.24.2). multiplicity is the multiplicity
        of this knot used in the definition of the spline (with the same
        weight). weight is the value of the averaging weight used for
        this knot of the spline.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    knot: Optional[KnotType] = field(
        default=None,
        metadata={
            "name": "Knot",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class LengthType(MeasureType2):
    """This is a prototypical definition for a specific measure type defined as a
    vacuous extension (i.e. aliases) of gml:MeasureType.

    In this case, the content model supports the description of a length
    (or distance) quantity, with its units. The unit of measure
    referenced by uom shall be suitable for a length, such as metres or
    feet.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LocationKeyWord(CodeType2):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MeasureOrNilReasonListType:
    """Gml:MeasureOrNilReasonListType provides for a list of quantities.

    An instance element may also include embedded values from
    NilReasonType. It is intended to be used in situations where a value
    is expected, but the value may be absent for some reason.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: List[Union[str, NilReasonEnumerationValue2]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class NodePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    node: Optional["Node"] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Null:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: Union[str, NilReasonEnumerationValue2] = field(
        default="",
        metadata={
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Quantity(MeasureType2):
    """
    An XML attribute uom ("unit of measure") is required, whose value is a URI
    which identifies the definition of a ratio scale or units by which the numeric
    value shall be multiplied, or an interval or position scale on which the value
    occurs.
    """

    class Meta:
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ReferenceType:
    """
    Gml:ReferenceType is intended to be used in application schemas directly, if a
    property element shall use a "by-reference only" encoding.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ResultType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ScaleType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SequenceRuleType:
    """The gml:SequenceRuleType is derived from the gml:SequenceRuleEnumeration
    through the addition of an axisOrder attribute.

    The gml:SequenceRuleEnumeration is an enumerated type. The rule
    names are defined in ISO 19123. If no rule name is specified the
    default is "Linear".
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[SequenceRuleEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    order: Optional[IncrementOrder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    axis_order: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisOrder",
            "type": "Attribute",
            "pattern": r"[\+\-][1-9][0-9]*",
            "tokens": True,
        },
    )


@dataclass
class SingleCrspropertyType:
    """
    Gml:SingleCRSPropertyType is a property type for association roles to a single
    coordinate reference system, either referencing or containing the definition of
    that coordinate reference system.
    """

    class Meta:
        name = "SingleCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geocentric_crs: Optional["GeocentricCrs"] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional["GeographicCrs"] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional["TemporalCrs"] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional["ImageCrs"] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional["EngineeringCrs"] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional["VerticalCrs"] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional["GeodeticCrs"] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional["DerivedCrs"] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional["ProjectedCrs"] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SpeedType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class StringOrRefType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeEdgePropertyType:
    """
    Gml:TimeEdgePropertyType provides for associating a gml:TimeEdge with an
    object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_edge: Optional["TimeEdge"] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeInstantPropertyType:
    """
    Gml:TimeInstantPropertyType provides for associating a gml:TimeInstant with an
    object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_instant: Optional["TimeInstant"] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeIntervalLengthType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    unit: Optional[Union[str, TimeUnitTypeValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"other:\w{2,}",
        },
    )
    radix: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    factor: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimePositionType:
    """The method for identifying a temporal position is specific to each temporal
    reference system.

    gml:TimePositionType supports the description of temporal position
    according to the subtypes described in ISO 19108. Values based on
    calendars and clocks use lexical formats that are based on ISO 8601,
    as described in XML Schema Part 2:2001. A decimal value may be used
    with coordinate systems such as GPS time or UNIX time. A URI may be
    used to provide a reference to some era in an ordinal reference
    system . In common with many of the components modelled as data
    types in the ISO 19100 series of International Standards, the
    corresponding GML component has simple content. However, the content
    model gml:TimePositionType is defined in several steps. Three XML
    attributes appear on gml:TimePositionType: A time value shall be
    associated with a temporal reference system through the frame
    attribute that provides a URI reference that identifies a
    description of the reference system. Following ISO 19108, the
    Gregorian calendar with UTC is the default reference system, but
    others may also be used. Components for describing temporal
    reference systems are described in 14.4, but it is not required that
    the reference system be described in this, as the reference may
    refer to anything that may be indentified with a URI. For time
    values using a calendar containing more than one era, the (optional)
    calendarEraName attribute provides the name of the calendar era.
    Inexact temporal positions may be expressed using the optional
    indeterminatePosition attribute.  This takes a value from an
    enumeration.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Union[
        XmlDate, XmlPeriod, XmlTime, XmlDateTime, str, Decimal
    ] = field(default="")
    frame: str = field(
        default="#ISO-8601",
        metadata={
            "type": "Attribute",
        },
    )
    calendar_era_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "calendarEraName",
            "type": "Attribute",
        },
    )
    indeterminate_position: Optional[TimeIndeterminateValueType] = field(
        default=None,
        metadata={
            "name": "indeterminatePosition",
            "type": "Attribute",
        },
    )


@dataclass
class TimePrimitivePropertyType:
    """
    Gml:TimePrimitivePropertyType provides a standard content model for
    associations between an arbitrary member of the substitution group whose head
    is gml:AbstractTimePrimitive and another object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_edge: Optional["TimeEdge"] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional["TimeNode"] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional["TimePeriod"] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional["TimeInstant"] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoComplexPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_complex: Optional["TopoComplex"] = field(
        default=None,
        metadata={
            "name": "TopoComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VectorType(DirectPositionType):
    """
    For some applications the components of the position may be adjusted to yield a
    unit vector.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VolumeType(MeasureType2):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractInlineProperty(InlinePropertyType):
    """
    Gml:abstractInlineProperty may be used as the head of a subtitution group of
    more specific elements providing a value inline.
    """

    class Meta:
        name = "abstractInlineProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AnchorDefinition(CodeType2):
    """Gml:anchorDefinition is a description, possibly including coordinates, of
    the definition used to anchor the datum to the Earth. Also known as the
    "origin", especially for engineering and image datums. The codeSpace attribute
    may be used to reference a source of more detailed on this point or surface, or
    on a set of such descriptions.

    -       For a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.
    -       For an engineering datum, the anchor definition may be a physical point, or it may be a point with defined coordinates in another CRS.may
    -       For an image datum, the anchor definition is usually either the centre of the image or the corner of the image.
    -       For a temporal datum, this attribute is not defined. Instead of the anchor definition, a temporal datum carries a separate time origin of type DateTime.
    """

    class Meta:
        name = "anchorDefinition"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AnchorPoint(CodeType2):
    class Meta:
        name = "anchorPoint"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AxisAbbrev(CodeType2):
    """Gml:axisAbbrev is the abbreviation used for this coordinate system axis;
    this abbreviation is also used to identify the coordinates in the coordinate
    tuple.

    The codeSpace attribute may reference a source of more information
    on a set of standardized abbreviations, or on this abbreviation.
    """

    class Meta:
        name = "axisAbbrev"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CatalogSymbol(CodeType2):
    """The catalogSymbol is the preferred lexical symbol used for this unit of
    measure.

    The codeSpace attribute in gml:CodeType identifies a namespace for
    the catalog symbol value, and might reference the external catalog.
    The string value in gml:CodeType contains the value of a symbol that
    should be unique within this catalog namespace. This symbol often
    appears explicitly in the catalog, but it could be a combination of
    symbols using a specified algebra of units.
    """

    class Meta:
        name = "catalogSymbol"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Coordinates(CoordinatesType):
    class Meta:
        name = "coordinates"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DoubleOrNilReasonTupleList:
    """Gml:doubleOrNilReasonList consists of a list of gml:doubleOrNilReason
    values, each separated by a whitespace.

    The gml:doubleOrNilReason values are grouped into tuples where the
    dimension of each tuple in the list is equal to the number of range
    parameters.
    """

    class Meta:
        name = "doubleOrNilReasonTupleList"
        namespace = "http://www.opengis.net/gml/3.2"

    value: List[Union[str, NilReasonEnumerationValue2]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class Formula(CodeType2):
    """Gml:formula Formula(s) or procedure used by an operation method.

    The use of the codespace attribite has been deprecated. The property
    value shall be a character string.
    """

    class Meta:
        name = "formula"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LocationName(CodeType2):
    """The gml:locationName property element is a convenience property where the
    text value describes the location of the feature.

    If the location names are selected from a controlled list, then the
    list shall be identified in the codeSpace attribute.
    """

    class Meta:
        name = "locationName"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Measure3(MeasureType2):
    """
    The value of a physical quantity, together with its unit.
    """

    class Meta:
        name = "measure"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MethodFormula(CodeType2):
    class Meta:
        name = "methodFormula"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Name(CodeType2):
    """The gml:name property provides a label or identifier for the object,
    commonly a descriptive name.

    An object may have several names, typically assigned by different
    authorities. gml:name uses the gml:CodeType content model.  The
    authority for a name is indicated by the value of its (optional)
    codeSpace attribute.  The name may or may not be unique, as
    determined by the rules of the organization responsible for the
    codeSpace.  In common usage there will be one name per authority, so
    a processing application may select the name from its preferred
    codeSpace.
    """

    class Meta:
        name = "name"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Pos(DirectPositionType):
    class Meta:
        name = "pos"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PosList(DirectPositionListType):
    class Meta:
        name = "posList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SemiMajorAxis(MeasureType2):
    """Gml:semiMajorAxis specifies the length of the semi-major axis of the
    ellipsoid, with its units.

    Uses the MeasureType with the restriction that the unit of measure
    referenced by uom must be suitable for a length, such as metres or
    feet.
    """

    class Meta:
        name = "semiMajorAxis"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TupleList(CoordinatesType):
    """Gml:CoordinatesType consists of a list of coordinate tuples, with each
    coordinate tuple separated by the ts or tuple separator (whitespace), and each
    coordinate in the tuple by the cs or coordinate separator (comma).

    The gml:tupleList encoding is effectively "band-interleaved".
    """

    class Meta:
        name = "tupleList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UnitOfMeasure(UnitOfMeasureType):
    """The element gml:unitOfMeasure is a property element to refer to a unit of
    measure.

    This is an empty element which carries a reference to a unit of
    measure definition.
    """

    class Meta:
        name = "unitOfMeasure"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Value(MeasureType2):
    """
    Gml:value is a numeric value of an operation parameter, with its associated
    unit of measure.
    """

    class Meta:
        name = "value"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueList(MeasureListType):
    """Gml:valueList is an ordered sequence of two or more numeric values of an
    operation parameter list, where each value has the same associated unit of
    measure.

    An element of this type contains a space-separated sequence of
    double values.
    """

    class Meta:
        name = "valueList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcType2:
    """
    :ivar type_value:
    :ivar arcrole:
    :ivar title:
    :ivar show:
    :ivar actuate:
    :ivar from_value:
    :ivar to: from and to have default behavior when values are missing
    """

    class Meta:
        name = "arcType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeType = field(
        init=False,
        default=TypeType.ARC,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    from_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    to: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class Extended:
    """Intended for use as the type of user-declared elements to make them extended
    links.

    Note that the elements referenced in the content model are all
    abstract. The intention is that by simply declaring elements with
    these as their substitutionGroup, all the right things will happen.
    """

    class Meta:
        name = "extended"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeType = field(
        init=False,
        default=TypeType.EXTENDED,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class LocatorType:
    """
    :ivar type_value:
    :ivar href:
    :ivar role:
    :ivar title:
    :ivar label: label is not required, but locators have no particular
        XLink function if they are not labeled.
    """

    class Meta:
        name = "locatorType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeType = field(
        init=False,
        default=TypeType.LOCATOR,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class ResourceType:
    class Meta:
        name = "resourceType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeType = field(
        init=False,
        default=TypeType.RESOURCE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class Simple:
    """
    Intended for use as the type of user-declared elements to make them simple
    links.
    """

    class Meta:
        name = "simple"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class TitleEltType:
    """
    :ivar type_value:
    :ivar lang: xml:lang is not required, but provides much of the
        motivation for title elements in addition to attributes, and so
        is provided here for convenience.
    :ivar content:
    """

    class Meta:
        name = "titleEltType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeType = field(
        init=False,
        default=TypeType.TITLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class AbstractFeatureTypeType(AbstractObjectType1):
    class Meta:
        name = "Abstract_FeatureType_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/fcc/2.1"


@dataclass
class FcFeatureAssociationPropertyType:
    class Meta:
        name = "FC_FeatureAssociation_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_association: Optional["FcFeatureAssociation"] = field(
        default=None,
        metadata={
            "name": "FC_FeatureAssociation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcRoleType(CodeListValueType1):
    """
    Code list for the classifications of roles.
    """

    class Meta:
        name = "FC_RoleType"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class CtOperation(CtOperationType):
    class Meta:
        name = "CT_Operation"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CiDateTypeCodePropertyType2:
    class Meta:
        name = "CI_DateTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_date_type_code: Optional[CiDateTypeCode2] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnLineFunctionCodePropertyType2:
    class Meta:
        name = "CI_OnLineFunctionCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_on_line_function_code: Optional[CiOnLineFunctionCode2] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiPresentationFormCodePropertyType2:
    class Meta:
        name = "CI_PresentationFormCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_presentation_form_code: Optional[CiPresentationFormCode2] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiRoleCodePropertyType2:
    class Meta:
        name = "CI_RoleCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_role_code: Optional[CiRoleCode2] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiTelephoneTypeCodePropertyType2:
    class Meta:
        name = "CI_TelephoneTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_telephone_type_code: Optional[CiTelephoneTypeCode2] = field(
        default=None,
        metadata={
            "name": "CI_TelephoneTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiDateTypeCodePropertyType1:
    class Meta:
        name = "CI_DateTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_date_type_code: Optional[CiDateTypeCode1] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnLineFunctionCodePropertyType1:
    class Meta:
        name = "CI_OnLineFunctionCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_on_line_function_code: Optional[CiOnLineFunctionCode1] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiPresentationFormCodePropertyType1:
    class Meta:
        name = "CI_PresentationFormCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_presentation_form_code: Optional[CiPresentationFormCode1] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiRoleCodePropertyType1:
    class Meta:
        name = "CI_RoleCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_role_code: Optional[CiRoleCode1] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiTelephoneTypeCodePropertyType1:
    class Meta:
        name = "CI_TelephoneTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_telephone_type_code: Optional[CiTelephoneTypeCode1] = field(
        default=None,
        metadata={
            "name": "CI_TelephoneTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AnglePropertyType1:
    class Meta:
        name = "Angle_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    angle: Optional[Angle1] = field(
        default=None,
        metadata={
            "name": "Angle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class BinaryPropertyType1:
    class Meta:
        name = "Binary_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    binary: Optional[Binary1] = field(
        default=None,
        metadata={
            "name": "Binary",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DistancePropertyType1:
    class Meta:
        name = "Distance_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    distance: Optional[Distance1] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class GenericNamePropertyType1:
    class Meta:
        name = "GenericName_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    scoped_name: Optional[ScopedName1] = field(
        default=None,
        metadata={
            "name": "ScopedName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LengthPropertyType1:
    class Meta:
        name = "Length_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    distance: Optional[Distance1] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    length: Optional[Length1] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MeasurePropertyType1:
    class Meta:
        name = "Measure_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    angle: Optional[Angle1] = field(
        default=None,
        metadata={
            "name": "Angle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    distance: Optional[Distance1] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    length: Optional[Length1] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    measure: Optional[Measure1] = field(
        default=None,
        metadata={
            "name": "Measure",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RecordType1(RecordTypeType1):
    class Meta:
        name = "RecordType"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class ScopedNamePropertyType1:
    class Meta:
        name = "ScopedName_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    scoped_name: Optional[ScopedName1] = field(
        default=None,
        metadata={
            "name": "ScopedName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UnlimitedIntegerPropertyType1:
    class Meta:
        name = "UnlimitedInteger_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    unlimited_integer: Optional[UnlimitedInteger1] = field(
        default=None,
        metadata={
            "name": "UnlimitedInteger",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Anchor(AnchorType):
    class Meta:
        namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"


@dataclass
class FileNamePropertyType:
    class Meta:
        name = "FileName_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"

    file_name: Optional[FileName] = field(
        default=None,
        metadata={
            "name": "FileName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gcx/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MimeFileTypePropertyType:
    class Meta:
        name = "MimeFileType_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"

    mime_file_type: Optional[MimeFileType] = field(
        default=None,
        metadata={
            "name": "MimeFileType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gcx/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractExGeographicExtentType2(AbstractObjectType1):
    """
    :ivar extent_type_code: indication of whether the geographic element
        encompasses an area covered by the data or an area where data is
        not present
    """

    class Meta:
        name = "AbstractEX_GeographicExtent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    extent_type_code: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "extentTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )


@dataclass
class CountryCodePropertyType:
    class Meta:
        name = "CountryCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    country_code: Optional[CountryCode] = field(
        default=None,
        metadata={
            "name": "CountryCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LanguageCodePropertyType1:
    class Meta:
        name = "LanguageCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    language_code: Optional[LanguageCode1] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LocalisedCharacterStringPropertyType1:
    class Meta:
        name = "LocalisedCharacterString_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    localised_character_string: Optional[LocalisedCharacterString1] = field(
        default=None,
        metadata={
            "name": "LocalisedCharacterString",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCharacterSetCodePropertyType1:
    class Meta:
        name = "MD_CharacterSetCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    md_character_set_code: Optional[MdCharacterSetCode1] = field(
        default=None,
        metadata={
            "name": "MD_CharacterSetCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiContextCodePropertyType:
    class Meta:
        name = "MI_ContextCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_context_code: Optional[MiContextCode] = field(
        default=None,
        metadata={
            "name": "MI_ContextCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiGeometryTypeCodePropertyType:
    class Meta:
        name = "MI_GeometryTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_geometry_type_code: Optional[MiGeometryTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_GeometryTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiInstrumentationEventTypeCodePropertyType:
    class Meta:
        name = "MI_InstrumentationEventTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_instrumentation_event_type_code: Optional[
        MiInstrumentationEventTypeCode
    ] = field(
        default=None,
        metadata={
            "name": "MI_InstrumentationEventTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiObjectiveTypeCodePropertyType:
    class Meta:
        name = "MI_ObjectiveTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_objective_type_code: Optional[MiObjectiveTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_ObjectiveTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiOperationTypeCodePropertyType:
    class Meta:
        name = "MI_OperationTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_operation_type_code: Optional[MiOperationTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_OperationTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiPriorityCodePropertyType:
    class Meta:
        name = "MI_PriorityCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_priority_code: Optional[MiPriorityCode] = field(
        default=None,
        metadata={
            "name": "MI_PriorityCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiRequestedDateType(AbstractObjectType1):
    """
    :ivar requested_date_of_collection: Description: preferred date and
        time of collection shortName: collectDate
    :ivar latest_acceptable_date: Description: latest date and time
        collection must be completed shortName: latestDate
    """

    class Meta:
        name = "MI_RequestedDate_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    requested_date_of_collection: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "requestedDateOfCollection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    latest_acceptable_date: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "latestAcceptableDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )


@dataclass
class MiSensorTypeCodePropertyType:
    class Meta:
        name = "MI_SensorTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_sensor_type_code: Optional[MiSensorTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_SensorTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiSequenceCodePropertyType:
    class Meta:
        name = "MI_SequenceCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_sequence_code: Optional[MiSequenceCode] = field(
        default=None,
        metadata={
            "name": "MI_SequenceCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiTriggerCodePropertyType:
    class Meta:
        name = "MI_TriggerCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_trigger_code: Optional[MiTriggerCode] = field(
        default=None,
        metadata={
            "name": "MI_TriggerCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractAcquisitionInformation(AbstractAcquisitionInformationType):
    class Meta:
        name = "Abstract_AcquisitionInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractApplicationSchemaInformation(
    AbstractApplicationSchemaInformationType
):
    class Meta:
        name = "Abstract_ApplicationSchemaInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractCitation(AbstractCitationType):
    class Meta:
        name = "Abstract_Citation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractConstraints(AbstractConstraintsType):
    class Meta:
        name = "Abstract_Constraints"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractContentInformation(AbstractContentInformationType):
    class Meta:
        name = "Abstract_ContentInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractDistribution(AbstractDistributionType):
    class Meta:
        name = "Abstract_Distribution"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractExtent(AbstractExtentType):
    class Meta:
        name = "Abstract_Extent"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractFormat(AbstractFormatType):
    """
    &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;
    """

    class Meta:
        name = "Abstract_Format"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractLineageInformation(AbstractLineageInformationType):
    class Meta:
        name = "Abstract_LineageInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractMaintenanceInformation(AbstractMaintenanceInformationType):
    class Meta:
        name = "Abstract_MaintenanceInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractMetadataExtension(AbstractMetadataExtensionType):
    class Meta:
        name = "Abstract_MetadataExtension"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractMetadata2(AbstractMetadataType2):
    class Meta:
        name = "Abstract_Metadata"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractOnlineResource(AbstractOnlineResourceType):
    class Meta:
        name = "Abstract_OnlineResource"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractParameter(AbstractParameterType):
    class Meta:
        name = "Abstract_Parameter"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractPlatform(AbstractPlatformType):
    class Meta:
        name = "Abstract_Platform"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractPortrayalCatalogueInformation(
    AbstractPortrayalCatalogueInformationType
):
    class Meta:
        name = "Abstract_PortrayalCatalogueInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractReferenceSystem(AbstractReferenceSystemType):
    class Meta:
        name = "Abstract_ReferenceSystem"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractResourceDescription(AbstractResourceDescriptionType):
    class Meta:
        name = "Abstract_ResourceDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractResponsibility(AbstractResponsibilityType):
    class Meta:
        name = "Abstract_Responsibility"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractSpatialRepresentation(AbstractSpatialRepresentationType):
    class Meta:
        name = "Abstract_SpatialRepresentation"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractSpatialResolution(AbstractSpatialResolutionType):
    class Meta:
        name = "Abstract_SpatialResolution"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractStandardOrderProcess(AbstractStandardOrderProcessType):
    class Meta:
        name = "Abstract_StandardOrderProcess"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class AbstractTypedDate(AbstractTypedDateType):
    class Meta:
        name = "Abstract_TypedDate"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdProgressCodePropertyType1:
    class Meta:
        name = "MD_ProgressCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_progress_code: Optional[MdProgressCode1] = field(
        default=None,
        metadata={
            "name": "MD_ProgressCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeCodePropertyType1:
    class Meta:
        name = "MD_ScopeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_scope_code: Optional[MdScopeCode1] = field(
        default=None,
        metadata={
            "name": "MD_ScopeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSpatialRepresentationTypeCodePropertyType1:
    class Meta:
        name = "MD_SpatialRepresentationTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_spatial_representation_type_code: Optional[
        MdSpatialRepresentationTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_SpatialRepresentationTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Uri(UriType):
    """
    Uniform Resource Identifier (URI), is a compact string of characters used to
    identify or name a resource.
    """

    class Meta:
        name = "URI"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdClassificationCodePropertyType2:
    class Meta:
        name = "MD_ClassificationCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    md_classification_code: Optional[MdClassificationCode2] = field(
        default=None,
        metadata={
            "name": "MD_ClassificationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRestrictionCodePropertyType2:
    class Meta:
        name = "MD_RestrictionCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    md_restriction_code: Optional[MdRestrictionCode2] = field(
        default=None,
        metadata={
            "name": "MD_RestrictionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDsResourceType(AbstractObjectType1):
    class Meta:
        name = "AbstractDS_Resource_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    has: List[MdMetadataPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class MdDatatypeCodePropertyType2:
    class Meta:
        name = "MD_DatatypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    md_datatype_code: Optional[MdDatatypeCode2] = field(
        default=None,
        metadata={
            "name": "MD_DatatypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdObligationCodePropertyType2:
    class Meta:
        name = "MD_ObligationCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    md_obligation_code: Optional[MdObligationCode2] = field(
        default=None,
        metadata={
            "name": "MD_ObligationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceFrequencyCodePropertyType2:
    class Meta:
        name = "MD_MaintenanceFrequencyCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mmi/1.0"

    md_maintenance_frequency_code: Optional[
        MdMaintenanceFrequencyCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceFrequencyCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMdContentInformation2(AbstractMdContentInformationType2):
    """Description of the content of a resource.

    Note in 19115-3 implementation, this class is implemented by
    abstract class _ContentInformation in the Abstract Common Classes
    package
    """

    class Meta:
        name = "AbstractMD_ContentInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdCoverageContentTypeCodePropertyType2:
    class Meta:
        name = "MD_CoverageContentTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    md_coverage_content_type_code: Optional[
        MdCoverageContentTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_CoverageContentTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImagingConditionCodePropertyType2:
    class Meta:
        name = "MD_ImagingConditionCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    md_imaging_condition_code: Optional[MdImagingConditionCode2] = field(
        default=None,
        metadata={
            "name": "MD_ImagingConditionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiBandDefinitionPropertyType:
    class Meta:
        name = "MI_BandDefinition_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_band_definition: Optional[MiBandDefinition] = field(
        default=None,
        metadata={
            "name": "MI_BandDefinition",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiPolarisationOrientationCodePropertyType:
    class Meta:
        name = "MI_PolarisationOrientationCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_polarisation_orientation_code: Optional[
        MiPolarisationOrientationCode
    ] = field(
        default=None,
        metadata={
            "name": "MI_PolarisationOrientationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiTransferFunctionTypeCodePropertyType:
    class Meta:
        name = "MI_TransferFunctionTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_transfer_function_type_code: Optional[
        MiTransferFunctionTypeCode
    ] = field(
        default=None,
        metadata={
            "name": "MI_TransferFunctionTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMediumFormatCodePropertyType2:
    class Meta:
        name = "MD_MediumFormatCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_medium_format_code: Optional[MdMediumFormatCode2] = field(
        default=None,
        metadata={
            "name": "MD_MediumFormatCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsAssociationTypeCodePropertyType2:
    class Meta:
        name = "DS_AssociationTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    ds_association_type_code: Optional[DsAssociationTypeCode2] = field(
        default=None,
        metadata={
            "name": "DS_AssociationTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsInitiativeTypeCodePropertyType2:
    class Meta:
        name = "DS_InitiativeTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    ds_initiative_type_code: Optional[DsInitiativeTypeCode2] = field(
        default=None,
        metadata={
            "name": "DS_InitiativeTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdKeywordTypeCodePropertyType2:
    class Meta:
        name = "MD_KeywordTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_keyword_type_code: Optional[MdKeywordTypeCode2] = field(
        default=None,
        metadata={
            "name": "MD_KeywordTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRepresentativeFractionType2(AbstractObjectType1):
    """
    :ivar denominator: the number below the line in a vulgar fraction
    """

    class Meta:
        name = "MD_RepresentativeFraction_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    denominator: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )


@dataclass
class MdTopicCategoryCodePropertyType2:
    class Meta:
        name = "MD_TopicCategoryCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_topic_category_code: Optional[MdTopicCategoryCode2] = field(
        default=None,
        metadata={
            "name": "MD_TopicCategoryCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeParameterDirectionPropertyType:
    class Meta:
        name = "LE_ParameterDirection_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_parameter_direction: Optional[LeParameterDirection] = field(
        default=None,
        metadata={
            "name": "LE_ParameterDirection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdReferenceSystemTypeCodePropertyType:
    class Meta:
        name = "MD_ReferenceSystemTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrs/1.0"

    md_reference_system_type_code: Optional[MdReferenceSystemTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_ReferenceSystemTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrs/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCellGeometryCodePropertyType2:
    class Meta:
        name = "MD_CellGeometryCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_cell_geometry_code: Optional[MdCellGeometryCode2] = field(
        default=None,
        metadata={
            "name": "MD_CellGeometryCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDimensionNameTypeCodePropertyType2:
    class Meta:
        name = "MD_DimensionNameTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_dimension_name_type_code: Optional[MdDimensionNameTypeCode2] = field(
        default=None,
        metadata={
            "name": "MD_DimensionNameTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeometricObjectTypeCodePropertyType2:
    class Meta:
        name = "MD_GeometricObjectTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_geometric_object_type_code: Optional[
        MdGeometricObjectTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjectTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdPixelOrientationCodePropertyType2:
    class Meta:
        name = "MD_PixelOrientationCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_pixel_orientation_code: Optional[MdPixelOrientationCode2] = field(
        default=None,
        metadata={
            "name": "MD_PixelOrientationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdTopologyLevelCodePropertyType2:
    class Meta:
        name = "MD_TopologyLevelCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_topology_level_code: Optional[MdTopologyLevelCode2] = field(
        default=None,
        metadata={
            "name": "MD_TopologyLevelCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DcplistPropertyType:
    class Meta:
        name = "DCPList_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    dcplist: Optional[Dcplist] = field(
        default=None,
        metadata={
            "name": "DCPList",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvCouplingTypePropertyType:
    class Meta:
        name = "SV_CouplingType_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_coupling_type: Optional[SvCouplingType] = field(
        default=None,
        metadata={
            "name": "SV_CouplingType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvParameterDirectionPropertyType:
    class Meta:
        name = "SV_ParameterDirection_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_parameter_direction: Optional[SvParameterDirection] = field(
        default=None,
        metadata={
            "name": "SV_ParameterDirection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDataQuality(AbstractDataQualityType):
    class Meta:
        name = "Abstract_DataQuality"
        namespace = "http://standards.iso.org/iso/19157/-2/dqc/1.0"


@dataclass
class AbstractQualityElementType(AbstractObjectType1):
    class Meta:
        name = "Abstract_QualityElement_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/dqc/1.0"

    date_time: List[DateTimePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/dqc/1.0",
        },
    )


@dataclass
class DqEvaluationMethodTypeCodePropertyType2:
    class Meta:
        name = "DQ_EvaluationMethodTypeCode_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_evaluation_method_type_code: Optional[
        DqEvaluationMethodTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_EvaluationMethodTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Angle2(AngleType):
    class Meta:
        name = "Angle"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class BinaryPropertyType2:
    class Meta:
        name = "Binary_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    binary: Optional[Binary2] = field(
        default=None,
        metadata={
            "name": "Binary",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CharacterStringPropertyType2:
    class Meta:
        name = "CharacterString_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    country: Optional[Country] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language_code: Optional[LanguageCode2] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    localised_character_string: Optional[LocalisedCharacterString2] = field(
        default=None,
        metadata={
            "name": "LocalisedCharacterString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_evaluation_method_type_code: Optional[
        DqEvaluationMethodTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_EvaluationMethodTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_initiative_type_code: Optional[DsInitiativeTypeCode1] = field(
        default=None,
        metadata={
            "name": "DS_InitiativeTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_association_type_code: Optional[DsAssociationTypeCode1] = field(
        default=None,
        metadata={
            "name": "DS_AssociationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_keyword_type_code: Optional[MdKeywordTypeCode1] = field(
        default=None,
        metadata={
            "name": "MD_KeywordTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_progress_code: Optional[MdProgressCode2] = field(
        default=None,
        metadata={
            "name": "MD_ProgressCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_spatial_representation_type_code: Optional[
        MdSpatialRepresentationTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_SpatialRepresentationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_character_set_code: Optional[MdCharacterSetCode2] = field(
        default=None,
        metadata={
            "name": "MD_CharacterSetCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_topic_category_code: Optional[MdTopicCategoryCode1] = field(
        default=None,
        metadata={
            "name": "MD_TopicCategoryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_scope_code: Optional[MdScopeCode2] = field(
        default=None,
        metadata={
            "name": "MD_ScopeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_maintenance_frequency_code: Optional[
        MdMaintenanceFrequencyCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceFrequencyCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_medium_name_code: Optional[MdMediumNameCode] = field(
        default=None,
        metadata={
            "name": "MD_MediumNameCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_medium_format_code: Optional[MdMediumFormatCode1] = field(
        default=None,
        metadata={
            "name": "MD_MediumFormatCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_distribution_units: Optional[MdDistributionUnits] = field(
        default=None,
        metadata={
            "name": "MD_DistributionUnits",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_restriction_code: Optional[MdRestrictionCode1] = field(
        default=None,
        metadata={
            "name": "MD_RestrictionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_classification_code: Optional[MdClassificationCode1] = field(
        default=None,
        metadata={
            "name": "MD_ClassificationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_imaging_condition_code: Optional[MdImagingConditionCode1] = field(
        default=None,
        metadata={
            "name": "MD_ImagingConditionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_coverage_content_type_code: Optional[
        MdCoverageContentTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_CoverageContentTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_datatype_code: Optional[MdDatatypeCode1] = field(
        default=None,
        metadata={
            "name": "MD_DatatypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_obligation_code: Optional[MdObligationCode1] = field(
        default=None,
        metadata={
            "name": "MD_ObligationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_dimension_name_type_code: Optional[MdDimensionNameTypeCode1] = field(
        default=None,
        metadata={
            "name": "MD_DimensionNameTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_cell_geometry_code: Optional[MdCellGeometryCode1] = field(
        default=None,
        metadata={
            "name": "MD_CellGeometryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_geometric_object_type_code: Optional[
        MdGeometricObjectTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjectTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_topology_level_code: Optional[MdTopologyLevelCode1] = field(
        default=None,
        metadata={
            "name": "MD_TopologyLevelCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_pixel_orientation_code: Optional[MdPixelOrientationCode1] = field(
        default=None,
        metadata={
            "name": "MD_PixelOrientationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_date_type_code: Optional[CiDateTypeCode3] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_on_line_function_code: Optional[CiOnLineFunctionCode3] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_presentation_form_code: Optional[CiPresentationFormCode3] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_role_code: Optional[CiRoleCode3] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    character_string: Optional[CharacterString2] = field(
        default=None,
        metadata={
            "name": "CharacterString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Distance2(LengthType):
    class Meta:
        name = "Distance"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class GenericNamePropertyType2:
    class Meta:
        name = "GenericName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scoped_name: Optional[ScopedName2] = field(
        default=None,
        metadata={
            "name": "ScopedName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    local_name: Optional[LocalName] = field(
        default=None,
        metadata={
            "name": "LocalName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Length2(LengthType):
    class Meta:
        name = "Length"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class LocalNamePropertyType:
    class Meta:
        name = "LocalName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    local_name: Optional[LocalName] = field(
        default=None,
        metadata={
            "name": "LocalName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RecordType2(RecordTypeType2):
    class Meta:
        name = "RecordType"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Scale(ScaleType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class ScopedNamePropertyType2:
    class Meta:
        name = "ScopedName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scoped_name: Optional[ScopedName2] = field(
        default=None,
        metadata={
            "name": "ScopedName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UnlimitedIntegerPropertyType2:
    class Meta:
        name = "UnlimitedInteger_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    unlimited_integer: Optional[UnlimitedInteger2] = field(
        default=None,
        metadata={
            "name": "UnlimitedInteger",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqResult1(AbstractDqResultType1):
    class Meta:
        name = "AbstractDQ_Result"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractExGeographicExtentType1(AbstractObjectType2):
    """
    Geographic area of the dataset.
    """

    class Meta:
        name = "AbstractEX_GeographicExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    extent_type_code: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "extentTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractMdContentInformation1(AbstractMdContentInformationType1):
    class Meta:
        name = "AbstractMD_ContentInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdSpatialRepresentation1(AbstractMdSpatialRepresentationType1):
    class Meta:
        name = "AbstractMD_SpatialRepresentation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiDateTypeCodePropertyType3:
    class Meta:
        name = "CI_DateTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_date_type_code: Optional[CiDateTypeCode3] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnLineFunctionCodePropertyType3:
    class Meta:
        name = "CI_OnLineFunctionCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_on_line_function_code: Optional[CiOnLineFunctionCode3] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiPresentationFormCodePropertyType3:
    class Meta:
        name = "CI_PresentationFormCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_presentation_form_code: Optional[CiPresentationFormCode3] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiRoleCodePropertyType3:
    class Meta:
        name = "CI_RoleCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_role_code: Optional[CiRoleCode3] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CountryPropertyType:
    class Meta:
        name = "Country_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    country: Optional[Country] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqEvaluationMethodTypeCodePropertyType1:
    class Meta:
        name = "DQ_EvaluationMethodTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_evaluation_method_type_code: Optional[
        DqEvaluationMethodTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_EvaluationMethodTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsAssociation(DsAssociationType):
    class Meta:
        name = "DS_Association"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsAssociationTypeCodePropertyType1:
    class Meta:
        name = "DS_AssociationTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_association_type_code: Optional[DsAssociationTypeCode1] = field(
        default=None,
        metadata={
            "name": "DS_AssociationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsDataSetType1(AbstractObjectType2):
    """
    Identifiable collection of data.
    """

    class Meta:
        name = "DS_DataSet_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    has: List[MdMetadataPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    part_of: List["DsAggregatePropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "partOf",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DsInitiativeTypeCodePropertyType1:
    class Meta:
        name = "DS_InitiativeTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_initiative_type_code: Optional[DsInitiativeTypeCode1] = field(
        default=None,
        metadata={
            "name": "DS_InitiativeTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExVerticalExtentType1(AbstractObjectType2):
    """
    Vertical domain of dataset.
    """

    class Meta:
        name = "EX_VerticalExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    minimum_value: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "minimumValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    maximum_value: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "maximumValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    vertical_crs: Optional[ScCrsPropertyType1] = field(
        default=None,
        metadata={
            "name": "verticalCRS",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class LanguageCodePropertyType2:
    class Meta:
        name = "LanguageCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    language_code: Optional[LanguageCode2] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LocalisedCharacterStringPropertyType2(ObjectReferencePropertyType2):
    class Meta:
        name = "LocalisedCharacterString_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    localised_character_string: Optional[LocalisedCharacterString2] = field(
        default=None,
        metadata={
            "name": "LocalisedCharacterString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdCellGeometryCodePropertyType1:
    class Meta:
        name = "MD_CellGeometryCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_cell_geometry_code: Optional[MdCellGeometryCode1] = field(
        default=None,
        metadata={
            "name": "MD_CellGeometryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCharacterSetCodePropertyType2:
    class Meta:
        name = "MD_CharacterSetCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_character_set_code: Optional[MdCharacterSetCode2] = field(
        default=None,
        metadata={
            "name": "MD_CharacterSetCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdClassificationCodePropertyType1:
    class Meta:
        name = "MD_ClassificationCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_classification_code: Optional[MdClassificationCode1] = field(
        default=None,
        metadata={
            "name": "MD_ClassificationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageContentTypeCodePropertyType1:
    class Meta:
        name = "MD_CoverageContentTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_coverage_content_type_code: Optional[
        MdCoverageContentTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_CoverageContentTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDatatypeCodePropertyType1:
    class Meta:
        name = "MD_DatatypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_datatype_code: Optional[MdDatatypeCode1] = field(
        default=None,
        metadata={
            "name": "MD_DatatypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDimensionNameTypeCodePropertyType1:
    class Meta:
        name = "MD_DimensionNameTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_dimension_name_type_code: Optional[MdDimensionNameTypeCode1] = field(
        default=None,
        metadata={
            "name": "MD_DimensionNameTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributionUnitsPropertyType:
    class Meta:
        name = "MD_DistributionUnits_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_distribution_units: Optional[MdDistributionUnits] = field(
        default=None,
        metadata={
            "name": "MD_DistributionUnits",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeometricObjectTypeCodePropertyType1:
    class Meta:
        name = "MD_GeometricObjectTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_geometric_object_type_code: Optional[
        MdGeometricObjectTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjectTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImagingConditionCodePropertyType1:
    class Meta:
        name = "MD_ImagingConditionCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_imaging_condition_code: Optional[MdImagingConditionCode1] = field(
        default=None,
        metadata={
            "name": "MD_ImagingConditionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdKeywordTypeCodePropertyType1:
    class Meta:
        name = "MD_KeywordTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_keyword_type_code: Optional[MdKeywordTypeCode1] = field(
        default=None,
        metadata={
            "name": "MD_KeywordTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceFrequencyCodePropertyType1:
    class Meta:
        name = "MD_MaintenanceFrequencyCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_maintenance_frequency_code: Optional[
        MdMaintenanceFrequencyCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceFrequencyCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMediumFormatCodePropertyType1:
    class Meta:
        name = "MD_MediumFormatCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_medium_format_code: Optional[MdMediumFormatCode1] = field(
        default=None,
        metadata={
            "name": "MD_MediumFormatCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMediumNameCodePropertyType:
    class Meta:
        name = "MD_MediumNameCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_medium_name_code: Optional[MdMediumNameCode] = field(
        default=None,
        metadata={
            "name": "MD_MediumNameCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdObligationCodePropertyType1:
    class Meta:
        name = "MD_ObligationCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_obligation_code: Optional[MdObligationCode1] = field(
        default=None,
        metadata={
            "name": "MD_ObligationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdPixelOrientationCodePropertyType1:
    class Meta:
        name = "MD_PixelOrientationCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_pixel_orientation_code: Optional[MdPixelOrientationCode1] = field(
        default=None,
        metadata={
            "name": "MD_PixelOrientationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdProgressCodePropertyType2:
    class Meta:
        name = "MD_ProgressCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_progress_code: Optional[MdProgressCode2] = field(
        default=None,
        metadata={
            "name": "MD_ProgressCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRepresentativeFractionType1(AbstractObjectType2):
    class Meta:
        name = "MD_RepresentativeFraction_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    denominator: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdRestrictionCodePropertyType1:
    class Meta:
        name = "MD_RestrictionCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_restriction_code: Optional[MdRestrictionCode1] = field(
        default=None,
        metadata={
            "name": "MD_RestrictionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeCodePropertyType2:
    class Meta:
        name = "MD_ScopeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_scope_code: Optional[MdScopeCode2] = field(
        default=None,
        metadata={
            "name": "MD_ScopeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSpatialRepresentationTypeCodePropertyType2:
    class Meta:
        name = "MD_SpatialRepresentationTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_spatial_representation_type_code: Optional[
        MdSpatialRepresentationTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_SpatialRepresentationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdTopicCategoryCodePropertyType1:
    class Meta:
        name = "MD_TopicCategoryCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_topic_category_code: Optional[MdTopicCategoryCode1] = field(
        default=None,
        metadata={
            "name": "MD_TopicCategoryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdTopologyLevelCodePropertyType1:
    class Meta:
        name = "MD_TopologyLevelCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_topology_level_code: Optional[MdTopologyLevelCode1] = field(
        default=None,
        metadata={
            "name": "MD_TopologyLevelCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractParametricCurveSurface(AbstractParametricCurveSurfaceType):
    """The element provides a substitution group head for the surface patches based
    on parametric curves.

    All properties are specified in the derived subtypes. All derived
    subtypes shall conform to the constraints specified in ISO
    19107:2003, 6.4.40. If provided, the aggregationType attribute shall
    have the value "set".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffinePlacementType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    location: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    ref_direction: List[VectorType] = field(
        default_factory=list,
        metadata={
            "name": "refDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    in_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "inDimension",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    out_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "outDimension",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class BooleanPropertyType1:
    class Meta:
        name = "BooleanPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    boolean: Optional[Boolean2] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CategoryExtentType(CodeOrNilReasonListType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CategoryList(CodeOrNilReasonListType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CategoryPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    category: Optional[Category] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CountPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    count: Optional[Count] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DirectionDescriptionType:
    """Direction descriptions are specified by a compass point code, a keyword, a
    textual description or a reference to a description.

    A gml:compassPoint is specified by a simple enumeration. In
    addition, thre elements to contain text-based descriptions of
    direction are provided. If the direction is specified using a term
    from a list, gml:keyword should be used, and the list indicated
    using the value of the codeSpace attribute. if the direction is
    decribed in prose, gml:direction or gml:reference should be used,
    allowing the value to be included inline or by reference.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    compass_point: Optional[CompassPointEnumeration] = field(
        default=None,
        metadata={
            "name": "compassPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    keyword: Optional[CodeType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    reference: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EnvelopeType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    lower_corner: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "lowerCorner",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    upper_corner: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "upperCorner",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "max_occurs": 2,
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class GenericMetaData(GenericMetaDataType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridFunctionType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    sequence_rule: Optional[SequenceRuleType] = field(
        default=None,
        metadata={
            "name": "sequenceRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    start_point: List[int] = field(
        default_factory=list,
        metadata={
            "name": "startPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "tokens": True,
        },
    )


@dataclass
class LocationString(StringOrRefType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MappingRule(StringOrRefType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MappingRuleType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rule_definition: Optional[str] = field(
        default=None,
        metadata={
            "name": "ruleDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rule_reference: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "name": "ruleReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OffsetCurveType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    offset_base: Optional["CurvePropertyType"] = field(
        default=None,
        metadata={
            "name": "offsetBase",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    distance: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    ref_direction: Optional[VectorType] = field(
        default=None,
        metadata={
            "name": "refDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class QuantityExtentType(MeasureOrNilReasonListType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityList(MeasureOrNilReasonListType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity: Optional[Quantity] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RelatedTimeType(TimePrimitivePropertyType):
    """Gml:RelatedTimeType provides a content model for indicating the relative
    position of an arbitrary member of the substitution group whose head is
    gml:AbstractTimePrimitive.

    It extends the generic gml:TimePrimitivePropertyType with an XML
    attribute relativePosition, whose value is selected from the set of
    13 temporal relationships identified by Allen (1983)
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    relative_position: Optional[RelatedTimeTypeRelativePosition] = field(
        default=None,
        metadata={
            "name": "relativePosition",
            "type": "Attribute",
        },
    )


@dataclass
class SecondDefiningParameter1:
    class Meta:
        name = "SecondDefiningParameter"
        namespace = "http://www.opengis.net/gml/3.2"

    inverse_flattening: Optional[MeasureType2] = field(
        default=None,
        metadata={
            "name": "inverseFlattening",
            "type": "Element",
        },
    )
    semi_minor_axis: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "semiMinorAxis",
            "type": "Element",
        },
    )
    is_sphere: bool = field(
        default=True,
        metadata={
            "name": "isSphere",
            "type": "Element",
        },
    )


@dataclass
class AbstractAssociationRole(AssociationRoleType):
    """Applying this pattern shall restrict the multiplicity of objects in a
    property element using this content model to exactly one. An instance of this
    type shall contain an element representing an object, or serve as a pointer to
    a remote object.

    Applying the pattern to define an application schema specific property type allows to restrict
    -       the inline object to specified object types,
    -       the encoding to "by-reference only" (see 7.2.3.7),
    -       the encoding to "inline only" (see 7.2.3.8).
    """

    class Meta:
        name = "abstractAssociationRole"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractReference(ReferenceType):
    """
    Gml:abstractReference may be used as the head of a subtitution group of more
    specific elements providing a value by-reference.
    """

    class Meta:
        name = "abstractReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractStrictAssociationRole(AssociationRoleType):
    """
    This element shows how an element declaration may include a Schematron
    constraint to limit the property to act in either inline or by-reference mode,
    but not both.
    """

    class Meta:
        name = "abstractStrictAssociationRole"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Angle3(AngleType):
    """
    The gml:angle property element is used to record the value of an angle quantity
    as a single number, with its units.
    """

    class Meta:
        name = "angle"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AxisDirection(CodeWithAuthorityType):
    """Gml:axisDirection is the direction of this coordinate system axis (or in the
    case of Cartesian projected coordinates, the direction of this coordinate
    system axis at the origin).

    Within any set of coordinate system axes, only one of each pair of
    terms may be used. For earth-fixed CRSs, this direction is often
    approximate and intended to provide a human interpretable meaning to
    the axis. When a geodetic datum is used, the precise directions of
    the axes may therefore vary slightly from this approximate
    direction. The codeSpace attribute shall reference a source of
    information specifying the values and meanings of all the allowed
    string values for this property.
    """

    class Meta:
        name = "axisDirection"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseCrs(SingleCrspropertyType):
    """
    Gml:baseCRS is an association role to the coordinate reference system used by
    this derived CRS.
    """

    class Meta:
        name = "baseCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseGeodeticCrs(GeodeticCrspropertyType):
    """
    Gml:baseGeodeticCRS is an association role to the geodetic coordinate reference
    system used by this projected CRS.
    """

    class Meta:
        name = "baseGeodeticCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseGeographicCrs(GeographicCrspropertyType):
    class Meta:
        name = "baseGeographicCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ComponentReferenceSystem(SingleCrspropertyType):
    """The gml:componentReferenceSystem elements are an ordered sequence of
    associations to all the component coordinate reference systems included in this
    compound coordinate reference system.

    The gml:AggregationAttributeGroup should be used to specify that the
    gml:componentReferenceSystem properties are ordered.
    """

    class Meta:
        name = "componentReferenceSystem"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConversionToPreferredUnit(ConversionToPreferredUnitType):
    """The elements gml:conversionToPreferredUnit and
    gml:roughConversionToPreferredUnit represent parameters used to convert
    conventional units to preferred units for this physical quantity type.

    A preferred unit is either a Base Unit or a Derived Unit that is
    selected for all values of one physical quantity type.
    """

    class Meta:
        name = "conversionToPreferredUnit"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CrsRef(CrspropertyType):
    class Meta:
        name = "crsRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DataSource(StringOrRefType):
    """Evidence is represented by a simple gml:dataSource or
    gml:dataSourceReference property that indicates the source of the temporal
    data.

    The remote link attributes of the gml:dataSource element have been
    deprecated along with its current type.
    """

    class Meta:
        name = "dataSource"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DataSourceReference(ReferenceType):
    """
    Evidence is represented by a simple gml:dataSource or gml:dataSourceReference
    property that indicates the source of the temporal data.
    """

    class Meta:
        name = "dataSourceReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionRef(ReferenceType):
    class Meta:
        name = "definitionRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Degrees(DegreesType):
    class Meta:
        name = "degrees"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivationUnitTerm(DerivationUnitTermType):
    """A set of gml:derivationUnitTerm elements describes a derived unit of
    measure.

    Each element carries an integer exponent.  The terms are combined by
    raising each referenced unit to the power of its exponent and
    forming the product. This unit term references another unit of
    measure (uom) and provides an integer exponent applied to that unit
    in defining the compound unit. The exponent may be positive or
    negative, but not zero.
    """

    class Meta:
        name = "derivationUnitTerm"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedCrstype(CodeWithAuthorityType):
    """The gml:derivedCRSType property describes the type of a derived coordinate
    reference system.

    The required codeSpace attribute shall reference a source of
    information specifying the values and meanings of all the allowed
    string values for this property.
    """

    class Meta:
        name = "derivedCRSType"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Description(StringOrRefType):
    """The value of this property is a text description of the object.

    gml:description uses gml:StringOrRefType as its content model, so it
    may contain a simple text string content, or carry a reference to an
    external description. The use of gml:description to reference an
    external description has been deprecated and replaced by the
    gml:descriptionReference property.
    """

    class Meta:
        name = "description"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DescriptionReference(ReferenceType):
    """The value of this property is a remote text description of the object.

    The xlink:href attribute of the gml:descriptionReference property
    references the external description.
    """

    class Meta:
        name = "descriptionReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedFace(DirectedFacePropertyType):
    """The gml:directedFace property element describes the boundary of topology
    solids, in the coBoundary of topology edges and is used in the support of
    surface features via the gml:TopoSurface expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included face is used i.e. inward or outward with
    respect to the surface normal in any geometric realisation.
    """

    class Meta:
        name = "directedFace"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedNode(DirectedNodePropertyType):
    """A gml:directedNode property element describes the boundary of topology edges
    and is used in the support of topological point features via the gml:TopoPoint
    expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included node is used: start ("-") or end ("+") node.
    """

    class Meta:
        name = "directedNode"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeographicCrsref(GeographicCrspropertyType):
    class Meta:
        name = "geographicCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GreenwichLongitude(AngleType):
    """Gml:greenwichLongitude is the longitude of the prime meridian measured from
    the Greenwich meridian, positive eastward.

    If the value of the prime meridian "name" is "Greenwich" then the
    value of greenwichLongitude shall be 0 degrees.
    """

    class Meta:
        name = "greenwichLongitude"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Identifier(CodeWithAuthorityType):
    """Often, a special identifier is assigned to an object by the maintaining
    authority with the intention that it is used in references to the object For
    such cases, the codeSpace shall be provided.

    That identifier is usually unique either globally or within an
    application domain. gml:identifier is a pre-defined property for
    such identifiers.
    """

    class Meta:
        name = "identifier"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IncludesSingleCrs(SingleCrspropertyType):
    class Meta:
        name = "includesSingleCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LocationReference(ReferenceType):
    """
    The gml:locationReference property element is a convenience property where the
    text value referenced by the xlink:href attribute describes the location of the
    feature.
    """

    class Meta:
        name = "locationReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MaximalComplex(TopoComplexPropertyType):
    """
    The property elements gml:subComplex, gml:superComplex and gml:maximalComplex
    provide an encoding for relationships between topology complexes as described
    for gml:TopoComplex above.
    """

    class Meta:
        name = "maximalComplex"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Member(AssociationRoleType):
    class Meta:
        name = "member"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PixelInCell(CodeWithAuthorityType):
    """Gml:pixelInCell is a specification of the way an image grid is associated
    with the image data attributes.

    The required codeSpace attribute shall reference a source of
    information specifying the values and meanings of all the allowed
    string values for this property.
    """

    class Meta:
        name = "pixelInCell"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityType(StringOrRefType):
    """The gml:quantityType property indicates the phenomenon to which the units
    apply.

    This element contains an informal description of the phenomenon or
    type of physical quantity that is measured or observed. When the
    physical quantity is the result of an observation or measurement,
    this term is known as observable type or measurand. The use of
    gml:quantityType for references to remote values is deprecated.
    """

    class Meta:
        name = "quantityType"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityTypeReference(ReferenceType):
    """The gml:quantityTypeReference property indicates the phenomenon to which the
    units apply.

    The content is a reference to a remote value.
    """

    class Meta:
        name = "quantityTypeReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeMeaning(CodeWithAuthorityType):
    """Gml:rangeMeaning describes the meaning of axis value range specified by
    gml:minimumValue and gml:maximumValue.

    This element shall be omitted when both gml:minimumValue and
    gml:maximumValue are omitted. This element should be included when
    gml:minimumValue and/or gml:maximumValue are included. If this
    element is omitted when the gml:minimumValue and/or gml:maximumValue
    are included, the meaning is unspecified. The codeSpace attribute
    shall reference a source of information specifying the values and
    meanings of all the allowed string values for this property.
    """

    class Meta:
        name = "rangeMeaning"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeParameters(AssociationRoleType):
    class Meta:
        name = "rangeParameters"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ReferenceSystemRef(CrspropertyType):
    class Meta:
        name = "referenceSystemRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ResultOf(ResultType):
    class Meta:
        name = "resultOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RoughConversionToPreferredUnit(ConversionToPreferredUnitType):
    """The elements gml:conversionToPreferredUnit and
    gml:roughConversionToPreferredUnit represent parameters used to convert
    conventional units to preferred units for this physical quantity type.

    A preferred unit is either a Base Unit or a Derived Unit that is
    selected for all values of one physical quantity type.
    """

    class Meta:
        name = "roughConversionToPreferredUnit"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SingleCrsref(SingleCrspropertyType):
    class Meta:
        name = "singleCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SourceCrs(CrspropertyType):
    """
    Gml:sourceCRS is an association role to the source CRS (coordinate reference
    system) of this coordinate operation.
    """

    class Meta:
        name = "sourceCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Status(StringOrRefType):
    class Meta:
        name = "status"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class StatusReference(ReferenceType):
    class Meta:
        name = "statusReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SubComplex(TopoComplexPropertyType):
    """
    The property elements gml:subComplex, gml:superComplex and gml:maximalComplex
    provide an encoding for relationships between topology complexes as described
    for gml:TopoComplex above.
    """

    class Meta:
        name = "subComplex"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SuperComplex(TopoComplexPropertyType):
    """
    The property elements gml:subComplex, gml:superComplex and gml:maximalComplex
    provide an encoding for relationships between topology complexes as described
    for gml:TopoComplex above.
    """

    class Meta:
        name = "superComplex"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TargetCrs(CrspropertyType):
    """
    Gml:targetCRS is an association role to the target CRS (coordinate reference
    system) of this coordinate operation.
    """

    class Meta:
        name = "targetCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeInterval(TimeIntervalLengthType):
    """Gml:timeInterval conforms to ISO 11404 which is based on floating point
    values for temporal length.

    ISO 11404 syntax specifies the use of a positiveInteger together
    with appropriate values for radix and factor. The resolution of the
    time interval is to one radix ^(-factor) of the specified time unit.
    The value of the unit is either selected from the units for time
    intervals from ISO 31-1:1992, or is another suitable unit.  The
    encoding is defined for GML in gml:TimeUnitType. The second
    component of this union type provides a method for indicating time
    units other than the six standard units given in the enumeration.
    """

    class Meta:
        name = "timeInterval"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimePosition(TimePositionType):
    """
    This element is used directly as a property of gml:TimeInstant (see 15.2.2.3),
    and may also be used in application schemas.
    """

    class Meta:
        name = "timePosition"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoComplexProperty(TopoComplexPropertyType):
    class Meta:
        name = "topoComplexProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValidTime(TimePrimitivePropertyType):
    """
    Gml:validTime is a convenience property element.
    """

    class Meta:
        name = "validTime"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Vector(VectorType):
    class Meta:
        name = "vector"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Arc2(ArcType2):
    class Meta:
        name = "arc"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class Locator(LocatorType):
    class Meta:
        name = "locator"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class Resource(ResourceType):
    class Meta:
        name = "resource"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class Title(TitleEltType):
    class Meta:
        name = "title"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class AbstractFeatureType(AbstractFeatureTypeType):
    class Meta:
        name = "Abstract_FeatureType"
        namespace = "https://schemas.isotc211.org/19110/-/fcc/2.1"


@dataclass
class FcRoleTypePropertyType:
    class Meta:
        name = "FC_RoleType_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_role_type: Optional[FcRoleType] = field(
        default=None,
        metadata={
            "name": "FC_RoleType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtOperationPropertyType:
    class Meta:
        name = "CT_Operation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_operation: Optional[CtOperation] = field(
        default=None,
        metadata={
            "name": "CT_Operation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiDateType2(AbstractTypedDateType):
    """
    :ivar date: reference date for the cited resource
    :ivar date_type: event used for reference date
    """

    class Meta:
        name = "CI_Date_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    date: Optional[DatePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "required": True,
        },
    )
    date_type: Optional[CiDateTypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "dateType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "required": True,
        },
    )


@dataclass
class CiDateType1(AbstractTypedDateType):
    """
    :ivar date: reference date for the cited resource
    :ivar date_type: event used for reference date
    """

    class Meta:
        name = "CI_Date_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    date: Optional[DatePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "required": True,
        },
    )
    date_type: Optional[CiDateTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "dateType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "required": True,
        },
    )


@dataclass
class CharacterStringPropertyType1:
    class Meta:
        name = "CharacterString_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    mi_trigger_code: Optional[MiTriggerCode] = field(
        default=None,
        metadata={
            "name": "MI_TriggerCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_sequence_code: Optional[MiSequenceCode] = field(
        default=None,
        metadata={
            "name": "MI_SequenceCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_sensor_type_code: Optional[MiSensorTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_SensorTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_priority_code: Optional[MiPriorityCode] = field(
        default=None,
        metadata={
            "name": "MI_PriorityCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_operation_type_code: Optional[MiOperationTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_OperationTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_objective_type_code: Optional[MiObjectiveTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_ObjectiveTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_geometry_type_code: Optional[MiGeometryTypeCode] = field(
        default=None,
        metadata={
            "name": "MI_GeometryTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_context_code: Optional[MiContextCode] = field(
        default=None,
        metadata={
            "name": "MI_ContextCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_instrumentation_event_type_code: Optional[
        MiInstrumentationEventTypeCode
    ] = field(
        default=None,
        metadata={
            "name": "MI_InstrumentationEventTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    md_obligation_code: Optional[MdObligationCode2] = field(
        default=None,
        metadata={
            "name": "MD_ObligationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    md_datatype_code: Optional[MdDatatypeCode2] = field(
        default=None,
        metadata={
            "name": "MD_DatatypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    md_topology_level_code: Optional[MdTopologyLevelCode2] = field(
        default=None,
        metadata={
            "name": "MD_TopologyLevelCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_pixel_orientation_code: Optional[MdPixelOrientationCode2] = field(
        default=None,
        metadata={
            "name": "MD_PixelOrientationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_geometric_object_type_code: Optional[
        MdGeometricObjectTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjectTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_dimension_name_type_code: Optional[MdDimensionNameTypeCode2] = field(
        default=None,
        metadata={
            "name": "MD_DimensionNameTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_cell_geometry_code: Optional[MdCellGeometryCode2] = field(
        default=None,
        metadata={
            "name": "MD_CellGeometryCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_reference_system_type_code: Optional[MdReferenceSystemTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_ReferenceSystemTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrs/1.0",
        },
    )
    le_parameter_direction: Optional[LeParameterDirection] = field(
        default=None,
        metadata={
            "name": "LE_ParameterDirection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    sv_parameter_direction: Optional[SvParameterDirection] = field(
        default=None,
        metadata={
            "name": "SV_ParameterDirection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    sv_coupling_type: Optional[SvCouplingType] = field(
        default=None,
        metadata={
            "name": "SV_CouplingType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    dcplist: Optional[Dcplist] = field(
        default=None,
        metadata={
            "name": "DCPList",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    md_imaging_condition_code: Optional[MdImagingConditionCode2] = field(
        default=None,
        metadata={
            "name": "MD_ImagingConditionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_coverage_content_type_code: Optional[
        MdCoverageContentTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_CoverageContentTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mi_transfer_function_type_code: Optional[
        MiTransferFunctionTypeCode
    ] = field(
        default=None,
        metadata={
            "name": "MI_TransferFunctionTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mi_polarisation_orientation_code: Optional[
        MiPolarisationOrientationCode
    ] = field(
        default=None,
        metadata={
            "name": "MI_PolarisationOrientationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mi_band_definition: Optional[MiBandDefinition] = field(
        default=None,
        metadata={
            "name": "MI_BandDefinition",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_maintenance_frequency_code: Optional[
        MdMaintenanceFrequencyCode2
    ] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceFrequencyCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    md_medium_format_code: Optional[MdMediumFormatCode2] = field(
        default=None,
        metadata={
            "name": "MD_MediumFormatCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    dq_evaluation_method_type_code: Optional[
        DqEvaluationMethodTypeCode2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_EvaluationMethodTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    md_restriction_code: Optional[MdRestrictionCode2] = field(
        default=None,
        metadata={
            "name": "MD_RestrictionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    md_classification_code: Optional[MdClassificationCode2] = field(
        default=None,
        metadata={
            "name": "MD_ClassificationCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    anchor: Optional[Anchor] = field(
        default=None,
        metadata={
            "name": "Anchor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gcx/1.0",
        },
    )
    mime_file_type: Optional[MimeFileType] = field(
        default=None,
        metadata={
            "name": "MimeFileType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gcx/1.0",
        },
    )
    file_name: Optional[FileName] = field(
        default=None,
        metadata={
            "name": "FileName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gcx/1.0",
        },
    )
    md_topic_category_code: Optional[MdTopicCategoryCode2] = field(
        default=None,
        metadata={
            "name": "MD_TopicCategoryCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    md_keyword_type_code: Optional[MdKeywordTypeCode2] = field(
        default=None,
        metadata={
            "name": "MD_KeywordTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    ds_initiative_type_code: Optional[DsInitiativeTypeCode2] = field(
        default=None,
        metadata={
            "name": "DS_InitiativeTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    ds_association_type_code: Optional[DsAssociationTypeCode2] = field(
        default=None,
        metadata={
            "name": "DS_AssociationTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    fc_role_type: Optional[FcRoleType] = field(
        default=None,
        metadata={
            "name": "FC_RoleType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    md_character_set_code: Optional[MdCharacterSetCode1] = field(
        default=None,
        metadata={
            "name": "MD_CharacterSetCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    localised_character_string: Optional[LocalisedCharacterString1] = field(
        default=None,
        metadata={
            "name": "LocalisedCharacterString",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    language_code: Optional[LanguageCode1] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    country_code: Optional[CountryCode] = field(
        default=None,
        metadata={
            "name": "CountryCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    ci_telephone_type_code: Optional[CiTelephoneTypeCode2] = field(
        default=None,
        metadata={
            "name": "CI_TelephoneTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    ci_role_code: Optional[CiRoleCode2] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    ci_presentation_form_code: Optional[CiPresentationFormCode2] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    ci_on_line_function_code: Optional[CiOnLineFunctionCode2] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    ci_date_type_code: Optional[CiDateTypeCode2] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_telephone_type_code: Optional[
        CiTelephoneTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "CI_TelephoneTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_role_code: Optional[
        CiRoleCode1
    ] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_presentation_form_code: Optional[
        CiPresentationFormCode1
    ] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_on_line_function_code: Optional[
        CiOnLineFunctionCode1
    ] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_date_type_code: Optional[
        CiDateTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    md_spatial_representation_type_code: Optional[
        MdSpatialRepresentationTypeCode1
    ] = field(
        default=None,
        metadata={
            "name": "MD_SpatialRepresentationTypeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    md_scope_code: Optional[MdScopeCode1] = field(
        default=None,
        metadata={
            "name": "MD_ScopeCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    md_progress_code: Optional[MdProgressCode1] = field(
        default=None,
        metadata={
            "name": "MD_ProgressCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    character_string: Optional[CharacterString1] = field(
        default=None,
        metadata={
            "name": "CharacterString",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityRangeType1(AbstractObjectType1):
    """
    A component of a multiplicity, consisting of an non-negative lower bound, and a
    potentially infinite upper bound.
    """

    class Meta:
        name = "MultiplicityRange_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    lower: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "required": True,
        },
    )
    upper: Optional[UnlimitedIntegerPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "required": True,
        },
    )


@dataclass
class RecordTypePropertyType1:
    class Meta:
        name = "RecordType_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    record_type: Optional[RecordType1] = field(
        default=None,
        metadata={
            "name": "RecordType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AnchorPropertyType:
    class Meta:
        name = "Anchor_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gcx/1.0"

    anchor: Optional[Anchor] = field(
        default=None,
        metadata={
            "name": "Anchor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gcx/1.0",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractExGeographicExtent2(AbstractExGeographicExtentType2):
    """
    Spatial area of the resource.
    """

    class Meta:
        name = "AbstractEX_GeographicExtent"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class ExGeographicBoundingBoxType2(AbstractExGeographicExtentType2):
    """
    :ivar west_bound_longitude: western-most coordinate of the limit of
        the resource extent, expressed in longitude in decimal degrees
        (positive east)
    :ivar east_bound_longitude: eastern-most coordinate of the limit of
        the resource extent, expressed in longitude in decimal degrees
        (positive east)
    :ivar south_bound_latitude: southern-most coordinate of the limit of
        the resource extent, expressed in latitude in decimal degrees
        (positive north)
    :ivar north_bound_latitude: northern-most, coordinate of the limit
        of the resource extent expressed in latitude in decimal degrees
        (positive north)
    """

    class Meta:
        name = "EX_GeographicBoundingBox_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    west_bound_longitude: Optional[DecimalPropertyType1] = field(
        default=None,
        metadata={
            "name": "westBoundLongitude",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )
    east_bound_longitude: Optional[DecimalPropertyType1] = field(
        default=None,
        metadata={
            "name": "eastBoundLongitude",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )
    south_bound_latitude: Optional[DecimalPropertyType1] = field(
        default=None,
        metadata={
            "name": "southBoundLatitude",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )
    north_bound_latitude: Optional[DecimalPropertyType1] = field(
        default=None,
        metadata={
            "name": "northBoundLatitude",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )


@dataclass
class PtFreeTextType1(AbstractObjectType1):
    class Meta:
        name = "PT_FreeText_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    text_group: List[LocalisedCharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "textGroup",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class PtLocaleType1(AbstractObjectType1):
    class Meta:
        name = "PT_Locale_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    language: Optional[LanguageCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "required": True,
        },
    )
    country: Optional[CountryCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    character_encoding: Optional[MdCharacterSetCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "characterEncoding",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "required": True,
        },
    )


@dataclass
class MiRequestedDate(MiRequestedDateType):
    """Description: range of date validity shortName: ReqstDate"""

    class Meta:
        name = "MI_RequestedDate"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class UriPropertyType:
    class Meta:
        name = "URI_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    uri: Optional[Uri] = field(
        default=None,
        metadata={
            "name": "URI",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDsAggregateType2(AbstractDsResourceType):
    class Meta:
        name = "AbstractDS_Aggregate_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    composed_of: List["AbstractDsResourcePropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "composedOf",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractDsResource(AbstractDsResourceType):
    """
    An identifiable asset or means that fulfils a requirement.
    """

    class Meta:
        name = "AbstractDS_Resource"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsDataSetType2(AbstractDsResourceType):
    class Meta:
        name = "DS_DataSet_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class SvServiceType(AbstractDsResourceType):
    class Meta:
        name = "SV_Service_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class MdFeatureTypeInfoType(AbstractObjectType1):
    class Meta:
        name = "MD_FeatureTypeInfo_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    feature_type_name: Optional[GenericNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "featureTypeName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "required": True,
        },
    )
    feature_instance_count: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "featureInstanceCount",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdRepresentativeFraction2(MdRepresentativeFractionType2):
    """
    Derived from ISO 19103 Scale where MD_RepresentativeFraction.denominator = 1 /
    Scale.measure And Scale.targetUnits = Scale.sourceUnits.
    """

    class Meta:
        name = "MD_RepresentativeFraction"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class LeNominalResolutionType(AbstractObjectType1):
    """
    :ivar scanning_resolution: Description: Distance between adjacent
        pixels in the scan plane shortName: scanRes
    :ivar ground_resolution: Description: Distance between adjacent
        pixels in the object space shortName: groundRes
    """

    class Meta:
        name = "LE_NominalResolution_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    scanning_resolution: Optional[DistancePropertyType1] = field(
        default=None,
        metadata={
            "name": "scanningResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    ground_resolution: Optional[DistancePropertyType1] = field(
        default=None,
        metadata={
            "name": "groundResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class MdGeometricObjectsType2(AbstractObjectType1):
    """
    :ivar geometric_object_type: name of point or vector objects used to
        locate zero-, one-, two-, or three-dimensional spatial locations
        in the dataset
    :ivar geometric_object_count: total number of the point or vector
        object type occurring in the dataset
    """

    class Meta:
        name = "MD_GeometricObjects_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    geometric_object_type: Optional[
        MdGeometricObjectTypeCodePropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "geometricObjectType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    geometric_object_count: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "geometricObjectCount",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class AbstractQualityElement(AbstractQualityElementType):
    class Meta:
        name = "Abstract_QualityElement"
        namespace = "http://standards.iso.org/iso/19157/-2/dqc/1.0"


@dataclass
class AnglePropertyType2:
    class Meta:
        name = "Angle_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    angle: Optional[Angle2] = field(
        default=None,
        metadata={
            "name": "Angle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DistancePropertyType2:
    class Meta:
        name = "Distance_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    distance: Optional[Distance2] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LengthPropertyType2:
    class Meta:
        name = "Length_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    distance: Optional[Distance2] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    length: Optional[Length2] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MeasurePropertyType2:
    class Meta:
        name = "Measure_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scale: Optional[Scale] = field(
        default=None,
        metadata={
            "name": "Scale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    angle: Optional[Angle2] = field(
        default=None,
        metadata={
            "name": "Angle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    distance: Optional[Distance2] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    length: Optional[Length2] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    measure: Optional[Measure2] = field(
        default=None,
        metadata={
            "name": "Measure",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityRangeType2(AbstractObjectType2):
    """
    A component of a multiplicity, consisting of an non-negative lower bound, and a
    potentially infinite upper bound.
    """

    class Meta:
        name = "MultiplicityRange_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    lower: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )
    upper: Optional[UnlimitedIntegerPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )


@dataclass
class RecordTypePropertyType2:
    class Meta:
        name = "RecordType_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    record_type: Optional[RecordType2] = field(
        default=None,
        metadata={
            "name": "RecordType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScalePropertyType:
    class Meta:
        name = "Scale_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scale: Optional[Scale] = field(
        default=None,
        metadata={
            "name": "Scale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TypeNameType2(AbstractObjectType2):
    """A TypeName is a LocalName that references either a recordType or object type
    in some form of schema.

    The stored value "aName" is the returned value for the "aName()" operation. This is the types name.  - For parsing from types (or objects) the parsible name normally uses a "." navigation separator, so that it is of the form  [class].[member].[memberOfMember]. ...)
    """

    class Meta:
        name = "TypeName_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    a_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "aName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )


@dataclass
class AbstractExGeographicExtent1(AbstractExGeographicExtentType1):
    class Meta:
        name = "AbstractEX_GeographicExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiAddressType3(AbstractObjectType2):
    """
    Location of the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Address_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    delivery_point: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "deliveryPoint",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    city: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    administrative_area: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "administrativeArea",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    postal_code: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "postalCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    country: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    electronic_mail_address: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "electronicMailAddress",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiDateType3(AbstractObjectType2):
    class Meta:
        name = "CI_Date_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    date: Optional[DatePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    date_type: Optional[CiDateTypeCodePropertyType3] = field(
        default=None,
        metadata={
            "name": "dateType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class CiOnlineResourceType3(AbstractObjectType2):
    """
    Information about online sources from which the dataset, specification, or
    community profile name and extended metadata elements can be obtained.
    """

    class Meta:
        name = "CI_OnlineResource_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    linkage: Optional[UrlPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    protocol: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    application_profile: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "applicationProfile",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    function: Optional[CiOnLineFunctionCodePropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiSeriesType3(AbstractObjectType2):
    class Meta:
        name = "CI_Series_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    issue_identification: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "issueIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    page: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiTelephoneType3(AbstractObjectType2):
    """
    Telephone numbers for contacting the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Telephone_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    voice: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    facsimile: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DsAssociationPropertyType:
    class Meta:
        name = "DS_Association_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_association: Optional[DsAssociation] = field(
        default=None,
        metadata={
            "name": "DS_Association",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsDataSet1(DsDataSetType1):
    class Meta:
        name = "DS_DataSet"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExGeographicBoundingBoxType1(AbstractExGeographicExtentType1):
    """
    Geographic area of the entire dataset referenced to WGS 84.
    """

    class Meta:
        name = "EX_GeographicBoundingBox_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    west_bound_longitude: Optional[DecimalPropertyType2] = field(
        default=None,
        metadata={
            "name": "westBoundLongitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    east_bound_longitude: Optional[DecimalPropertyType2] = field(
        default=None,
        metadata={
            "name": "eastBoundLongitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    south_bound_latitude: Optional[DecimalPropertyType2] = field(
        default=None,
        metadata={
            "name": "southBoundLatitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    north_bound_latitude: Optional[DecimalPropertyType2] = field(
        default=None,
        metadata={
            "name": "northBoundLatitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class ExVerticalExtent1(ExVerticalExtentType1):
    class Meta:
        name = "EX_VerticalExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdBrowseGraphicType2(AbstractObjectType2):
    """
    Graphic that provides an illustration of the dataset (should include a legend
    for the graphic)
    """

    class Meta:
        name = "MD_BrowseGraphic_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    file_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "fileName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    file_description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "fileDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    file_type: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdConstraintsType1(AbstractObjectType2):
    """
    Restrictions on the access and use of a dataset or metadata.
    """

    class Meta:
        name = "MD_Constraints_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    use_limitation: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "useLimitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdFormatType1(AbstractObjectType2):
    """
    Description of the form of the data to be distributed.
    """

    class Meta:
        name = "MD_Format_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    version: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    amendment_number: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "amendmentNumber",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    specification: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    file_decompression_technique: Optional[
        CharacterStringPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "fileDecompressionTechnique",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    format_distributor: List[MdDistributorPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "formatDistributor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdGeometricObjectsType1(AbstractObjectType2):
    class Meta:
        name = "MD_GeometricObjects_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    geometric_object_type: Optional[
        MdGeometricObjectTypeCodePropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "geometricObjectType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    geometric_object_count: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "geometricObjectCount",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdMediumType1(AbstractObjectType2):
    """
    Information about the media on which the data can be distributed.
    """

    class Meta:
        name = "MD_Medium_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[MdMediumNameCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    density: List[RealPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    density_units: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "densityUnits",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    volumes: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    medium_format: List[MdMediumFormatCodePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "mediumFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    medium_note: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "mediumNote",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdRepresentativeFraction1(MdRepresentativeFractionType1):
    class Meta:
        name = "MD_RepresentativeFraction"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdScopeDescriptionType2:
    """
    Description of the class of information covered by the information.
    """

    class Meta:
        name = "MD_ScopeDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    attributes: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    features: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_instances: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "featureInstances",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    attribute_instances: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "attributeInstances",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dataset: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    other: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdStandardOrderProcessType1(AbstractObjectType2):
    """
    Common ways in which the dataset may be obtained or received, and related
    instructions and fee information.
    """

    class Meta:
        name = "MD_StandardOrderProcess_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    fees: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    planned_available_date_time: Optional[DateTimePropertyType2] = field(
        default=None,
        metadata={
            "name": "plannedAvailableDateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ordering_instructions: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "orderingInstructions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    turnaround: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class PtFreeTextType2(AbstractObjectType2):
    class Meta:
        name = "PT_FreeText_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    text_group: List[LocalisedCharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "textGroup",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class PtLocaleType2(AbstractObjectType2):
    class Meta:
        name = "PT_Locale_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    language_code: Optional[LanguageCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "languageCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    country: Optional[CountryPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    character_encoding: Optional[MdCharacterSetCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "characterEncoding",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class AffinePlacement(AffinePlacementType):
    """
    Location, refDirection, inDimension and outDimension have the same meaning as
    specified in ISO 19107:2003, 6.4.21.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CategoryExtent(CategoryExtentType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoverageMappingRule(MappingRuleType):
    """Gml:CoverageMappingRule provides a formal or informal description of the
    coverage function.

    The mapping rule may be defined as an in-line string
    (gml:ruleDefinition) or via a remote reference through xlink:href
    (gml:ruleReference). If no rule name is specified, the default is
    'Linear' with respect to members of the domain in document order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DmsangleType:
    class Meta:
        name = "DMSAngleType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    degrees: Optional[Degrees] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    decimal_minutes: Optional[DecimalMinutes] = field(
        default=None,
        metadata={
            "name": "decimalMinutes",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    minutes: Optional[Minutes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    seconds: Optional[Seconds] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DataBlockType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    range_parameters: Optional[RangeParameters] = field(
        default=None,
        metadata={
            "name": "rangeParameters",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    tuple_list: Optional[TupleList] = field(
        default=None,
        metadata={
            "name": "tupleList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    double_or_nil_reason_tuple_list: Optional[
        DoubleOrNilReasonTupleList
    ] = field(
        default=None,
        metadata={
            "name": "doubleOrNilReasonTupleList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DirectionVectorType:
    """
    Direction vectors are specified by providing components of a vector.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    horizontal_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "horizontalAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "verticalAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Envelope(EnvelopeType):
    """Envelope defines an extent using a pair of positions defining opposite
    corners in arbitrary dimensions.

    The first direct position is the "lower corner" (a coordinate
    position consisting of all the minimal ordinates for each dimension
    for all points within the envelope), the second one the "upper
    corner" (a coordinate position consisting of all the maximal
    ordinates for each dimension for all points within the envelope).
    The use of the properties "coordinates" and "pos" has been
    deprecated. The explicitly named properties "lowerCorner" and
    "upperCorner" shall be used instead.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EnvelopeWithTimePeriodType(EnvelopeType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    begin_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "beginPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    end_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "endPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    frame: str = field(
        default="#ISO-8601",
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FileType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    range_parameters: Optional[RangeParameters] = field(
        default=None,
        metadata={
            "name": "rangeParameters",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "fileName",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "fileReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file_structure: Optional[CodeType2] = field(
        default=None,
        metadata={
            "name": "fileStructure",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    mime_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compression: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridFunction(GridFunctionType):
    """Gml:GridFunction provides an explicit mapping rule for grid geometries, i.e.
    the domain shall be a geometry of type grid.

    It describes the mapping of grid posts (discrete point grid
    coverage) or grid cells (discrete surface coverage) to the values in
    the range set. The gml:startPoint is the index position of a point
    in the grid that is mapped to the first point in the range set (this
    is also the index position of the first grid post).  If the
    gml:startPoint property is omitted the gml:startPoint is assumed to
    be equal to the value of gml:low in the gml:Grid geometry.
    Subsequent points in the mapping are determined by the value of the
    gml:sequenceRule.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MetaDataPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    generic_meta_data: Optional[GenericMetaData] = field(
        default=None,
        metadata={
            "name": "GenericMetaData",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    about: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OffsetCurve(OffsetCurveType):
    """An offset curve is a curve at a constant distance from the basis curve.

    offsetBase is the base curve from which this curve is defined as an
    offset. distance and refDirection have the same meaning as specified
    in ISO 19107:2003, 6.4.23. The content model follows the general
    pattern for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityExtent(QuantityExtentType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SecondDefiningParameter2:
    """Gml:secondDefiningParameter is a property containing the definition of the
    second parameter that defines the shape of an ellipsoid.

    An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.
    The inverseFlattening element contains the inverse flattening value of the ellipsoid. This value is a scale factor (or ratio). It uses gml:LengthType with the restriction that the unit of measure referenced by the uom attribute must be suitable for a scale factor, such as percent, permil, or parts-per-million.
    The semiMinorAxis element contains the length of the semi-minor axis of the ellipsoid. When the isSphere element is included, the ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere.
    """

    class Meta:
        name = "secondDefiningParameter"
        namespace = "http://www.opengis.net/gml/3.2"

    second_defining_parameter: Optional[SecondDefiningParameter1] = field(
        default=None,
        metadata={
            "name": "SecondDefiningParameter",
            "type": "Element",
            "required": True,
        },
    )


@dataclass
class AbstractCtItemType(AbstractObjectType1):
    class Meta:
        name = "AbstractCT_Item_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    identifier: Optional[GenericNamePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )
    name: List[GenericNamePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )


@dataclass
class CtCrsType(AbstractObjectType1):
    class Meta:
        name = "CT_CRS_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtCoordinateSystemAxisType(AbstractObjectType1):
    class Meta:
        name = "CT_CoordinateSystemAxis_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtCoordinateSystemType(AbstractObjectType1):
    class Meta:
        name = "CT_CoordinateSystem_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtDatumType(AbstractObjectType1):
    class Meta:
        name = "CT_Datum_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtEllipsoidType(AbstractObjectType1):
    class Meta:
        name = "CT_Ellipsoid_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtOperationMethodType(AbstractObjectType1):
    class Meta:
        name = "CT_OperationMethod_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtOperationParametersType(AbstractObjectType1):
    class Meta:
        name = "CT_OperationParameters_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CtPrimeMeridianType(AbstractObjectType1):
    class Meta:
        name = "CT_PrimeMeridian_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )


@dataclass
class CiAddressType2(AbstractObjectType1):
    """
    :ivar delivery_point: address line for the location (as described in
        ISO 11180, Annex A)
    :ivar city: city of the location
    :ivar administrative_area: state, province of the location
    :ivar postal_code: ZIP or other postal code
    :ivar country: country of the physical address
    :ivar electronic_mail_address: address of the electronic mailbox of
        the responsible organisation or individual
    """

    class Meta:
        name = "CI_Address_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    delivery_point: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "deliveryPoint",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    city: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    administrative_area: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "administrativeArea",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    postal_code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "postalCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    country: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    electronic_mail_address: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "electronicMailAddress",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class CiDate2(CiDateType2):
    """
    Reference date and event used to describe it.
    """

    class Meta:
        name = "CI_Date"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiOnlineResourceType2(AbstractOnlineResourceType):
    """
    :ivar linkage: location (address) for on-line access using a Uniform
        Resource Locator/Uniform Resource Identifier address or similar
        addressing scheme such as http://www.statkart.no/isotc211
    :ivar protocol: connection protocol to be used e.g. http, ftp, file
    :ivar application_profile: name of an application profile that can
        be used with the online resource
    :ivar name: name of the online resource
    :ivar description: detailed text description of what the online
        resource is/does
    :ivar function: code for function performed by the online resource
    :ivar protocol_request: protocol used by the accessed resource
    """

    class Meta:
        name = "CI_OnlineResource_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    linkage: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "required": True,
        },
    )
    protocol: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    application_profile: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "applicationProfile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    function: Optional[CiOnLineFunctionCodePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    protocol_request: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "protocolRequest",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class CiSeriesType2(AbstractObjectType1):
    """
    :ivar name: name of the series, or aggregate resource, of which the
        resource is a part
    :ivar issue_identification: information identifying the issue of the
        series
    :ivar page: details on which pages of the publication the article
        was published
    """

    class Meta:
        name = "CI_Series_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    issue_identification: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "issueIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    page: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class CiTelephoneType2(AbstractObjectType1):
    """
    :ivar number: telephone number by which individuals can contact
        responsible organisation or individual
    :ivar number_type: type of telephone responsible organisation or
        individual
    """

    class Meta:
        name = "CI_Telephone_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    number: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "required": True,
        },
    )
    number_type: Optional[CiTelephoneTypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "numberType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class CiAddressType1(AbstractObjectType1):
    """
    :ivar delivery_point: address line for the location (as described in
        ISO 11180, Annex A)
    :ivar city: city of the location
    :ivar administrative_area: state, province of the location
    :ivar postal_code: ZIP or other postal code
    :ivar country: country of the physical address
    :ivar electronic_mail_address: address of the electronic mailbox of
        the responsible organisation or individual
    """

    class Meta:
        name = "CI_Address_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    delivery_point: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "deliveryPoint",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    city: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    administrative_area: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "administrativeArea",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    postal_code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "postalCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    country: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    electronic_mail_address: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "electronicMailAddress",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class CiDate1(CiDateType1):
    """
    Reference date and event used to describe it.
    """

    class Meta:
        name = "CI_Date"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiOnlineResourceType1(AbstractOnlineResourceType):
    """
    :ivar linkage: location (address) for on-line access using a Uniform
        Resource Locator/Uniform Resource Identifier address or similar
        addressing scheme such as http://www.statkart.no/isotc211
    :ivar protocol: connection protocol to be used e.g. http, ftp, file
    :ivar application_profile: name of an application profile that can
        be used with the online resource
    :ivar name: name of the online resource
    :ivar description: detailed text description of what the online
        resource is/does
    :ivar function: code for function performed by the online resource
    :ivar protocol_request: protocol used by the accessed resource
    """

    class Meta:
        name = "CI_OnlineResource_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    linkage: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "required": True,
        },
    )
    protocol: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    application_profile: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "applicationProfile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    function: Optional[CiOnLineFunctionCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    protocol_request: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "protocolRequest",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class CiSeriesType1(AbstractObjectType1):
    """
    :ivar name: name of the series, or aggregate resource, of which the
        resource is a part
    :ivar issue_identification: information identifying the issue of the
        series
    :ivar page: details on which pages of the publication the article
        was published
    """

    class Meta:
        name = "CI_Series_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    issue_identification: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "issueIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    page: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class CiTelephoneType1(AbstractObjectType1):
    """
    :ivar number: telephone number by which individuals can contact
        responsible organisation or individual
    :ivar number_type: type of telephone responsible organisation or
        individual
    """

    class Meta:
        name = "CI_Telephone_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    number: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "required": True,
        },
    )
    number_type: Optional[CiTelephoneTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "numberType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class MultiplicityRange1(MultiplicityRangeType1):
    class Meta:
        name = "MultiplicityRange"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class TypeNameType1(AbstractObjectType1):
    """A TypeName is a LocalName that references either a recordType or object type
    in some form of schema.

    The stored value "aName" is the returned value for the "aName()" operation. This is the types name.  - For parsing from types (or objects) the parsible name normally uses a "." navigation separator, so that it is of the form  [class].[member].[memberOfMember]. ...)
    """

    class Meta:
        name = "TypeName_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    a_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "aName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "required": True,
        },
    )


@dataclass
class ExGeographicBoundingBox2(ExGeographicBoundingBoxType2):
    """geographic position of the resource NOTE: This is only an approximate reference so specifying the coordinate reference system is unnecessary and need only be provided with a precision of up to two decimal places"""

    class Meta:
        name = "EX_GeographicBoundingBox"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class PtFreeText1(PtFreeTextType1):
    class Meta:
        name = "PT_FreeText"
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class PtLocale1(PtLocaleType1):
    class Meta:
        name = "PT_Locale"
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class MiEnvironmentalRecordType(AbstractObjectType1):
    class Meta:
        name = "MI_EnvironmentalRecord_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    average_air_temperature: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "averageAirTemperature",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    max_relative_humidity: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "maxRelativeHumidity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    max_altitude: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "maxAltitude",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    meterological_conditions: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "meterologicalConditions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    solar_azimuth: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "solarAzimuth",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    solar_elevation: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "solarElevation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MiRequestedDatePropertyType:
    class Meta:
        name = "MI_RequestedDate_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_requested_date: Optional[MiRequestedDate] = field(
        default=None,
        metadata={
            "name": "MI_RequestedDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeDescriptionType1(AbstractObjectType1):
    """
    :ivar attributes: instances of attribute types to which the
        information applies
    :ivar features: instances of feature types to which the information
        applies
    :ivar feature_instances: feature instances to which the information
        applies
    :ivar attribute_instances: attribute instances to which the
        information applies
    :ivar dataset: dataset to which the information applies
    :ivar other: class of information that does not fall into the other
        categories to which the information applies
    """

    class Meta:
        name = "MD_ScopeDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    attributes: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    features: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    feature_instances: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "featureInstances",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    attribute_instances: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "attributeInstances",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    dataset: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    other: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )


@dataclass
class AbstractDsAggregate2(AbstractDsAggregateType2):
    """
    Collection of resources.
    """

    class Meta:
        name = "AbstractDS_Aggregate"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsDataSet2(DsDataSetType2):
    """
    Identifiable collection of data.
    """

    class Meta:
        name = "DS_DataSet"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsInitiativeType2(AbstractDsAggregateType2):
    class Meta:
        name = "DS_Initiative_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsOtherAggregateType2(AbstractDsAggregateType2):
    class Meta:
        name = "DS_OtherAggregate_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsSeriesType2(AbstractDsAggregateType2):
    class Meta:
        name = "DS_Series_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class SvService(SvServiceType):
    """
    Resource is a service.
    """

    class Meta:
        name = "SV_Service"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class MdMetadataScopeType(AbstractObjectType1):
    class Meta:
        name = "MD_MetadataScope_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mdb/2.0"

    resource_scope: Optional[MdScopeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "resourceScope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
            "required": True,
        },
    )
    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )


@dataclass
class MdFeatureTypeInfo(MdFeatureTypeInfoType):
    class Meta:
        name = "MD_FeatureTypeInfo"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiRangeElementDescriptionType(AbstractObjectType1):
    """
    :ivar name: Description: designation associated with a set of range
        elements shortName: rgEltName
    :ivar definition: Description: description of a set of specific
        range elements shortName: rgEltDef
    :ivar range_element: Description: specific range elements, i.e.
        range elements associated with a name and definition defining
        their meaning shortName: rgElt
    """

    class Meta:
        name = "MI_RangeElementDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "required": True,
        },
    )
    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "required": True,
        },
    )
    range_element: List[RecordPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "rangeElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class MdStandardOrderProcessType2(AbstractStandardOrderProcessType):
    """
    :ivar fees: fees and terms for retrieving the resource. Include
        monetary units (as specified in ISO 4217)
    :ivar planned_available_date_time: date and time when the resource
        will be available
    :ivar ordering_instructions: general instructions, terms and
        services provided by the distributor
    :ivar turnaround: typical turnaround time for the filling of an
        order
    :ivar order_options_type: description of the order options record
    :ivar order_options: request/purchase choices
    """

    class Meta:
        name = "MD_StandardOrderProcess_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    fees: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    planned_available_date_time: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "plannedAvailableDateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    ordering_instructions: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "orderingInstructions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    turnaround: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    order_options_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "orderOptionsType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    order_options: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "orderOptions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )


@dataclass
class MdRepresentativeFractionPropertyType2:
    class Meta:
        name = "MD_RepresentativeFraction_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_representative_fraction: Optional[MdRepresentativeFraction2] = field(
        default=None,
        metadata={
            "name": "MD_RepresentativeFraction",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeNominalResolution(LeNominalResolutionType):
    """Description: Distance between adjacent pixels shortName: nomRes"""

    class Meta:
        name = "LE_NominalResolution"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class LeProcessStepReportType(AbstractObjectType1):
    """
    :ivar name: Description: Name of the processing report shortName:
        procRepName
    :ivar description: Description: Textual description of what occurred
        during the process step shortName: procRepDesc
    :ivar file_type: Description: Type of file that contains that
        processing report shortName: procRepFilTyp
    """

    class Meta:
        name = "LE_ProcessStepReport_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    file_type: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class MdDimensionType2(AbstractObjectType1):
    """
    :ivar dimension_name: name of the axis
    :ivar dimension_size: number of elements along the axis
    :ivar resolution: degree of detail in the grid dataset
    :ivar dimension_title: enhancement/modifier of the dimension name EX
        for other time dimension 'runtime' or dimensionName = 'column'
        dimensionTitle = 'Longitude'
    :ivar dimension_description: Description of the axis
    """

    class Meta:
        name = "MD_Dimension_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    dimension_name: Optional[MdDimensionNameTypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "dimensionName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    dimension_size: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "dimensionSize",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    resolution: Optional[MeasurePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    dimension_title: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "dimensionTitle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    dimension_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "dimensionDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class MdGeometricObjects2(MdGeometricObjectsType2):
    """
    Number of objects, listed by geometric object type, used in the dataset.
    """

    class Meta:
        name = "MD_GeometricObjects"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MultiplicityRange2(MultiplicityRangeType2):
    class Meta:
        name = "MultiplicityRange"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class TypeName2(TypeNameType2):
    class Meta:
        name = "TypeName"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class CiAddress3(CiAddressType3):
    class Meta:
        name = "CI_Address"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiDate3(CiDateType3):
    class Meta:
        name = "CI_Date"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiOnlineResource3(CiOnlineResourceType3):
    class Meta:
        name = "CI_OnlineResource"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiSeries3(CiSeriesType3):
    class Meta:
        name = "CI_Series"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiTelephone3(CiTelephoneType3):
    class Meta:
        name = "CI_Telephone"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsDataSetPropertyType1:
    class Meta:
        name = "DS_DataSet_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_data_set: Optional[DsDataSet1] = field(
        default=None,
        metadata={
            "name": "DS_DataSet",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicBoundingBox1(ExGeographicBoundingBoxType1):
    class Meta:
        name = "EX_GeographicBoundingBox"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExVerticalExtentPropertyType1:
    class Meta:
        name = "EX_VerticalExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_vertical_extent: Optional[ExVerticalExtent1] = field(
        default=None,
        metadata={
            "name": "EX_VerticalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBrowseGraphic2(MdBrowseGraphicType2):
    class Meta:
        name = "MD_BrowseGraphic"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdConstraints1(MdConstraintsType1):
    class Meta:
        name = "MD_Constraints"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDimensionType1(AbstractObjectType2):
    class Meta:
        name = "MD_Dimension_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dimension_name: Optional[MdDimensionNameTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "dimensionName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    dimension_size: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "dimensionSize",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    resolution: Optional[MeasurePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdFormat1(MdFormatType1):
    class Meta:
        name = "MD_Format"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeometricObjects1(MdGeometricObjectsType1):
    class Meta:
        name = "MD_GeometricObjects"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdLegalConstraintsType1(MdConstraintsType1):
    """
    Restrictions and legal prerequisites for accessing and using the dataset.
    """

    class Meta:
        name = "MD_LegalConstraints_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    access_constraints: List[MdRestrictionCodePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "accessConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    use_constraints: List[MdRestrictionCodePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "useConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    other_constraints: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "otherConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdMedium1(MdMediumType1):
    class Meta:
        name = "MD_Medium"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdRepresentativeFractionPropertyType1:
    class Meta:
        name = "MD_RepresentativeFraction_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_representative_fraction: Optional[MdRepresentativeFraction1] = field(
        default=None,
        metadata={
            "name": "MD_RepresentativeFraction",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeDescription2(MdScopeDescriptionType2):
    class Meta:
        name = "MD_ScopeDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdSecurityConstraintsType1(MdConstraintsType1):
    """
    Handling restrictions imposed on the dataset because of national security,
    privacy, or other concerns.
    """

    class Meta:
        name = "MD_SecurityConstraints_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    classification: Optional[MdClassificationCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    user_note: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "userNote",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    classification_system: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "classificationSystem",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    handling_description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "handlingDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdStandardOrderProcess1(MdStandardOrderProcessType1):
    class Meta:
        name = "MD_StandardOrderProcess"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class PtFreeText2(PtFreeTextType2):
    class Meta:
        name = "PT_FreeText"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class PtLocale2(PtLocaleType2):
    class Meta:
        name = "PT_Locale"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ClothoidType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ref_location: Optional["ClothoidType.RefLocation"] = field(
        default=None,
        metadata={
            "name": "refLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    scale_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "scaleFactor",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    start_parameter: Optional[float] = field(
        default=None,
        metadata={
            "name": "startParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    end_parameter: Optional[float] = field(
        default=None,
        metadata={
            "name": "endParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CLOTHOID,
        metadata={
            "type": "Attribute",
        },
    )

    @dataclass
    class RefLocation:
        affine_placement: Optional[AffinePlacement] = field(
            default=None,
            metadata={
                "name": "AffinePlacement",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
                "required": True,
            },
        )


@dataclass
class CoverageFunctionType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    mapping_rule: Optional[MappingRule] = field(
        default=None,
        metadata={
            "name": "MappingRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coverage_mapping_rule: Optional[CoverageMappingRule] = field(
        default=None,
        metadata={
            "name": "CoverageMappingRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_function: Optional[GridFunction] = field(
        default=None,
        metadata={
            "name": "GridFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DataBlock(DataBlockType):
    """Gml:DataBlock describes the Range as a block of text encoded values similar
    to a Common Separated Value (CSV) representation.

    The range set parameterization is described by the property
    gml:rangeParameters.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectionPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    direction_vector: Optional[DirectionVectorType] = field(
        default=None,
        metadata={
            "name": "DirectionVector",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    direction_description: Optional[DirectionDescriptionType] = field(
        default=None,
        metadata={
            "name": "DirectionDescription",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compass_point: Optional[CompassPointEnumeration] = field(
        default=None,
        metadata={
            "name": "CompassPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    direction_keyword: Optional[CodeType2] = field(
        default=None,
        metadata={
            "name": "DirectionKeyword",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    direction_string: Optional[StringOrRefType] = field(
        default=None,
        metadata={
            "name": "DirectionString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EnvelopeWithTimePeriod(EnvelopeWithTimePeriodType):
    """Gml:EnvelopeWithTimePeriod is provided for envelopes that include a temporal
    extent.

    It adds two time position properties, gml:beginPosition and
    gml:endPosition, which describe the extent of a time-envelope. Since
    gml:EnvelopeWithTimePeriod is assigned to the substitution group
    headed by gml:Envelope, it may be used whenever gml:Envelope is
    valid.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class File(FileType):
    """For efficiency reasons, GML also provides a means of encoding the range set
    in an arbitrary external encoding, such as a binary file.

    This encoding may be "well-known" but this is not required. This
    mode uses the gml:File element. The values of the coverage
    (attribute values in the range set) are transmitted in a external
    file that is referenced from the XML structure described by
    gml:FileType.  The external file is referenced by the
    gml:fileReference property that is an anyURI (the gml:fileName
    property has been deprecated).  This means that the external file
    may be located remotely from the referencing GML instance. The
    gml:compression property points to a definition of a compression
    algorithm through an anyURI.  This may be a retrievable, computable
    definition or simply a reference to an unambiguous name for the
    compression method. The gml:mimeType property points to a definition
    of the file mime type. The gml:fileStructure property is defined by
    a codelist. Note further that all values shall be enclosed in a
    single file. Multi-file structures for values are not supported in
    GML. The semantics of the range set is described as above using the
    gml:rangeParameters property. Note that if any compression algorithm
    is applied, the structure above applies only to the pre-compression
    or post-decompression structure of the file. Note that the fields
    within a record match the gml:valueComponents of the
    gml:CompositeValue in document order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DmsAngle(DmsangleType):
    class Meta:
        name = "dmsAngle"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DmsAngleValue(DmsangleType):
    class Meta:
        name = "dmsAngleValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MetaDataProperty(MetaDataPropertyType):
    class Meta:
        name = "metaDataProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcConstraintType(AbstractObjectType1):
    """
    :ivar description: A description of the constraint that is being
        applied.
    """

    class Meta:
        name = "FC_Constraint_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class FcInheritanceRelationType(AbstractObjectType1):
    """
    :ivar name: Text string that uniquely identifies this inheritance
        relation within the feature catalogue that contains this
        inheritance relation.
    :ivar description: A natural language description of this
        inheritance relation.
    :ivar unique_instance: Indicates if an instance of the supertype can
        be an instance of at most one of its subtypes.
    :ivar designation: designation of the inheritance relation in a
        natural language
    :ivar subtype: Identifies one feature type to which the associated
        superclass feature type supplies inherited properties,
        associations and operations.
    :ivar supertype: Identifies one feature type from which the
        associated subtype class inherits properties, associations and
        operations.
    """

    class Meta:
        name = "FC_InheritanceRelation_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    unique_instance: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "uniqueInstance",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    designation: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    subtype: Optional["FcFeatureTypePropertyType"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    supertype: Optional["FcFeatureTypePropertyType"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class AbstractCtItem(AbstractCtItemType):
    class Meta:
        name = "AbstractCT_Item"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCrs(CtCrsType):
    class Meta:
        name = "CT_CRS"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCodelistValueType(AbstractCtItemType):
    class Meta:
        name = "CT_CodelistValue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCoordinateSystem(CtCoordinateSystemType):
    class Meta:
        name = "CT_CoordinateSystem"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCoordinateSystemAxis(CtCoordinateSystemAxisType):
    class Meta:
        name = "CT_CoordinateSystemAxis"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtDatum(CtDatumType):
    class Meta:
        name = "CT_Datum"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtEllipsoid(CtEllipsoidType):
    class Meta:
        name = "CT_Ellipsoid"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtOperationMethod(CtOperationMethodType):
    class Meta:
        name = "CT_OperationMethod"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtOperationParameters(CtOperationParametersType):
    class Meta:
        name = "CT_OperationParameters"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtPrimeMeridian(CtPrimeMeridianType):
    class Meta:
        name = "CT_PrimeMeridian"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtUnitOfMeasureType(AbstractCtItemType):
    class Meta:
        name = "CT_UnitOfMeasure_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    quantity_type: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "quantityType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    uom_symbol: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "uomSymbol",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )


@dataclass
class CiAddress2(CiAddressType2):
    """
    Location of the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Address"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiDatePropertyType2:
    class Meta:
        name = "CI_Date_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_date: Optional[CiDate2] = field(
        default=None,
        metadata={
            "name": "CI_Date",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnlineResource2(CiOnlineResourceType2):
    """
    Information about on-line sources from which the resource, specification, or
    community profile name and extended metadata elements can be obtained.
    """

    class Meta:
        name = "CI_OnlineResource"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiSeries2(CiSeriesType2):
    """
    Information about the series, or aggregate resource, to which a resource
    belongs.
    """

    class Meta:
        name = "CI_Series"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiTelephone2(CiTelephoneType2):
    """
    Telephone numbers for contacting the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Telephone"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiAddress1(CiAddressType1):
    """
    Location of the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Address"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiDatePropertyType1:
    class Meta:
        name = "CI_Date_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_date: Optional[CiDate1] = field(
        default=None,
        metadata={
            "name": "CI_Date",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnlineResource1(CiOnlineResourceType1):
    """
    Information about on-line sources from which the resource, specification, or
    community profile name and extended metadata elements can be obtained.
    """

    class Meta:
        name = "CI_OnlineResource"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiSeries1(CiSeriesType1):
    """
    Information about the series, or aggregate resource, to which a resource
    belongs.
    """

    class Meta:
        name = "CI_Series"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiTelephone1(CiTelephoneType1):
    """
    Telephone numbers for contacting the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Telephone"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class MultiplicityRangePropertyType1:
    class Meta:
        name = "MultiplicityRange_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    multiplicity_range: Optional[MultiplicityRange1] = field(
        default=None,
        metadata={
            "name": "MultiplicityRange",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TypeName1(TypeNameType1):
    class Meta:
        name = "TypeName"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class ExGeographicBoundingBoxPropertyType2:
    class Meta:
        name = "EX_GeographicBoundingBox_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_geographic_bounding_box: Optional[ExGeographicBoundingBox2] = field(
        default=None,
        metadata={
            "name": "EX_GeographicBoundingBox",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtFreeTextPropertyType1(CharacterStringPropertyType1):
    class Meta:
        name = "PT_FreeText_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    pt_free_text: Optional[PtFreeText1] = field(
        default=None,
        metadata={
            "name": "PT_FreeText",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )


@dataclass
class MiEnvironmentalRecord(MiEnvironmentalRecordType):
    class Meta:
        name = "MI_EnvironmentalRecord"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class AbstractTypedDatePropertyType:
    class Meta:
        name = "Abstract_TypedDate_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    ci_date: Optional[CiDate2] = field(
        default=None,
        metadata={
            "name": "CI_Date",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_date: Optional[CiDate1] = field(
        default=None,
        metadata={
            "name": "CI_Date",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeDescription1(MdScopeDescriptionType1):
    """
    Description of the class of information covered by the information.
    """

    class Meta:
        name = "MD_ScopeDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class DsDataSetPropertyType2:
    class Meta:
        name = "DS_DataSet_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_data_set: Optional[DsDataSet2] = field(
        default=None,
        metadata={
            "name": "DS_DataSet",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsInitiative2(DsInitiativeType2):
    """
    Collection of associated resources related by their participation in a common
    initiative.
    """

    class Meta:
        name = "DS_Initiative"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsOtherAggregate2(DsOtherAggregateType2):
    """
    Collection of resource associated through inspecified means.
    """

    class Meta:
        name = "DS_OtherAggregate"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsPlatformType2(DsSeriesType2):
    class Meta:
        name = "DS_Platform_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsProductionSeriesType2(DsSeriesType2):
    class Meta:
        name = "DS_ProductionSeries_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsSensorType2(DsSeriesType2):
    class Meta:
        name = "DS_Sensor_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsSeries2(DsSeriesType2):
    """
    Collection of resource related by a common heritage adhering to a common
    specification.
    """

    class Meta:
        name = "DS_Series"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class SvServicePropertyType:
    class Meta:
        name = "SV_Service_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    sv_service: Optional[SvService] = field(
        default=None,
        metadata={
            "name": "SV_Service",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMetadataScope(MdMetadataScopeType):
    class Meta:
        name = "MD_MetadataScope"
        namespace = "http://standards.iso.org/iso/19115/-3/mdb/2.0"


@dataclass
class MdFeatureTypeInfoPropertyType:
    class Meta:
        name = "MD_FeatureTypeInfo_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    md_feature_type_info: Optional[MdFeatureTypeInfo] = field(
        default=None,
        metadata={
            "name": "MD_FeatureTypeInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiRangeElementDescription(MiRangeElementDescriptionType):
    """Description: description of specific range elements shortName: RgEltDesc"""

    class Meta:
        name = "MI_RangeElementDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdStandardOrderProcess2(MdStandardOrderProcessType2):
    """
    Common ways in which the resource may be obtained or received, and related
    instructions and fee information.
    """

    class Meta:
        name = "MD_StandardOrderProcess"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class MdResolutionType2(AbstractSpatialResolutionType):
    """
    :ivar equivalent_scale: level of detail expressed as the scale of a
        comparable hardcopy map or chart
    :ivar distance: horizontal ground sample distance
    :ivar vertical: Vertical sampling distance
    :ivar angular_distance: Angular sampling measure
    :ivar level_of_detail: brief textual description of the spatial
        resolution of the resource
    """

    class Meta:
        name = "MD_Resolution_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    equivalent_scale: Optional[MdRepresentativeFractionPropertyType2] = field(
        default=None,
        metadata={
            "name": "equivalentScale",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    distance: Optional[DistancePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    vertical: Optional[DistancePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    angular_distance: Optional[AnglePropertyType1] = field(
        default=None,
        metadata={
            "name": "angularDistance",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    level_of_detail: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "levelOfDetail",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )


@dataclass
class LeNominalResolutionPropertyType:
    class Meta:
        name = "LE_NominalResolution_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_nominal_resolution: Optional[LeNominalResolution] = field(
        default=None,
        metadata={
            "name": "LE_NominalResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeProcessStepReport(LeProcessStepReportType):
    """Description: Report of what occured during the process step shortName: ProcStepRep"""

    class Meta:
        name = "LE_ProcessStepReport"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class MdDimension2(MdDimensionType2):
    """
    Axis properties.
    """

    class Meta:
        name = "MD_Dimension"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdGeometricObjectsPropertyType2:
    class Meta:
        name = "MD_GeometricObjects_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_geometric_objects: Optional[MdGeometricObjects2] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjects",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityRangePropertyType2:
    class Meta:
        name = "MultiplicityRange_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    multiplicity_range: Optional[MultiplicityRange2] = field(
        default=None,
        metadata={
            "name": "MultiplicityRange",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TypeNamePropertyType2:
    class Meta:
        name = "TypeName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    type_name: Optional[TypeName2] = field(
        default=None,
        metadata={
            "name": "TypeName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDsAggregateType1(AbstractObjectType2):
    """
    Identifiable collection of datasets.
    """

    class Meta:
        name = "AbstractDS_Aggregate_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    composed_of: List[DsDataSetPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "composedOf",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    series_metadata: List[MdMetadataPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "seriesMetadata",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    subset: List["DsAggregatePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    superset: List["DsAggregatePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiAddressPropertyType3:
    class Meta:
        name = "CI_Address_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_address: Optional[CiAddress3] = field(
        default=None,
        metadata={
            "name": "CI_Address",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiDatePropertyType3:
    class Meta:
        name = "CI_Date_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_date: Optional[CiDate3] = field(
        default=None,
        metadata={
            "name": "CI_Date",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnlineResourcePropertyType3:
    class Meta:
        name = "CI_OnlineResource_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_online_resource: Optional[CiOnlineResource3] = field(
        default=None,
        metadata={
            "name": "CI_OnlineResource",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiSeriesPropertyType3:
    class Meta:
        name = "CI_Series_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_series: Optional[CiSeries3] = field(
        default=None,
        metadata={
            "name": "CI_Series",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiTelephonePropertyType3:
    class Meta:
        name = "CI_Telephone_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_telephone: Optional[CiTelephone3] = field(
        default=None,
        metadata={
            "name": "CI_Telephone",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicBoundingBoxPropertyType1:
    class Meta:
        name = "EX_GeographicBoundingBox_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_geographic_bounding_box: Optional[ExGeographicBoundingBox1] = field(
        default=None,
        metadata={
            "name": "EX_GeographicBoundingBox",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBrowseGraphicPropertyType2:
    class Meta:
        name = "MD_BrowseGraphic_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_browse_graphic: Optional[MdBrowseGraphic2] = field(
        default=None,
        metadata={
            "name": "MD_BrowseGraphic",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDimension1(MdDimensionType1):
    class Meta:
        name = "MD_Dimension"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdFormatPropertyType1:
    class Meta:
        name = "MD_Format_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_format: Optional[MdFormat1] = field(
        default=None,
        metadata={
            "name": "MD_Format",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeometricObjectsPropertyType1:
    class Meta:
        name = "MD_GeometricObjects_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_geometric_objects: Optional[MdGeometricObjects1] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjects",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdLegalConstraints1(MdLegalConstraintsType1):
    class Meta:
        name = "MD_LegalConstraints"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMediumPropertyType1:
    class Meta:
        name = "MD_Medium_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_medium: Optional[MdMedium1] = field(
        default=None,
        metadata={
            "name": "MD_Medium",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdResolutionType1:
    class Meta:
        name = "MD_Resolution_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    equivalent_scale: Optional[MdRepresentativeFractionPropertyType1] = field(
        default=None,
        metadata={
            "name": "equivalentScale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distance: Optional[DistancePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdScopeDescriptionPropertyType2:
    class Meta:
        name = "MD_ScopeDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_scope_description: Optional[MdScopeDescription2] = field(
        default=None,
        metadata={
            "name": "MD_ScopeDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSecurityConstraints1(MdSecurityConstraintsType1):
    class Meta:
        name = "MD_SecurityConstraints"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdStandardOrderProcessPropertyType1:
    class Meta:
        name = "MD_StandardOrderProcess_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_standard_order_process: Optional[MdStandardOrderProcess1] = field(
        default=None,
        metadata={
            "name": "MD_StandardOrderProcess",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtFreeTextPropertyType2(CharacterStringPropertyType2):
    class Meta:
        name = "PT_FreeText_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    pt_free_text: Optional[PtFreeText2] = field(
        default=None,
        metadata={
            "name": "PT_FreeText",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class PtLocalePropertyType2:
    class Meta:
        name = "PT_Locale_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    pt_locale: Optional[PtLocale2] = field(
        default=None,
        metadata={
            "name": "PT_Locale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractGmltype:
    class Meta:
        name = "AbstractGMLType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    meta_data_property: List[MetaDataProperty] = field(
        default_factory=list,
        metadata={
            "name": "metaDataProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    description: Optional[Description] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    description_reference: Optional[DescriptionReference] = field(
        default=None,
        metadata={
            "name": "descriptionReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    name: List[Name] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AngleChoiceType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    angle: Optional[Angle3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dms_angle: Optional[DmsAngle] = field(
        default=None,
        metadata={
            "name": "dmsAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BoundingShapeType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    envelope_with_time_period: Optional[EnvelopeWithTimePeriod] = field(
        default=None,
        metadata={
            "name": "EnvelopeWithTimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    envelope: Optional[Envelope] = field(
        default=None,
        metadata={
            "name": "Envelope",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    null: Optional[Null] = field(
        default=None,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Clothoid(ClothoidType):
    """A clothoid, or Cornu's spiral, is plane curve whose curvature is a fixed
    function of its length.

    refLocation, startParameter, endParameter and scaleFactor have the
    same meaning as specified in ISO 19107:2003, 6.4.22. interpolation
    is fixed as "clothoid". The content model follows the general
    pattern for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoverageFunction(CoverageFunctionType):
    """The gml:coverageFunction property describes the mapping function from the
    domain to the range of the coverage.

    The value of the CoverageFunction is one of gml:CoverageMappingRule
    and gml:GridFunction. If the gml:coverageFunction property is
    omitted for a gridded coverage (including rectified gridded
    coverages) the gml:startPoint is assumed to be the value of the
    gml:low property in the gml:Grid geometry, and the gml:sequenceRule
    is assumed to be linear and the gml:axisOrder property is assumed to
    be "+1 +2".
    """

    class Meta:
        name = "coverageFunction"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Direction(DirectionPropertyType):
    """
    The property gml:direction is intended as a pre-defined property expressing a
    direction to be assigned to features defined in a GML application schema.
    """

    class Meta:
        name = "direction"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcConstraint(FcConstraintType):
    """
    A class for defining constraints for types.
    """

    class Meta:
        name = "FC_Constraint"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class FcInheritanceRelation(FcInheritanceRelationType):
    """FC_InheritanceRelation realizes GF_InheritanceRelation.

    &lt;ocl&gt; FC_InheritanceRelation always assumes that its GF_InheritanceRelation::uniqueInstance is TRUE. &lt;/ocl&gt;
    """

    class Meta:
        name = "FC_InheritanceRelation"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class CtCrsPropertyType:
    class Meta:
        name = "CT_CRS_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_crs: Optional[CtCrs] = field(
        default=None,
        metadata={
            "name": "CT_CRS",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtCodelistValue(CtCodelistValueType):
    class Meta:
        name = "CT_CodelistValue"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCoordinateSystemAxisPropertyType:
    class Meta:
        name = "CT_CoordinateSystemAxis_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_coordinate_system_axis: Optional[CtCoordinateSystemAxis] = field(
        default=None,
        metadata={
            "name": "CT_CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtCoordinateSystemPropertyType:
    class Meta:
        name = "CT_CoordinateSystem_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_coordinate_system: Optional[CtCoordinateSystem] = field(
        default=None,
        metadata={
            "name": "CT_CoordinateSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtDatumPropertyType:
    class Meta:
        name = "CT_Datum_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_datum: Optional[CtDatum] = field(
        default=None,
        metadata={
            "name": "CT_Datum",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtEllipsoidPropertyType:
    class Meta:
        name = "CT_Ellipsoid_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_ellipsoid: Optional[CtEllipsoid] = field(
        default=None,
        metadata={
            "name": "CT_Ellipsoid",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtOperationMethodPropertyType:
    class Meta:
        name = "CT_OperationMethod_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_operation_method: Optional[CtOperationMethod] = field(
        default=None,
        metadata={
            "name": "CT_OperationMethod",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtOperationParametersPropertyType:
    class Meta:
        name = "CT_OperationParameters_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_operation_parameters: Optional[CtOperationParameters] = field(
        default=None,
        metadata={
            "name": "CT_OperationParameters",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtPrimeMeridianPropertyType:
    class Meta:
        name = "CT_PrimeMeridian_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_prime_meridian: Optional[CtPrimeMeridian] = field(
        default=None,
        metadata={
            "name": "CT_PrimeMeridian",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtUnitOfMeasure(CtUnitOfMeasureType):
    class Meta:
        name = "CT_UnitOfMeasure"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CiAddressPropertyType2:
    class Meta:
        name = "CI_Address_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_address: Optional[CiAddress2] = field(
        default=None,
        metadata={
            "name": "CI_Address",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnlineResourcePropertyType2:
    class Meta:
        name = "CI_OnlineResource_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_online_resource: Optional[CiOnlineResource2] = field(
        default=None,
        metadata={
            "name": "CI_OnlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiSeriesPropertyType2:
    class Meta:
        name = "CI_Series_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_series: Optional[CiSeries2] = field(
        default=None,
        metadata={
            "name": "CI_Series",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiTelephonePropertyType2:
    class Meta:
        name = "CI_Telephone_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_telephone: Optional[CiTelephone2] = field(
        default=None,
        metadata={
            "name": "CI_Telephone",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiAddressPropertyType1:
    class Meta:
        name = "CI_Address_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_address: Optional[CiAddress1] = field(
        default=None,
        metadata={
            "name": "CI_Address",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnlineResourcePropertyType1:
    class Meta:
        name = "CI_OnlineResource_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_online_resource: Optional[CiOnlineResource1] = field(
        default=None,
        metadata={
            "name": "CI_OnlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiSeriesPropertyType1:
    class Meta:
        name = "CI_Series_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_series: Optional[CiSeries1] = field(
        default=None,
        metadata={
            "name": "CI_Series",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiTelephonePropertyType1:
    class Meta:
        name = "CI_Telephone_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_telephone: Optional[CiTelephone1] = field(
        default=None,
        metadata={
            "name": "CI_Telephone",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityType1(AbstractObjectType1):
    """Use to represent the possible cardinality of a relation.

    Represented by a set of simple multiplicity ranges.
    """

    class Meta:
        name = "Multiplicity_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    range: List[MultiplicityRangePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class TypeNamePropertyType1:
    class Meta:
        name = "TypeName_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    type_name: Optional[TypeName1] = field(
        default=None,
        metadata={
            "name": "TypeName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiEnvironmentalRecordPropertyType:
    class Meta:
        name = "MI_EnvironmentalRecord_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_environmental_record: Optional[MiEnvironmentalRecord] = field(
        default=None,
        metadata={
            "name": "MI_EnvironmentalRecord",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractOnlineResourcePropertyType:
    class Meta:
        name = "Abstract_OnlineResource_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    ci_online_resource: Optional[CiOnlineResource2] = field(
        default=None,
        metadata={
            "name": "CI_OnlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_online_resource: Optional[
        CiOnlineResource1
    ] = field(
        default=None,
        metadata={
            "name": "CI_OnlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractStandardOrderProcessPropertyType:
    class Meta:
        name = "Abstract_StandardOrderProcess_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_standard_order_process: Optional[MdStandardOrderProcess2] = field(
        default=None,
        metadata={
            "name": "MD_StandardOrderProcess",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeDescriptionPropertyType1:
    class Meta:
        name = "MD_ScopeDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_scope_description: Optional[MdScopeDescription1] = field(
        default=None,
        metadata={
            "name": "MD_ScopeDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsInitiativePropertyType2:
    class Meta:
        name = "DS_Initiative_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_initiative: Optional[DsInitiative2] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsOtherAggregatePropertyType2:
    class Meta:
        name = "DS_OtherAggregate_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_other_aggregate: Optional[DsOtherAggregate2] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsPlatform2(DsPlatformType2):
    """
    Collection of associated resources produced from the same sensor platform.
    """

    class Meta:
        name = "DS_Platform"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsProductionSeries2(DsProductionSeriesType2):
    """
    Collection of associated resources produced to the same production
    specification.
    """

    class Meta:
        name = "DS_ProductionSeries"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class DsSensor2(DsSensorType2):
    """
    Collection of associated resources produced by the same sensor.
    """

    class Meta:
        name = "DS_Sensor"
        namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"


@dataclass
class MdMetadataScopePropertyType:
    class Meta:
        name = "MD_MetadataScope_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mdb/2.0"

    md_metadata_scope: Optional[MdMetadataScope] = field(
        default=None,
        metadata={
            "name": "MD_MetadataScope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiRangeElementDescriptionPropertyType:
    class Meta:
        name = "MI_RangeElementDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_range_element_description: Optional[MiRangeElementDescription] = field(
        default=None,
        metadata={
            "name": "MI_RangeElementDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdStandardOrderProcessPropertyType2:
    class Meta:
        name = "MD_StandardOrderProcess_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_standard_order_process: Optional[MdStandardOrderProcess2] = field(
        default=None,
        metadata={
            "name": "MD_StandardOrderProcess",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdResolution2(MdResolutionType2):
    """
    Level of detail expressed as a scale factor, a distance or an angle.
    """

    class Meta:
        name = "MD_Resolution"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class LeProcessStepReportPropertyType:
    class Meta:
        name = "LE_ProcessStepReport_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_process_step_report: Optional[LeProcessStepReport] = field(
        default=None,
        metadata={
            "name": "LE_ProcessStepReport",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDimensionPropertyType2:
    class Meta:
        name = "MD_Dimension_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_dimension: Optional[MdDimension2] = field(
        default=None,
        metadata={
            "name": "MD_Dimension",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MemberNameType2(AbstractObjectType2):
    """A MemberName is a LocalName that references either an attribute slot in a
    record or  recordType or an attribute, operation, or association role in an
    object instance or  type description in some form of schema.

    The stored value "aName" is the returned value for the "aName()"
    operation.
    """

    class Meta:
        name = "MemberName_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    a_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "aName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )
    attribute_type: Optional[TypeNamePropertyType2] = field(
        default=None,
        metadata={
            "name": "attributeType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )


@dataclass
class MultiplicityType2(AbstractObjectType2):
    """Use to represent the possible cardinality of a relation.

    Represented by a set of simple multiplicity ranges.
    """

    class Meta:
        name = "Multiplicity_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    range: List[MultiplicityRangePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractDsAggregate1(AbstractDsAggregateType1):
    class Meta:
        name = "AbstractDS_Aggregate"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiContactType3(AbstractObjectType2):
    """
    Information required enabling contact with the  responsible person and/or
    organisation.
    """

    class Meta:
        name = "CI_Contact_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    phone: Optional[CiTelephonePropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    address: Optional[CiAddressPropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    online_resource: Optional[CiOnlineResourcePropertyType3] = field(
        default=None,
        metadata={
            "name": "onlineResource",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    hours_of_service: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "hoursOfService",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact_instructions: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "contactInstructions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DsInitiativeType1(AbstractDsAggregateType1):
    class Meta:
        name = "DS_Initiative_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsOtherAggregateType1(AbstractDsAggregateType1):
    class Meta:
        name = "DS_OtherAggregate_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSeriesType1(AbstractDsAggregateType1):
    class Meta:
        name = "DS_Series_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdConstraintsPropertyType1:
    class Meta:
        name = "MD_Constraints_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_security_constraints: Optional[MdSecurityConstraints1] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_legal_constraints: Optional[MdLegalConstraints1] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_constraints: Optional[MdConstraints1] = field(
        default=None,
        metadata={
            "name": "MD_Constraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDigitalTransferOptionsType1(AbstractObjectType2):
    """
    Technical means and media by which a dataset is obtained from the distributor.
    """

    class Meta:
        name = "MD_DigitalTransferOptions_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    units_of_distribution: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "unitsOfDistribution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    transfer_size: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "transferSize",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    on_line: List[CiOnlineResourcePropertyType3] = field(
        default_factory=list,
        metadata={
            "name": "onLine",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    off_line: Optional[MdMediumPropertyType1] = field(
        default=None,
        metadata={
            "name": "offLine",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdDimensionPropertyType1:
    class Meta:
        name = "MD_Dimension_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_dimension: Optional[MdDimension1] = field(
        default=None,
        metadata={
            "name": "MD_Dimension",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdLegalConstraintsPropertyType1:
    class Meta:
        name = "MD_LegalConstraints_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_legal_constraints: Optional[MdLegalConstraints1] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdResolution1(MdResolutionType1):
    class Meta:
        name = "MD_Resolution"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdSecurityConstraintsPropertyType1:
    class Meta:
        name = "MD_SecurityConstraints_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_security_constraints: Optional[MdSecurityConstraints1] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdVectorSpatialRepresentationType1(AbstractMdSpatialRepresentationType1):
    """
    Information about the vector spatial objects in the dataset.
    """

    class Meta:
        name = "MD_VectorSpatialRepresentation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    topology_level: Optional[MdTopologyLevelCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "topologyLevel",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    geometric_objects: List[MdGeometricObjectsPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "geometricObjects",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractGml(AbstractGmltype):
    """The abstract element gml:AbstractGML is "any GML object having identity".

    It acts as the head of an XML Schema substitution group, which may
    include any element which is a GML feature, or other object, with
    identity.  This is used as a variable in content models in GML core
    and application schemas.  It is effectively an abstract superclass
    for all GML objects.
    """

    class Meta:
        name = "AbstractGML"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometryType(AbstractGmltype):
    """All geometry elements are derived directly or indirectly from this abstract
    supertype. A geometry element may have an identifying attribute (gml:id), one
    or more names (elements identifier and name) and a description (elements
    description and descriptionReference) . It may be associated with a spatial
    reference system (attribute group gml:SRSReferenceGroup).

    The following rules shall be adhered to:
    -       Every geometry type shall derive from this abstract type.
    -       Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the substitution group of AbstractGeometry.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels_attribute: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class AbstractTimeObjectType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeSliceType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    valid_time: Optional[ValidTime] = field(
        default=None,
        metadata={
            "name": "validTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    data_source: Optional[DataSource] = field(
        default=None,
        metadata={
            "name": "dataSource",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractTopologyType(AbstractGmltype):
    """This abstract type supplies the root or base type for all topological
    elements including primitives and complexes.

    It inherits AbstractGMLType and hence can be identified using the
    gml:id attribute.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArrayType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    members: Optional["Members"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BagType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    member: List[Member] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    members: Optional["Members"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DefinitionBaseType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class BoundedBy(BoundingShapeType):
    """
    This property describes the minimum bounding box or rectangle that encloses the
    entire feature.
    """

    class Meta:
        name = "boundedBy"
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcConstraintPropertyType:
    class Meta:
        name = "FC_Constraint_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_constraint: Optional[FcConstraint] = field(
        default=None,
        metadata={
            "name": "FC_Constraint",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcInheritanceRelationPropertyType:
    class Meta:
        name = "FC_InheritanceRelation_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_inheritance_relation: Optional[FcInheritanceRelation] = field(
        default=None,
        metadata={
            "name": "FC_InheritanceRelation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtCodelistValuePropertyType:
    class Meta:
        name = "CT_CodelistValue_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_codelist_value: Optional[CtCodelistValue] = field(
        default=None,
        metadata={
            "name": "CT_CodelistValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtUnitOfMeasurePropertyType:
    class Meta:
        name = "CT_UnitOfMeasure_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_unit_of_measure: Optional[CtUnitOfMeasure] = field(
        default=None,
        metadata={
            "name": "CT_UnitOfMeasure",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiContactType2(AbstractObjectType1):
    """
    :ivar phone: telephone numbers at which the organisation or
        individual may be contacted
    :ivar address: physical and email address at which the organisation
        or individual may be contacted
    :ivar online_resource: on-line information that can be used to
        contact the individual or organisation
    :ivar hours_of_service: time period (including time zone) when
        individuals can contact the organisation or individual
    :ivar contact_instructions: supplemental instructions on how or when
        to contact the individual or organisation
    :ivar contact_type:
    """

    class Meta:
        name = "CI_Contact_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    phone: List[CiTelephonePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    address: List[CiAddressPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    online_resource: List[CiOnlineResourcePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "onlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    hours_of_service: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "hoursOfService",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    contact_instructions: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "contactInstructions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    contact_type: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "contactType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class CiContactType1(AbstractObjectType1):
    """
    :ivar phone: telephone numbers at which the organisation or
        individual may be contacted
    :ivar address: physical and email address at which the organisation
        or individual may be contacted
    :ivar online_resource: on-line information that can be used to
        contact the individual or organisation
    :ivar hours_of_service: time period (including time zone) when
        individuals can contact the organisation or individual
    :ivar contact_instructions: supplemental instructions on how or when
        to contact the individual or organisation
    :ivar contact_type:
    """

    class Meta:
        name = "CI_Contact_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    phone: List[CiTelephonePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    address: List[CiAddressPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    online_resource: List[CiOnlineResourcePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "onlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    hours_of_service: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "hoursOfService",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    contact_instructions: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "contactInstructions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    contact_type: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "contactType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class MemberNameType1(AbstractObjectType1):
    """A MemberName is a LocalName that references either an attribute slot in a
    record or  recordType or an attribute, operation, or association role in an
    object instance or  type description in some form of schema.

    The stored value "aName" is the returned value for the "aName()"
    operation.
    """

    class Meta:
        name = "MemberName_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    a_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "aName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "required": True,
        },
    )
    attribute_type: Optional[TypeNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "attributeType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "required": True,
        },
    )


@dataclass
class Multiplicity1(MultiplicityType1):
    class Meta:
        name = "Multiplicity"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class AbstractSpatialResolutionPropertyType:
    class Meta:
        name = "Abstract_SpatialResolution_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_resolution: Optional[MdResolution2] = field(
        default=None,
        metadata={
            "name": "MD_Resolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDsAggregatePropertyType:
    class Meta:
        name = "AbstractDS_Aggregate_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_sensor: Optional[DsSensor2] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_production_series: Optional[DsProductionSeries2] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_platform: Optional[DsPlatform2] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_series: Optional[DsSeries2] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_other_aggregate: Optional[DsOtherAggregate2] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_initiative: Optional[DsInitiative2] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDsResourcePropertyType:
    class Meta:
        name = "AbstractDS_Resource_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    sv_service: Optional[SvService] = field(
        default=None,
        metadata={
            "name": "SV_Service",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_data_set: Optional[DsDataSet2] = field(
        default=None,
        metadata={
            "name": "DS_DataSet",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_sensor: Optional[DsSensor2] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_production_series: Optional[DsProductionSeries2] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_platform: Optional[DsPlatform2] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_series: Optional[DsSeries2] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_other_aggregate: Optional[DsOtherAggregate2] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_initiative: Optional[DsInitiative2] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsPlatformPropertyType2:
    class Meta:
        name = "DS_Platform_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_platform: Optional[DsPlatform2] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsProductionSeriesPropertyType2:
    class Meta:
        name = "DS_ProductionSeries_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_production_series: Optional[DsProductionSeries2] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsSensorPropertyType2:
    class Meta:
        name = "DS_Sensor_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_sensor: Optional[DsSensor2] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsSeriesPropertyType2:
    class Meta:
        name = "DS_Series_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mda/2.0"

    ds_sensor: Optional[DsSensor2] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_production_series: Optional[DsProductionSeries2] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_platform: Optional[DsPlatform2] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    ds_series: Optional[DsSeries2] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mda/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdResolutionPropertyType2:
    class Meta:
        name = "MD_Resolution_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_resolution: Optional[MdResolution2] = field(
        default=None,
        metadata={
            "name": "MD_Resolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MemberName2(MemberNameType2):
    class Meta:
        name = "MemberName"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Multiplicity2(MultiplicityType2):
    class Meta:
        name = "Multiplicity"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class CiContact3(CiContactType3):
    class Meta:
        name = "CI_Contact"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsInitiative1(DsInitiativeType1):
    class Meta:
        name = "DS_Initiative"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsOtherAggregate1(DsOtherAggregateType1):
    class Meta:
        name = "DS_OtherAggregate"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsPlatformType1(DsSeriesType1):
    class Meta:
        name = "DS_Platform_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsProductionSeriesType1(DsSeriesType1):
    class Meta:
        name = "DS_ProductionSeries_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSensorType1(DsSeriesType1):
    class Meta:
        name = "DS_Sensor_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSeries1(DsSeriesType1):
    class Meta:
        name = "DS_Series"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsStereoMateType(DsOtherAggregateType1):
    class Meta:
        name = "DS_StereoMate_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDigitalTransferOptions1(MdDigitalTransferOptionsType1):
    class Meta:
        name = "MD_DigitalTransferOptions"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGridSpatialRepresentationType1(AbstractMdSpatialRepresentationType1):
    """
    Types and numbers of raster spatial objects in the dataset.
    """

    class Meta:
        name = "MD_GridSpatialRepresentation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    number_of_dimensions: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "numberOfDimensions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    axis_dimension_properties: List[MdDimensionPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "axisDimensionProperties",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    cell_geometry: Optional[MdCellGeometryCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "cellGeometry",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    transformation_parameter_availability: Optional[
        BooleanPropertyType3
    ] = field(
        default=None,
        metadata={
            "name": "transformationParameterAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdResolutionPropertyType1:
    class Meta:
        name = "MD_Resolution_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_resolution: Optional[MdResolution1] = field(
        default=None,
        metadata={
            "name": "MD_Resolution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdVectorSpatialRepresentation1(MdVectorSpatialRepresentationType1):
    class Meta:
        name = "MD_VectorSpatialRepresentation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractGeometricAggregateType(AbstractGeometryType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGeometricPrimitiveType(AbstractGeometryType):
    """Gml:AbstractGeometricPrimitiveType is the abstract root type of the
    geometric primitives.

    A geometric primitive is a geometric object that is not decomposed
    further into other primitives in the system. All primitives are
    oriented in the direction implied by the sequence of their
    coordinate tuples.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometry(AbstractGeometryType):
    """The AbstractGeometry element is the abstract head of the substitution group
    for all geometry elements of GML.

    This includes pre-defined and user-defined geometry elements. Any
    geometry element shall be a direct or indirect extension/restriction
    of AbstractGeometryType and shall be directly or indirectly in the
    substitution group of AbstractGeometry.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractImplicitGeometry(AbstractGeometryType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeComplexType(AbstractTimeObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeObject(AbstractTimeObjectType):
    """
    Gml:AbstractTimeObject acts as the head of a substitution group for all
    temporal primitives and complexes.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimePrimitiveType(AbstractTimeObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    related_time: List[RelatedTimeType] = field(
        default_factory=list,
        metadata={
            "name": "relatedTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractTimeSlice(AbstractTimeSliceType):
    """To describe an event — an action that occurs at an instant or over an
    interval of time — GML provides the gml:AbtractTimeSlice element.

    A timeslice encapsulates the time-varying properties of a dynamic
    feature -- it shall be extended to represent a time stamped
    projection of a specific feature. The gml:dataSource property
    describes how the temporal data was acquired. A
    gml:AbstractTimeSlice instance is a GML object that encapsulates
    updates of the dynamic—or volatile—properties that reflect some
    change event; it thus includes only those feature properties that
    have actually changed due to some process. gml:AbstractTimeSlice
    basically provides a facility for attribute-level time stamping, in
    contrast to the object-level time stamping of dynamic feature
    instances. The time slice can thus be viewed as event or process-
    oriented, whereas a snapshot is more state or structure-oriented. A
    timeslice has richer causality, whereas a snapshot merely portrays
    the status of the whole.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTopoPrimitiveType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTopology(AbstractTopologyType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Array(ArrayType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Bag(BagType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionType(DefinitionBaseType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    remarks: Optional[Remarks] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridType(AbstractGeometryType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    limits: Optional[GridLimitsType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    axis_labels: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "tokens": True,
        },
    )
    axis_name: List[str] = field(
        default_factory=list,
        metadata={
            "name": "axisName",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dimension: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class TopoPointType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_node: Optional[DirectedNode] = field(
        default=None,
        metadata={
            "name": "directedNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TopoSurfaceType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_face: List[DirectedFace] = field(
        default_factory=list,
        metadata={
            "name": "directedFace",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFcCarrierOfCharacteristicsType(AbstractObjectType1):
    """
    :ivar feature_type:
    :ivar constrained_by: Role that links this property type to the
        constraints placed upon it.
    """

    class Meta:
        name = "AbstractFC_CarrierOfCharacteristics_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    feature_type: Optional["FcFeatureTypePropertyType"] = field(
        default=None,
        metadata={
            "name": "featureType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    constrained_by: List[FcConstraintPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "constrainedBy",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class CtCodelistType(AbstractCtItemType):
    class Meta:
        name = "CT_Codelist_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    code_entry: List[CtCodelistValuePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "codeEntry",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class CiContact2(CiContactType2):
    """
    Information required to enable contact with the responsible person and/or
    organisation.
    """

    class Meta:
        name = "CI_Contact"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiContact1(CiContactType1):
    """
    Information required to enable contact with the responsible person and/or
    organisation.
    """

    class Meta:
        name = "CI_Contact"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class MemberName1(MemberNameType1):
    class Meta:
        name = "MemberName"
        namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"


@dataclass
class MultiplicityPropertyType1:
    class Meta:
        name = "Multiplicity_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    multiplicity: Optional[Multiplicity1] = field(
        default=None,
        metadata={
            "name": "Multiplicity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MemberNamePropertyType2:
    class Meta:
        name = "MemberName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    member_name: Optional[MemberName2] = field(
        default=None,
        metadata={
            "name": "MemberName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityPropertyType2:
    class Meta:
        name = "Multiplicity_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    multiplicity: Optional[Multiplicity2] = field(
        default=None,
        metadata={
            "name": "Multiplicity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiContactPropertyType3:
    class Meta:
        name = "CI_Contact_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_contact: Optional[CiContact3] = field(
        default=None,
        metadata={
            "name": "CI_Contact",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsInitiativePropertyType1:
    class Meta:
        name = "DS_Initiative_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_initiative: Optional[DsInitiative1] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsPlatform1(DsPlatformType1):
    class Meta:
        name = "DS_Platform"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsProductionSeries1(DsProductionSeriesType1):
    class Meta:
        name = "DS_ProductionSeries"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSensor1(DsSensorType1):
    class Meta:
        name = "DS_Sensor"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsStereoMate(DsStereoMateType):
    class Meta:
        name = "DS_StereoMate"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDigitalTransferOptionsPropertyType1:
    class Meta:
        name = "MD_DigitalTransferOptions_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_digital_transfer_options: Optional[MdDigitalTransferOptions1] = field(
        default=None,
        metadata={
            "name": "MD_DigitalTransferOptions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGridSpatialRepresentation1(MdGridSpatialRepresentationType1):
    class Meta:
        name = "MD_GridSpatialRepresentation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdVectorSpatialRepresentationPropertyType1:
    class Meta:
        name = "MD_VectorSpatialRepresentation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCurveType(AbstractGeometricPrimitiveType):
    """Gml:AbstractCurveType is an abstraction of a curve to support the different
    levels of complexity.

    The curve may always be viewed as a geometric primitive, i.e. is
    continuous.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometricAggregate(AbstractGeometricAggregateType):
    """
    Gml:AbstractGeometricAggregate is the abstract head of the substitution group
    for all geometric aggregates.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometricPrimitive(AbstractGeometricPrimitiveType):
    """
    The AbstractGeometricPrimitive element is the abstract head of the substitution
    group for all (pre- and user-defined) geometric primitives.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSolidType(AbstractGeometricPrimitiveType):
    """Gml:AbstractSolidType is an abstraction of a solid to support the different
    levels of complexity.

    The solid may always be viewed as a geometric primitive, i.e. is
    contiguous.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSurfaceType(AbstractGeometricPrimitiveType):
    """Gml:AbstractSurfaceType is an abstraction of a surface to support the
    different levels of complexity.

    A surface is always a continuous region of a plane.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeComplex(AbstractTimeComplexType):
    """
    Gml:AbstractTimeComplex is an aggregation of temporal primitives and acts as
    the head of a substitution group for temporal complexes.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeGeometricPrimitiveType(AbstractTimePrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    frame: str = field(
        default="#ISO-8601",
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractTimePrimitive(AbstractTimePrimitiveType):
    """
    Gml:AbstractTimePrimitive acts as the head of a substitution group for
    geometric and topological temporal primitives.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeTopologyPrimitiveType(AbstractTimePrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    complex: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractTopoPrimitive(AbstractTopoPrimitiveType):
    """Gml:AbstractTopoPrimitive acts as the base type for all topological
    primitives.

    Topology primitives are the atomic (smallest possible) units of a
    topology complex. Each topology primitive may contain references to
    other topology primitives of codimension 2 or more (gml:isolated).
    Conversely, nodes may have faces as containers and nodes and edges
    may have solids as containers (gml:container).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Definition(DefinitionType):
    """The basic gml:Definition element specifies a definition, which can be
    included in or referenced by a dictionary.

    The content model for a generic definition is a derivation from
    gml:AbstractGMLType. The gml:description property element shall hold
    the definition if this can be captured in a simple text string, or
    the gml:descriptionReference property element may carry a link to a
    description elsewhere. The gml:identifier element shall provide one
    identifier identifying this definition. The identifier shall be
    unique within the dictionaries using this definition. The gml:name
    elements shall provide zero or more terms and synonyms for which
    this is the definition. The gml:remarks element shall be used to
    hold additional textual information that is not conceptually part of
    the definition but is useful in understanding the definition.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionProxyType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_ref: Optional[DefinitionRef] = field(
        default=None,
        metadata={
            "name": "definitionRef",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class Grid(GridType):
    """The gml:Grid implicitly defines an unrectified grid, which is a network
    composed of two or more sets of curves in which the members of each set
    intersect the members of the other sets in an algorithmic way.

    The region of interest within the grid is given in terms of its
    gml:limits, being the grid coordinates of  diagonally opposed
    corners of a rectangular region.  gml:axisLabels is provided with a
    list of labels of the axes of the grid (gml:axisName has been
    deprecated). gml:dimension specifies the dimension of the grid. The
    gml:limits element contains a single gml:GridEnvelope. The gml:low
    and gml:high property elements of the envelope are each
    integerLists, which are coordinate tuples, the coordinates being
    measured as offsets from the origin of the grid along each axis, of
    the diagonally opposing corners of a "rectangular" region of
    interest.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IdentifiedObjectType(DefinitionType):
    """Gml:IdentifiedObjectType provides identification properties of a CRS-related
    object.

    In gml:DefinitionType, the gml:identifier element shall be the
    primary name by which this object is identified, encoding the "name"
    attribute in the UML model. Zero or more of the gml:name elements
    can be an unordered set of "identifiers", encoding the "identifier"
    attribute in the UML model. Each of these gml:name elements can
    reference elsewhere the object's defining information or be an
    identifier by which this object can be referenced. Zero or more
    other gml:name elements can be an unordered set of "alias"
    alternative names by which this CRS related object is identified,
    encoding the "alias" attributes in the UML model. An object may have
    several aliases, typically used in different contexts. The context
    for an alias is indicated by the value of its (optional) codeSpace
    attribute. Any needed version information shall be included in the
    codeSpace attribute of a gml:identifier and gml:name elements. In
    this use, the gml:remarks element in the gml:DefinitionType shall
    contain comments on or information about this object, including data
    source information.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointType(AbstractGeometricPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeReferenceSystemType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: Optional[str] = field(
        default=None,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TopoPoint(TopoPointType):
    """
    The intended use of gml:TopoPoint is to appear within a point feature to
    express the structural and possibly geometric relationships of this feature to
    other features via shared node definitions.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSurface(TopoSurfaceType):
    """Gml:TopoSurface represents a homogeneous topological expression, a set of
    directed faces, which if realised are isomorphic to a geometric surface
    primitive.

    The intended use of gml:TopoSurface is to appear within a surface
    feature to express the structural and possibly geometric
    relationships of this surface feature to other features via the
    shared face definitions.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UnitDefinitionType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity_type: Optional[QuantityType] = field(
        default=None,
        metadata={
            "name": "quantityType",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_type_reference: Optional[QuantityTypeReference] = field(
        default=None,
        metadata={
            "name": "quantityTypeReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    catalog_symbol: Optional[CatalogSymbol] = field(
        default=None,
        metadata={
            "name": "catalogSymbol",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractFcCarrierOfCharacteristics(
    AbstractFcCarrierOfCharacteristicsType
):
    """
    Abstract class for local feature properties and bound global properties of a
    feature type.
    """

    class Meta:
        name = "AbstractFC_CarrierOfCharacteristics"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class CtCodelist(CtCodelistType):
    class Meta:
        name = "CT_Codelist"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CiContactPropertyType2:
    class Meta:
        name = "CI_Contact_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_contact: Optional[CiContact2] = field(
        default=None,
        metadata={
            "name": "CI_Contact",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiContactPropertyType1:
    class Meta:
        name = "CI_Contact_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_contact: Optional[CiContact1] = field(
        default=None,
        metadata={
            "name": "CI_Contact",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MemberNamePropertyType1:
    class Meta:
        name = "MemberName_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gco/1.0"

    member_name: Optional[MemberName1] = field(
        default=None,
        metadata={
            "name": "MemberName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiResponsiblePartyType(AbstractObjectType2):
    """
    Identification of, and means of communication with, person(s) and organisations
    associated with the dataset.
    """

    class Meta:
        name = "CI_ResponsibleParty_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    individual_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "individualName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    organisation_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "organisationName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    position_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "positionName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact_info: Optional[CiContactPropertyType3] = field(
        default=None,
        metadata={
            "name": "contactInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    role: Optional[CiRoleCodePropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class DsAggregatePropertyType:
    class Meta:
        name = "DS_Aggregate_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_initiative: Optional[DsInitiative1] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_production_series: Optional[DsProductionSeries1] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_sensor: Optional[DsSensor1] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_platform: Optional[DsPlatform1] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_series: Optional[DsSeries1] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_stereo_mate: Optional[DsStereoMate] = field(
        default=None,
        metadata={
            "name": "DS_StereoMate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_other_aggregate: Optional[DsOtherAggregate1] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsOtherAggregatePropertyType1:
    class Meta:
        name = "DS_OtherAggregate_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_stereo_mate: Optional[DsStereoMate] = field(
        default=None,
        metadata={
            "name": "DS_StereoMate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_other_aggregate: Optional[DsOtherAggregate1] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsPlatformPropertyType1:
    class Meta:
        name = "DS_Platform_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_platform: Optional[DsPlatform1] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsProductionSeriesPropertyType1:
    class Meta:
        name = "DS_ProductionSeries_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_production_series: Optional[DsProductionSeries1] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsSensorPropertyType1:
    class Meta:
        name = "DS_Sensor_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_sensor: Optional[DsSensor1] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsSeriesPropertyType1:
    class Meta:
        name = "DS_Series_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_production_series: Optional[DsProductionSeries1] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_sensor: Optional[DsSensor1] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_platform: Optional[DsPlatform1] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_series: Optional[DsSeries1] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsStereoMatePropertyType:
    class Meta:
        name = "DS_StereoMate_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_stereo_mate: Optional[DsStereoMate] = field(
        default=None,
        metadata={
            "name": "DS_StereoMate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributionType1(AbstractObjectType2):
    """
    Information about the distributor of and options for obtaining the dataset.
    """

    class Meta:
        name = "MD_Distribution_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    distribution_format: List[MdFormatPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "distributionFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distributor: List[MdDistributorPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    transfer_options: List[MdDigitalTransferOptionsPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "transferOptions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdRangeDimensionType1(AbstractObjectType2):
    """
    Set of adjacent wavelengths in the electro-magnetic spectrum with a common
    characteristic, such as the visible band.
    """

    class Meta:
        name = "MD_RangeDimension_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    sequence_identifier: Optional[MemberNamePropertyType2] = field(
        default=None,
        metadata={
            "name": "sequenceIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    descriptor: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractCurve(AbstractCurveType):
    """
    The AbstractCurve element is the abstract head of the substitution group for
    all (continuous) curve elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDatumType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: Optional["DomainOfValidity"] = field(
        default=None,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    scope: List[Scope] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    anchor_point: Optional[AnchorPoint] = field(
        default=None,
        metadata={
            "name": "anchorPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    anchor_definition: Optional[AnchorDefinition] = field(
        default=None,
        metadata={
            "name": "anchorDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    realization_epoch: Optional[RealizationEpoch] = field(
        default=None,
        metadata={
            "name": "realizationEpoch",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractGeneralOperationParameterType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    minimum_occurs: Optional[MinimumOccurs] = field(
        default=None,
        metadata={
            "name": "minimumOccurs",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractRingType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSolid(AbstractSolidType):
    """
    The AbstractSolid element is the abstract head of the substituition group for
    all (continuous) solid elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSurface(AbstractSurfaceType):
    """
    The AbstractSurface element is the abstract head of the substitution group for
    all (continuous) surface elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeGeometricPrimitive(AbstractTimeGeometricPrimitiveType):
    """Gml:TimeGeometricPrimitive acts as the head of a substitution group for
    geometric temporal primitives.

    A temporal geometry shall be associated with a temporal reference
    system through the frame attribute that provides a URI reference
    that identifies a description of the reference system. Following ISO
    19108, the Gregorian calendar with UTC is the default reference
    system, but others may also be used. The GPS calendar is an
    alternative reference systems in common use. The two geometric
    primitives in the temporal dimension are the instant and the period.
    GML components are defined to support these as follows.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeTopologyPrimitive(AbstractTimeTopologyPrimitiveType):
    """Gml:TimeTopologyPrimitive acts as the head of a substitution group for
    topological temporal primitives.

    Temporal topology primitives shall imply the ordering information
    between features or feature properties. The temporal connection of
    features can be examined if they have temporal topology primitives
    as values of their properties. Usually, an instantaneous feature
    associates with a time node, and a static feature associates with a
    time edge.  A feature with both modes associates with the temporal
    topology primitive: a supertype of time nodes and time edges. A
    topological primitive is always connected to one or more other
    topological primitives, and is, therefore, always a member of a
    topological complex. In a GML instance, this will often be indicated
    by the primitives being described by elements that are descendents
    of an element describing a complex. However, in order to support the
    case where a temporal topological primitive is described in another
    context, the optional complex property is provided, which carries a
    reference to the parent temporal topological complex.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseUnitType(UnitDefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    units_system: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "name": "unitsSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class CompositeCurveType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    curve_member: List["CurveMember"] = field(
        default_factory=list,
        metadata={
            "name": "curveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class CompositeSurfaceType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    surface_member: List["SurfaceMember"] = field(
        default_factory=list,
        metadata={
            "name": "surfaceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class ConventionalUnitType(UnitDefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    conversion_to_preferred_unit: Optional[ConversionToPreferredUnit] = field(
        default=None,
        metadata={
            "name": "conversionToPreferredUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rough_conversion_to_preferred_unit: Optional[
        RoughConversionToPreferredUnit
    ] = field(
        default=None,
        metadata={
            "name": "roughConversionToPreferredUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derivation_unit_term: List[DerivationUnitTerm] = field(
        default_factory=list,
        metadata={
            "name": "derivationUnitTerm",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CoordinateSystemAxisType(IdentifiedObjectType):
    """
    :ivar axis_abbrev:
    :ivar axis_direction:
    :ivar minimum_value:
    :ivar maximum_value:
    :ivar range_meaning:
    :ivar uom: The uom attribute provides an identifier of the unit of
        measure used for this coordinate system axis. The value of this
        coordinate in a coordinate tuple shall be recorded using this
        unit of measure, whenever those coordinates use a coordinate
        reference system that uses a coordinate system that uses this
        axis.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    axis_abbrev: Optional[AxisAbbrev] = field(
        default=None,
        metadata={
            "name": "axisAbbrev",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    axis_direction: Optional[AxisDirection] = field(
        default=None,
        metadata={
            "name": "axisDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    minimum_value: Optional[MinimumValue] = field(
        default=None,
        metadata={
            "name": "minimumValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    maximum_value: Optional[MaximumValue] = field(
        default=None,
        metadata={
            "name": "maximumValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    range_meaning: Optional[RangeMeaning] = field(
        default=None,
        metadata={
            "name": "rangeMeaning",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class DefinitionProxy(DefinitionProxyType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedUnitType(UnitDefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    derivation_unit_term: List[DerivationUnitTerm] = field(
        default_factory=list,
        metadata={
            "name": "derivationUnitTerm",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class EllipsoidType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    semi_major_axis: Optional[SemiMajorAxis] = field(
        default=None,
        metadata={
            "name": "semiMajorAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    second_defining_parameter: Optional[SecondDefiningParameter2] = field(
        default=None,
        metadata={
            "name": "secondDefiningParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class OrientableCurveType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_curve: Optional["BaseCurve"] = field(
        default=None,
        metadata={
            "name": "baseCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    orientation: SignType = field(
        default=SignType.VALUE_1,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OrientableSurfaceType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_surface: Optional["BaseSurface"] = field(
        default=None,
        metadata={
            "name": "baseSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    orientation: SignType = field(
        default=SignType.VALUE_1,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Point(PointType):
    """A Point is defined by a single coordinate tuple.

    The direct position of a point is specified by the pos element which
    is of type DirectPositionType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridianType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    greenwich_longitude: Optional[GreenwichLongitude] = field(
        default=None,
        metadata={
            "name": "greenwichLongitude",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeCoordinateSystemType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    origin_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "originPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    origin: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interval: Optional[TimeIntervalLengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeInstantType(AbstractTimeGeometricPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_position: Optional[TimePosition] = field(
        default=None,
        metadata={
            "name": "timePosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeNodeType(AbstractTimeTopologyPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    previous_edge: List[TimeEdgePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "previousEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    next_edge: List[TimeEdgePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "nextEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    position: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimePeriodType(AbstractTimeGeometricPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    begin_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "beginPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    begin: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "endPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    duration: Optional[Duration] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_interval: Optional[TimeInterval] = field(
        default=None,
        metadata={
            "name": "timeInterval",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeReferenceSystem(TimeReferenceSystemType):
    """A reference system is characterized in terms of its domain of validity: the spatial and temporal extent over which it is applicable. The basic GML element for temporal reference systems is gml:TimeReferenceSystem.  Its content model extends gml:DefinitionType with one additional property, gml:domainOfValidity."""

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPointPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_point: Optional[TopoPoint] = field(
        default=None,
        metadata={
            "name": "TopoPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoSurfacePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_surface: Optional[TopoSurface] = field(
        default=None,
        metadata={
            "name": "TopoSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class UnitDefinition(UnitDefinitionType):
    """A gml:UnitDefinition is a general definition of a unit of measure.

    This generic element is used only for units for which no
    relationship with other units or units systems is known. The content
    model of gml:UnitDefinition adds three additional properties to
    gml:Definition, gml:quantityType, gml:quantityTypeReference and
    gml:catalogSymbol. The gml:catalogSymbol property optionally gives
    the short symbol used for this unit. This element is usually used
    when the relationship of this unit to other units or units systems
    is unknown.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCtItemPropertyType:
    class Meta:
        name = "AbstractCT_Item_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_unit_of_measure: Optional[CtUnitOfMeasure] = field(
        default=None,
        metadata={
            "name": "CT_UnitOfMeasure",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    ct_codelist_value: Optional[CtCodelistValue] = field(
        default=None,
        metadata={
            "name": "CT_CodelistValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    ct_codelist: Optional[CtCodelist] = field(
        default=None,
        metadata={
            "name": "CT_Codelist",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtCodelistPropertyType:
    class Meta:
        name = "CT_Codelist_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_codelist: Optional[CtCodelist] = field(
        default=None,
        metadata={
            "name": "CT_Codelist",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCiPartyType2(AbstractObjectType1):
    """
    :ivar name: name of the party
    :ivar contact_info: contact information for the party
    """

    class Meta:
        name = "AbstractCI_Party_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    contact_info: List[CiContactPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "contactInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class AbstractCiPartyType1(AbstractObjectType1):
    """
    :ivar name: name of the party
    :ivar contact_info: contact information for the party
    :ivar party_identifier: value uniquely identifying a party
        (individual or organization)
    """

    class Meta:
        name = "AbstractCI_Party_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    contact_info: List[CiContactPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "contactInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    party_identifier: List["MdIdentifierPropertyType1"] = field(
        default_factory=list,
        metadata={
            "name": "partyIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class GmPointPropertyType2:
    class Meta:
        name = "GM_Point_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gmw/1.0"

    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeProcessParameterType(AbstractParameterType):
    """
    :ivar name: the name, as used by the process for this parameter
    :ivar direction: indication if the parameter is an input to the
        service, an output or both
    :ivar description: a narrative explanation of the role of the
        parameter
    :ivar optionality: indication if the parameter is required
    :ivar repeatability: indication if more than one value of the
        parameter may be provided
    :ivar value_type: type of other property description (i.e.
        netcdf/variable in ncml.xsd or AdditionalAttribute in ECHO)
    :ivar value: instance of otherPropertyType that defines attributes
        not explicitly included in LE_Processing
    :ivar resource: xxx
    """

    class Meta:
        name = "LE_ProcessParameter_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    name: Optional[MemberNamePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    direction: Optional[LeParameterDirectionPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    optionality: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    repeatability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    value_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    value: List[RecordPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    resource: List["LiSourcePropertyType2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class SvParameterType(AbstractObjectType1):
    """
    :ivar name: the name, as used by the service for this parameter
    :ivar direction: indication if the parameter is an input to the
        service, an output or both
    :ivar description: a narrative explanation of the role of the
        parameter
    :ivar optionality: indication if the parameter is required
    :ivar repeatability: indication if more than one value of the
        parameter may be provided
    """

    class Meta:
        name = "SV_Parameter_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    name: Optional[MemberNamePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )
    direction: Optional[SvParameterDirectionPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    optionality: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )
    repeatability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )


@dataclass
class CiResponsibleParty(CiResponsiblePartyType):
    class Meta:
        name = "CI_ResponsibleParty"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistribution1(MdDistributionType1):
    class Meta:
        name = "MD_Distribution"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdRangeDimension1(MdRangeDimensionType1):
    class Meta:
        name = "MD_RangeDimension"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class GmPointPropertyType1:
    class Meta:
        name = "GM_Point_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gss"

    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDatum(AbstractDatumType):
    """A gml:AbstractDatum specifies the relationship of a coordinate system to the
    earth, thus creating a coordinate reference system.

    A datum uses a parameter or set of parameters that determine the
    location of the origin of the coordinate reference system. Each
    datum subtype may be associated with only specific types of
    coordinate systems. This abstract complex type shall not be used,
    extended, or restricted, in a GML Application Schema, to define a
    concrete subtype with a meaning equivalent to a concrete subtype
    specified in this document.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralOperationParameter(AbstractGeneralOperationParameterType):
    """
    Gml:GeneralOperationParameter is the abstract definition of a parameter or
    group of parameters used by an operation method.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractRing(AbstractRingType):
    """An abstraction of a ring to support surface boundaries of different
    complexity.

    The AbstractRing element is the abstract head of the substituition
    group for all closed boundaries of a surface patch.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseUnit(BaseUnitType):
    """A base unit is a unit of measure that cannot be derived by combination of
    other base units within a particular system of units.

    For example, in the SI system of units, the base units are metre,
    kilogram, second, Ampere, Kelvin, mole, and candela, for the
    physical quantity types length, mass, time interval, electric
    current, thermodynamic temperature, amount of substance and luminous
    intensity, respectively. gml:BaseUnit extends generic
    gml:UnitDefinition with the property gml:unitsSystem, which carries
    a reference to the units system to which this base unit is asserted
    to belong.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompositeCurve(CompositeCurveType):
    """A gml:CompositeCurve is represented by a sequence of (orientable) curves
    such that each curve in the sequence terminates at the start point of the
    subsequent curve in the list.

    curveMember references or contains inline one curve in the composite
    curve. The curves are contiguous, the collection of curves is
    ordered. Therefore, if provided, the aggregationType attribute shall
    have the value "sequence".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompositeSurface(CompositeSurfaceType):
    """A gml:CompositeSurface is represented by a set of orientable surfaces.

    It is geometry type with all the geometric properties of a
    (primitive) surface. Essentially, a composite surface is a
    collection of surfaces that join in pairs on common boundary curves
    and which, when considered as a whole, form a single surface.
    surfaceMember references or contains inline one surface in the
    composite surface. The surfaces are contiguous.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConventionalUnit(ConventionalUnitType):
    """Conventional units that are neither base units nor defined by direct
    combination of base units are used in many application domains.

    For example electronVolt for energy, feet and nautical miles for
    length.  In most cases there is a known, usually linear, conversion
    to a preferred unit which is either a base unit or derived by direct
    combination of base units. The gml:ConventionalUnit extends
    gml:UnitDefinition with a property that describes a conversion to a
    preferred unit for this physical quantity.  When the conversion is
    exact, the element gml:conversionToPreferredUnit should be used, or
    when the conversion is not exact the element
    gml:roughConversionToPreferredUnit is available. Both of these
    elements have the same content model.  The gml:derivationUnitTerm
    property defined above is included to allow a user to optionally
    record how this unit may be derived from other ("more primitive")
    units.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystemAxis(CoordinateSystemAxisType):
    """
    Gml:CoordinateSystemAxis is a definition of a coordinate system axis.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedUnit(DerivedUnitType):
    """Derived units are defined by combination of other units.

    Derived units are used for quantities other than those corresponding
    to the base units, such as hertz (s-1) for frequency, Newton
    (kg.m/s2) for force.  Derived units based directly on base units are
    usually preferred for quantities other than the fundamental
    quantities within a system. If a derived unit is not the preferred
    unit, the gml:ConventionalUnit element should be used instead. The
    gml:DerivedUnit extends gml:UnitDefinition with the property
    gml:derivationUnitTerms.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Ellipsoid1(EllipsoidType):
    """A gml:Ellipsoid is a geometric figure that may be used to describe the
    approximate shape of the earth.

    In mathematical terms, it is a surface formed by the rotation of an
    ellipse about its minor axis.
    """

    class Meta:
        name = "Ellipsoid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pixel_in_cell: Optional[PixelInCell] = field(
        default=None,
        metadata={
            "name": "pixelInCell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class IndirectEntryType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_proxy: Optional[DefinitionProxy] = field(
        default=None,
        metadata={
            "name": "DefinitionProxy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class OperationParameterGroupType(AbstractGeneralOperationParameterType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    maximum_occurs: Optional[MaximumOccurs] = field(
        default=None,
        metadata={
            "name": "maximumOccurs",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_parameter: List["UsesParameter"] = field(
        default_factory=list,
        metadata={
            "name": "usesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    general_operation_parameter: List["GeneralOperationParameter"] = field(
        default_factory=list,
        metadata={
            "name": "generalOperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_parameter: List["IncludesParameter"] = field(
        default_factory=list,
        metadata={
            "name": "includesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter: List["Parameter"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationParameterType(AbstractGeneralOperationParameterType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OrientableCurve(OrientableCurveType):
    """OrientableCurve consists of a curve and an orientation.

    If the orientation is "+", then the OrientableCurve is identical to
    the baseCurve. If the orientation is "-", then the OrientableCurve
    is related to another AbstractCurve with a parameterization that
    reverses the sense of the curve traversal.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OrientableSurface(OrientableSurfaceType):
    """OrientableSurface consists of a surface and an orientation.

    If the orientation is "+", then the OrientableSurface is identical
    to the baseSurface. If the orientation is "-", then the
    OrientableSurface is a reference to a gml:AbstractSurface with an
    up-normal that reverses the direction for this OrientableSurface,
    the sense of "the top of the surface".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointArrayPropertyType:
    """Gml:PointArrayPropertyType is a container for an array of points.

    The elements are always contained inline in the array property,
    referencing geometry elements or arrays of geometry elements via
    XLinks is not supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    point: List[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PointPropertyType:
    """A property that has a point as its value domain may either be an appropriate
    geometry element encapsulated in an element of this type or an XLink reference
    to a remote geometry element (where remote includes geometry elements located
    elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PrimeMeridian1(PrimeMeridianType):
    """A gml:PrimeMeridian defines the origin from which longitude values are
    determined.

    The default value for the prime meridian gml:identifier value is
    "Greenwich".
    """

    class Meta:
        name = "PrimeMeridian"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalDatumBaseType(AbstractDatumType):
    """The TemporalDatumBaseType partially defines the origin of a temporal
    coordinate reference system.

    This type restricts the AbstractDatumType to remove the
    "anchorDefinition" and "realizationEpoch" elements.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    anchor_point: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    anchor_definition: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    realization_epoch: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeCoordinateSystem(TimeCoordinateSystemType):
    """A temporal coordinate system shall be based on a continuous interval scale
    defined in terms of a single time interval.

    The differences to ISO 19108 TM_CoordinateSystem are:
    -       the origin is specified either using the property gml:originPosition whose value is a direct time position, or using the property gml:origin whose model is gml:TimeInstantPropertyType; this permits more flexibility in representation and also supports referring to a value fixed elsewhere;
    -       the interval uses gml:TimeIntervalLengthType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeInstant(TimeInstantType):
    """
    Gml:TimeInstant acts as a zero-dimensional geometric primitive that represents
    an identifiable position in time.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeNode(TimeNodeType):
    """A time node is a zero-dimensional topological primitive that represents an
    identifiable node in time (it is equivalent to a point in space).

    A node may act as the termination or initiation of any number of
    time edges. A time node may be realised as a geometry, its position,
    whose value is a time instant.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimePeriod(TimePeriodType):
    """Gml:TimePeriod acts as a one-dimensional geometric primitive that represents
    an identifiable extent in time.

    The location in of a gml:TimePeriod is described by the temporal
    positions of the instants at which it begins and ends. The length of
    the period is equal to the temporal distance between the two
    bounding temporal positions. Both beginning and end may be described
    in terms of their direct position using gml:TimePositionType which
    is an XML Schema simple content type, or by reference to an
    indentifiable time instant using gml:TimeInstantPropertyType.
    Alternatively a limit of a gml:TimePeriod may use the conventional
    GML property model to make a reference to a time instant described
    elsewhere, or a limit may be indicated as a direct position.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPointProperty(TopoPointPropertyType):
    """
    The gml:topoPointProperty property element may be used in features to express
    their relationship to the referenced topology node.
    """

    class Meta:
        name = "topoPointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSurfaceProperty(TopoSurfacePropertyType):
    """
    The gml:topoSurfaceProperty property element may be used in features to express
    their relationship to the referenced topology faces.
    """

    class Meta:
        name = "topoSurfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCiParty2(AbstractCiPartyType2):
    """
    Information about the individual and/or organisation of the party.
    """

    class Meta:
        name = "AbstractCI_Party"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiIndividualType2(AbstractCiPartyType2):
    """
    :ivar position_name: position of the individual in an organisation
    """

    class Meta:
        name = "CI_Individual_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    position_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "positionName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class AbstractCiParty1(AbstractCiPartyType1):
    """
    Information about the individual and/or organisation of the party.
    """

    class Meta:
        name = "AbstractCI_Party"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class CiIndividualType1(AbstractCiPartyType1):
    """
    :ivar position_name: position of the individual in an organisation
    """

    class Meta:
        name = "CI_Individual_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    position_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "positionName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class UnitOfMeasurePropertyType2:
    class Meta:
        name = "UnitOfMeasure_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gmw/1.0"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomLengthPropertyType2:
    class Meta:
        name = "UomLength_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gmw/1.0"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeProcessParameter(LeProcessParameterType):
    """
    This was added as part of the 19115-2 Revision.
    """

    class Meta:
        name = "LE_ProcessParameter"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class SvParameter(SvParameterType):
    """
    Parameter information.
    """

    class Meta:
        name = "SV_Parameter"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class UnitOfMeasurePropertyType1:
    class Meta:
        name = "UnitOfMeasure_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomAnglePropertyType:
    class Meta:
        name = "UomAngle_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomAreaPropertyType:
    class Meta:
        name = "UomArea_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomLengthPropertyType1:
    class Meta:
        name = "UomLength_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomScalePropertyType:
    class Meta:
        name = "UomScale_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomTimePropertyType:
    class Meta:
        name = "UomTime_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomVelocityPropertyType:
    class Meta:
        name = "UomVelocity_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomVolumePropertyType:
    class Meta:
        name = "UomVolume_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiResponsiblePartyPropertyType:
    class Meta:
        name = "CI_ResponsibleParty_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_responsible_party: Optional[CiResponsibleParty] = field(
        default=None,
        metadata={
            "name": "CI_ResponsibleParty",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributionPropertyType1:
    class Meta:
        name = "MD_Distribution_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_distribution: Optional[MdDistribution1] = field(
        default=None,
        metadata={
            "name": "MD_Distribution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeorectifiedType1(MdGridSpatialRepresentationType1):
    class Meta:
        name = "MD_Georectified_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    check_point_availability: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "checkPointAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    check_point_description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "checkPointDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    corner_points: List[GmPointPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "cornerPoints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    center_point: Optional[GmPointPropertyType1] = field(
        default=None,
        metadata={
            "name": "centerPoint",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    point_in_pixel: Optional[MdPixelOrientationCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "pointInPixel",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    transformation_dimension_description: Optional[
        CharacterStringPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "transformationDimensionDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    transformation_dimension_mapping: List[
        CharacterStringPropertyType2
    ] = field(
        default_factory=list,
        metadata={
            "name": "transformationDimensionMapping",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "max_occurs": 2,
        },
    )


@dataclass
class CoordinateSystemAxisPropertyType:
    """
    Gml:CoordinateSystemAxisPropertyType is a property type for association roles
    to a coordinate system axis, either referencing or containing the definition of
    that axis.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    coordinate_system_axis: Optional[CoordinateSystemAxis] = field(
        default=None,
        metadata={
            "name": "CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EllipsoidPropertyType:
    """
    Gml:EllipsoidPropertyType is a property type for association roles to an
    ellipsoid, either referencing or containing the definition of that ellipsoid.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ellipsoid: Optional[Ellipsoid1] = field(
        default=None,
        metadata={
            "name": "Ellipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EngineeringDatum1(EngineeringDatumType):
    """Gml:EngineeringDatum defines the origin of an engineering coordinate
    reference system, and is used in a region around that origin.

    This origin may be fixed with respect to the earth (such as a
    defined point at a construction site), or be a defined point on a
    moving vehicle (such as on a ship or satellite).
    """

    class Meta:
        name = "EngineeringDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatum1(ImageDatumType):
    """Gml:ImageDatum defines the origin of an image coordinate reference system,
    and is used in a local context only.

    For an image datum, the anchor definition is usually either the
    centre of the image or the corner of the image. For more
    information, see ISO 19111 B.3.5.
    """

    class Meta:
        name = "ImageDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterGroup(OperationParameterGroupType):
    """Gml:OperationParameterGroup is the definition of a group of parameters used
    by an operation method.

    This complex type is expected to be used or extended for all
    applicable operation methods, without defining operation-method-
    specialized element names. The generalOperationParameter elements
    are an unordered list of associations to the set of operation
    parameters that are members of this group.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameter1(OperationParameterType):
    """Gml:OperationParameter is the definition of a parameter used by an operation
    method.

    Most parameter values are numeric, but other types of parameter
    values are possible. This complex type is expected to be used or
    extended for all operation methods, without defining operation-
    method-specialized element names.
    """

    class Meta:
        name = "OperationParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridianPropertyType:
    """
    Gml:PrimeMeridianPropertyType is a property type for association roles to a
    prime meridian, either referencing or containing the definition of that
    meridian.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    prime_meridian: Optional[PrimeMeridian1] = field(
        default=None,
        metadata={
            "name": "PrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RectifiedGridType(GridType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    origin: Optional[PointPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    offset_vector: List[VectorType] = field(
        default_factory=list,
        metadata={
            "name": "offsetVector",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TemporalDatumType(TemporalDatumBaseType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    origin: Optional[Origin] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeNodePropertyType:
    """
    Gml:TimeNodePropertyType provides for associating a gml:TimeNode with an
    object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimePeriodPropertyType:
    """
    Gml:TimePeriodPropertyType provides for associating a gml:TimePeriod with an
    object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class VerticalDatum1(VerticalDatumType):
    """
    Gml:VerticalDatum is a textual description and/or a set of parameters
    identifying a particular reference level surface used as a zero-height surface,
    including its position with respect to the Earth for any of the height types
    recognized by this International Standard.
    """

    class Meta:
        name = "VerticalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CenterOf(PointPropertyType):
    class Meta:
        name = "centerOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IndirectEntry(IndirectEntryType):
    class Meta:
        name = "indirectEntry"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointArrayProperty(PointArrayPropertyType):
    class Meta:
        name = "pointArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointMember(PointPropertyType):
    """
    This property element either references a Point via the XLink-attributes or
    contains the Point element.
    """

    class Meta:
        name = "pointMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointMembers(PointArrayPropertyType):
    """This property element contains a list of points.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "pointMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointProperty(PointPropertyType):
    """This property element either references a point via the XLink-attributes or
    contains the point element.

    pointProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for Point.
    """

    class Meta:
        name = "pointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointRep(PointPropertyType):
    class Meta:
        name = "pointRep"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Position(PointPropertyType):
    class Meta:
        name = "position"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiIndividual2(CiIndividualType2):
    """
    Information about the party if the party is an individual.
    """

    class Meta:
        name = "CI_Individual"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiIndividual1(CiIndividualType1):
    """
    Information about the party if the party is an individual.
    """

    class Meta:
        name = "CI_Individual"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class AbstractParameterPropertyType:
    class Meta:
        name = "Abstract_Parameter_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    le_process_parameter: Optional[LeProcessParameter] = field(
        default=None,
        metadata={
            "name": "LE_ProcessParameter",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeProcessParameterPropertyType:
    class Meta:
        name = "LE_ProcessParameter_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_process_parameter: Optional[LeProcessParameter] = field(
        default=None,
        metadata={
            "name": "LE_ProcessParameter",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvParameterPropertyType:
    class Meta:
        name = "SV_Parameter_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_parameter: Optional[SvParameter] = field(
        default=None,
        metadata={
            "name": "SV_Parameter",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiCitationType3(AbstractObjectType2):
    """
    Standardized resource reference.
    """

    class Meta:
        name = "CI_Citation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    title: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    alternate_title: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "alternateTitle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    date: List[CiDatePropertyType3] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    edition: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    edition_date: Optional[DatePropertyType2] = field(
        default=None,
        metadata={
            "name": "editionDate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    identifier: List["MdIdentifierPropertyType2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    cited_responsible_party: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "citedResponsibleParty",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    presentation_form: List[CiPresentationFormCodePropertyType3] = field(
        default_factory=list,
        metadata={
            "name": "presentationForm",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    series: Optional[CiSeriesPropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    other_citation_details: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "otherCitationDetails",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    collective_title: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "collectiveTitle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    isbn: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "ISBN",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    issn: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "ISSN",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DqQuantitativeResultType1(AbstractDqResultType1):
    """Quantitative_conformance_measure from Quality Procedures.

    -  - Renamed to remove implied use limitation -  - OCL - -- result is type specified by valueDomain - result.tupleType = valueDomain
    """

    class Meta:
        name = "DQ_QuantitativeResult_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    value_type: Optional[RecordTypePropertyType2] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    value_unit: Optional[UnitOfMeasurePropertyType1] = field(
        default=None,
        metadata={
            "name": "valueUnit",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    error_statistic: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "errorStatistic",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    value: List[RecordPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class MdBandType1(MdRangeDimensionType1):
    class Meta:
        name = "MD_Band_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    max_value: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "maxValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    min_value: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "minValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    units: Optional[UomLengthPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    peak_response: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "peakResponse",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    bits_per_value: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "bitsPerValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    tone_gradation: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "toneGradation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    scale_factor: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "scaleFactor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    offset: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdDistributorType1(AbstractObjectType2):
    """
    Information about the distributor.
    """

    class Meta:
        name = "MD_Distributor_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    distributor_contact: Optional[CiResponsiblePartyPropertyType] = field(
        default=None,
        metadata={
            "name": "distributorContact",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    distribution_order_process: List[
        MdStandardOrderProcessPropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "distributionOrderProcess",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distributor_format: List[MdFormatPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "distributorFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distributor_transfer_options: List[
        MdDigitalTransferOptionsPropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "distributorTransferOptions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdExtendedElementInformationType1(AbstractObjectType2):
    """
    New metadata element, not found in ISO 19115, which is required to describe
    geographic data.
    """

    class Meta:
        name = "MD_ExtendedElementInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    short_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "shortName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    domain_code: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "domainCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    definition: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    obligation: Optional[MdObligationCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    condition: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    data_type: Optional[MdDatatypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "dataType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    maximum_occurrence: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "maximumOccurrence",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    domain_value: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "domainValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    parent_entity: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "parentEntity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    rule: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    rationale: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class MdGeorectified1(MdGeorectifiedType1):
    class Meta:
        name = "MD_Georectified"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMaintenanceInformationType1(AbstractObjectType2):
    """
    Information about the scope and frequency of updating.
    """

    class Meta:
        name = "MD_MaintenanceInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    maintenance_and_update_frequency: Optional[
        MdMaintenanceFrequencyCodePropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "maintenanceAndUpdateFrequency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    date_of_next_update: Optional[DatePropertyType2] = field(
        default=None,
        metadata={
            "name": "dateOfNextUpdate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    user_defined_maintenance_frequency: Optional[
        TmPeriodDurationPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "userDefinedMaintenanceFrequency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    update_scope: List[MdScopeCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "updateScope",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    update_scope_description: List[MdScopeDescriptionPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "updateScopeDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    maintenance_note: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "maintenanceNote",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdUsageType1(AbstractObjectType2):
    """
    Brief description of ways in which the dataset is currently used.
    """

    class Meta:
        name = "MD_Usage_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    specific_usage: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "specificUsage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    usage_date_time: Optional[DateTimePropertyType2] = field(
        default=None,
        metadata={
            "name": "usageDateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    user_determined_limitations: Optional[
        CharacterStringPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "userDeterminedLimitations",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    user_contact_info: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "userContactInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class PtLocaleContainerType2:
    class Meta:
        name = "PT_LocaleContainer_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    locale: Optional[PtLocalePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    date: List[CiDatePropertyType3] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    responsible_party: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "responsibleParty",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    localised_string: List[LocalisedCharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "localisedString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractGeneralOperationParameterPropertyType:
    """
    Gml:AbstractGeneralOperationParameterPropertyType is a property type for
    association roles to an operation parameter or group, either referencing or
    containing the definition of that parameter or group.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_parameter_group: Optional[OperationParameterGroup] = field(
        default=None,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: Optional[OperationParameter1] = field(
        default=None,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractGriddedSurfaceType(AbstractParametricCurveSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rows: Optional["AbstractGriddedSurfaceType.Rows"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    rows_attribute: Optional[int] = field(
        default=None,
        metadata={
            "name": "rows",
            "type": "Attribute",
        },
    )
    columns: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    @dataclass
    class Rows:
        row: List["AbstractGriddedSurfaceType.Rows.Row"] = field(
            default_factory=list,
            metadata={
                "name": "Row",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
                "min_occurs": 1,
            },
        )

        @dataclass
        class Row:
            pos_list: Optional[PosList] = field(
                default=None,
                metadata={
                    "name": "posList",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/gml/3.2",
                },
            )
            pos: List[Pos] = field(
                default_factory=list,
                metadata={
                    "type": "Element",
                    "namespace": "http://www.opengis.net/gml/3.2",
                },
            )
            point_property: List[PointProperty] = field(
                default_factory=list,
                metadata={
                    "name": "pointProperty",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/gml/3.2",
                },
            )


@dataclass
class ArcByCenterPointType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: Optional[PointProperty] = field(
        default=None,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: Optional[PointRep] = field(
        default=None,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    radius: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    start_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "startAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "endAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC_CENTER_POINT_WITH_RADIUS,
        metadata={
            "type": "Attribute",
        },
    )
    num_arc: int = field(
        init=False,
        default=1,
        metadata={
            "name": "numArc",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ArcStringByBulgeType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bulge: List[float] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    normal: List[VectorType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC2_POINT_WITH_BULGE,
        metadata={
            "type": "Attribute",
        },
    )
    num_arc: Optional[int] = field(
        default=None,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class ArcStringType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "type": "Attribute",
        },
    )
    num_arc: Optional[int] = field(
        default=None,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class BsplineType(AbstractCurveSegmentType):
    class Meta:
        name = "BSplineType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    degree: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    knot: List[KnotPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 2,
        },
    )
    interpolation: CurveInterpolationType = field(
        default=CurveInterpolationType.POLYNOMIAL_SPLINE,
        metadata={
            "type": "Attribute",
        },
    )
    is_polynomial: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isPolynomial",
            "type": "Attribute",
        },
    )
    knot_type: Optional[KnotTypesType] = field(
        default=None,
        metadata={
            "name": "knotType",
            "type": "Attribute",
        },
    )


@dataclass
class CubicSplineType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vector_at_start: Optional[VectorType] = field(
        default=None,
        metadata={
            "name": "vectorAtStart",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    vector_at_end: Optional[VectorType] = field(
        default=None,
        metadata={
            "name": "vectorAtEnd",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CUBIC_SPLINE,
        metadata={
            "type": "Attribute",
        },
    )
    degree: int = field(
        init=False,
        default=3,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class EngineeringDatumPropertyType:
    """
    Gml:EngineeringDatumPropertyType is a property type for association roles to an
    engineering datum, either referencing or containing the definition of that
    datum.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    engineering_datum: Optional[EngineeringDatum1] = field(
        default=None,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeodesicStringType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.GEODESIC,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ImageDatumPropertyType:
    """
    Gml:ImageDatumPropertyType is a property type for association roles to an image
    datum, either referencing or containing the definition of that datum.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    image_datum: Optional[ImageDatum1] = field(
        default=None,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LineStringSegmentType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.LINEAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LineStringType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearRingType(AbstractRingType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: List[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiPointType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    point_member: List[PointMember] = field(
        default_factory=list,
        metadata={
            "name": "pointMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_members: Optional[PointMembers] = field(
        default=None,
        metadata={
            "name": "pointMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationParameterGroupPropertyType:
    """
    Gml:OperationParameterPropertyType is a property type for association roles to
    an operation parameter group, either referencing or containing the definition
    of that parameter group.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_parameter_group: Optional[OperationParameterGroup] = field(
        default=None,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationParameterPropertyType:
    """
    Gml:OperationParameterPropertyType is a property type for association roles to
    an operation parameter, either referencing or containing the definition of that
    parameter.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_parameter: Optional[OperationParameter1] = field(
        default=None,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RectifiedGrid(RectifiedGridType):
    """A rectified grid is a grid for which there is an affine transformation
    between the grid coordinates and the coordinates of an external coordinate
    reference system.

    It is defined by specifying the position (in some geometric space)
    of the grid "origin" and of the vectors that specify the post
    locations. Note that the grid limits (post indexes) and axis name
    properties are inherited from gml:GridType and that
    gml:RectifiedGrid adds a gml:origin property (contains or references
    a gml:Point) and a set of gml:offsetVector properties.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalDatum1(TemporalDatumType):
    """A gml:TemporalDatum defines the origin of a Temporal Reference System.

    This type omits the "anchorDefinition" and "realizationEpoch"
    elements and adds the "origin" element with the dateTime type.
    """

    class Meta:
        name = "TemporalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCalendarEraType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    reference_event: Optional[StringOrRefType] = field(
        default=None,
        metadata={
            "name": "referenceEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    reference_date: Optional[Union[XmlDate, XmlPeriod]] = field(
        default=None,
        metadata={
            "name": "referenceDate",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    julian_reference: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "julianReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    epoch_of_use: Optional[TimePeriodPropertyType] = field(
        default=None,
        metadata={
            "name": "epochOfUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeEdgeType(AbstractTimeTopologyPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    start: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    end: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    extent: Optional[TimePeriodPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeOrdinalEraType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    related_time: List[RelatedTimeType] = field(
        default_factory=list,
        metadata={
            "name": "relatedTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    start: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    extent: Optional[TimePeriodPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    member: List["TimeOrdinalEraPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    group: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalDatumPropertyType:
    """
    Gml:VerticalDatumPropertyType is property type for association roles to a
    vertical datum, either referencing or containing the definition of that datum.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    vertical_datum: Optional[VerticalDatum1] = field(
        default=None,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Axis(CoordinateSystemAxisPropertyType):
    """The gml:axis property is an association role (ordered sequence) to the
    coordinate system axes included in this coordinate system.

    The coordinate values in a coordinate tuple shall be recorded in the
    order in which the coordinate system axes associations are recorded,
    whenever those coordinates use a coordinate reference system that
    uses this coordinate system. The gml:AggregationAttributeGroup
    should be used to specify that the axis objects are ordered.
    """

    class Meta:
        name = "axis"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystemAxisRef(CoordinateSystemAxisPropertyType):
    class Meta:
        name = "coordinateSystemAxisRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidRef(EllipsoidPropertyType):
    class Meta:
        name = "ellipsoidRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Ellipsoid2(EllipsoidPropertyType):
    """
    Gml:ellipsoid is an association role to the ellipsoid used by this geodetic
    datum.
    """

    class Meta:
        name = "ellipsoid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridianRef(PrimeMeridianPropertyType):
    class Meta:
        name = "primeMeridianRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridian2(PrimeMeridianPropertyType):
    """
    Gml:primeMeridian is an association role to the prime meridian used by this
    geodetic datum.
    """

    class Meta:
        name = "primeMeridian"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesAxis(CoordinateSystemAxisPropertyType):
    class Meta:
        name = "usesAxis"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesEllipsoid(EllipsoidPropertyType):
    class Meta:
        name = "usesEllipsoid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesPrimeMeridian(PrimeMeridianPropertyType):
    class Meta:
        name = "usesPrimeMeridian"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiIndividualPropertyType2:
    class Meta:
        name = "CI_Individual_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_individual: Optional[CiIndividual2] = field(
        default=None,
        metadata={
            "name": "CI_Individual",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiIndividualPropertyType1:
    class Meta:
        name = "CI_Individual_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_individual: Optional[CiIndividual1] = field(
        default=None,
        metadata={
            "name": "CI_Individual",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvOperationMetadataType(AbstractObjectType1):
    """
    :ivar operation_name: a unique identifier for this interface
    :ivar distributed_computing_platform: distributed computing
        platforms on which the operation has been implemented
    :ivar operation_description: free text description of the intent of
        the operation and the results of the operation
    :ivar invocation_name: the name used to invoke this interface within
        the context of the DCP. The name is identical for all DCPs.
    :ivar connect_point: handle for accessing the service interface
    :ivar parameter:
    :ivar depends_on:
    """

    class Meta:
        name = "SV_OperationMetadata_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    operation_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "operationName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )
    distributed_computing_platform: List[DcplistPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "distributedComputingPlatform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "min_occurs": 1,
        },
    )
    operation_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "operationDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    invocation_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "invocationName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    connect_point: List[AbstractOnlineResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "connectPoint",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "min_occurs": 1,
        },
    )
    parameter: List[SvParameterPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    depends_on: List["SvOperationMetadataPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "dependsOn",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )


@dataclass
class CiCitation3(CiCitationType3):
    class Meta:
        name = "CI_Citation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqQuantitativeResult1(DqQuantitativeResultType1):
    class Meta:
        name = "DQ_QuantitativeResult"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdBand1(MdBandType1):
    class Meta:
        name = "MD_Band"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistributor1(MdDistributorType1):
    class Meta:
        name = "MD_Distributor"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdExtendedElementInformation1(MdExtendedElementInformationType1):
    class Meta:
        name = "MD_ExtendedElementInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeorectifiedPropertyType1:
    class Meta:
        name = "MD_Georectified_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_georectified: Optional[MdGeorectified1] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceInformation1(MdMaintenanceInformationType1):
    class Meta:
        name = "MD_MaintenanceInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdUsage1(MdUsageType1):
    class Meta:
        name = "MD_Usage"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class PtLocaleContainer2(PtLocaleContainerType2):
    class Meta:
        name = "PT_LocaleContainer"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractCoordinateSystemType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_axis: List[UsesAxis] = field(
        default_factory=list,
        metadata={
            "name": "usesAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    axis: List[Axis] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGriddedSurface(AbstractGriddedSurfaceType):
    """If provided, rows gives the number of rows, columns the number of columns in
    the parameter grid.

    The parameter grid is represented by an instance of the
    gml:PointGrid group. The element provides a substitution group head
    for the surface patches based on a grid. All derived subtypes shall
    conform to the constraints specified in ISO 19107:2003, 6.4.41.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcByBulgeType(ArcStringByBulgeType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    num_arc: int = field(
        init=False,
        default=1,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class ArcByCenterPoint(ArcByCenterPointType):
    """This variant of the arc requires that the points on the arc shall be
    computed instead of storing the coordinates directly.

    The single control point is the center point of the arc plus the
    radius and the bearing at start and end. This representation can be
    used only in 2D. The element radius specifies the radius of the arc.
    The element startAngle specifies the bearing of the arc at the
    start. The element endAngle specifies the bearing of the arc at the
    end. The interpolation is fixed as
    "circularArcCenterPointWithRadius". Since this type describes always
    a single arc, the attribute "numArc" is fixed to "1". The content
    model follows the general pattern for the encoding of curve
    segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcString(ArcStringType):
    """An ArcString is a curve segment that uses three-point circular arc
    interpolation ("circularArc3Points").

    The number of arcs in the arc string may be explicitly stated in the
    attribute numArc. The number of control points in the arc string
    shall be 2 * numArc + 1. The content model follows the general
    pattern for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcStringByBulge(ArcStringByBulgeType):
    """This variant of the arc computes the mid points of the arcs instead of
    storing the coordinates directly.

    The control point sequence consists of the start and end points of
    each arc plus the bulge (see ISO 19107:2003, 6.4.17.2). The normal
    is a vector normal (perpendicular) to the chord of the arc (see ISO
    19107:2003, 6.4.17.4). The interpolation is fixed as
    "circularArc2PointWithBulge". The number of arcs in the arc string
    may be explicitly stated in the attribute numArc. The number of
    control points in the arc string shall be numArc + 1. The content
    model follows the general pattern for the encoding of curve
    segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcType1(ArcStringType):
    class Meta:
        name = "ArcType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    num_arc: int = field(
        init=False,
        default=1,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class Bspline(BsplineType):
    """A B-Spline is a piecewise parametric polynomial or rational curve described
    in terms of control points and basis functions as specified in ISO 19107:2003,
    6.4.30.

    Therefore, interpolation may be either "polynomialSpline" or
    "rationalSpline" depending on the interpolation type; default is
    "polynomialSpline". degree shall be the degree of the polynomial
    used for interpolation in this spline. knot shall be the sequence of
    distinct knots used to define the spline basis functions (see ISO
    19107:2003, 6.4.26.2). The attribute isPolynomial shall be set to
    "true" if this is a polynomial spline (see ISO 19107:2003,
    6.4.30.5). The attribute knotType shall provide the type of knot
    distribution used in defining this spline (see ISO 19107:2003,
    6.4.30.4). The content model follows the general pattern for the
    encoding of curve segments.
    """

    class Meta:
        name = "BSpline"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BezierType(BsplineType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.POLYNOMIAL_SPLINE,
        metadata={
            "type": "Attribute",
        },
    )
    is_polynomial: bool = field(
        init=False,
        default=True,
        metadata={
            "name": "isPolynomial",
            "type": "Attribute",
        },
    )
    knot_type: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CircleByCenterPointType(ArcByCenterPointType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    start_angle: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_angle: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ConeType(AbstractGriddedSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    horizontal_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "horizontalCurveType",
            "type": "Attribute",
        },
    )
    vertical_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.LINEAR,
        metadata={
            "name": "verticalCurveType",
            "type": "Attribute",
        },
    )


@dataclass
class CubicSpline(CubicSplineType):
    """The number of control points shall be at least three.

    vectorAtStart is the unit tangent vector at the start point of the
    spline. vectorAtEnd is the unit tangent vector at the end point of
    the spline. Only the direction of the vectors shall be used to
    determine the shape of the cubic spline, not their length.
    interpolation is fixed as "cubicSpline". degree shall be the degree
    of the polynomial used for the interpolation in this spline.
    Therefore the degree for a cubic spline is fixed to "3". The content
    model follows the general pattern for the encoding of curve
    segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylinderType(AbstractGriddedSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    horizontal_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "horizontalCurveType",
            "type": "Attribute",
        },
    )
    vertical_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.LINEAR,
        metadata={
            "name": "verticalCurveType",
            "type": "Attribute",
        },
    )


@dataclass
class GeodesicString(GeodesicStringType):
    """A sequence of geodesic segments.

    The number of control points shall be at least two. interpolation is
    fixed as "geodesic". The content model follows the general pattern
    for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodesicType(GeodesicStringType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_prime_meridian: Optional[UsesPrimeMeridian] = field(
        default=None,
        metadata={
            "name": "usesPrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    prime_meridian: Optional[PrimeMeridian2] = field(
        default=None,
        metadata={
            "name": "primeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_ellipsoid: Optional[UsesEllipsoid] = field(
        default=None,
        metadata={
            "name": "usesEllipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoid: Optional[Ellipsoid2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LineString(LineStringType):
    """A LineString is a special curve that consists of a single segment with
    linear interpolation.

    It is defined by two or more coordinate tuples, with linear
    interpolation between them. The number of direct positions in the
    list shall be at least two.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LineStringSegment(LineStringSegmentType):
    """A LineStringSegment is a curve segment that is defined by two or more
    control points including the start and end point, with linear interpolation
    between them.

    The content model follows the general pattern for the encoding of
    curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearRing(LinearRingType):
    """A LinearRing is defined by four or more coordinate tuples, with linear
    interpolation between them; the first and last coordinates shall be coincident.

    The number of direct positions in the list shall be at least four.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPoint(MultiPointType):
    """A gml:MultiPoint consists of one or more gml:Points.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:pointMember) or the array property
    (gml:pointMembers). It is also valid to use both the "standard" and
    the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphereType(AbstractGriddedSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    horizontal_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "horizontalCurveType",
            "type": "Attribute",
        },
    )
    vertical_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "verticalCurveType",
            "type": "Attribute",
        },
    )


@dataclass
class TemporalDatumPropertyType:
    """
    Gml:TemporalDatumPropertyType is a property type for association roles to a
    temporal datum, either referencing or containing the definition of that datum.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_datum: Optional[TemporalDatum1] = field(
        default=None,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeCalendarEra(TimeCalendarEraType):
    """Gml:TimeCalendarEra inherits basic properties from gml:DefinitionType and
    has the following additional properties:

    -       gml:referenceEvent is the name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.  This is given as text or using a link to description held elsewhere.
    -       gml:referenceDate specifies the date of the referenceEvent expressed as a date in the given calendar.  In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.
    -       gml:julianReference specifies the Julian date that corresponds to the reference date.  The Julian day number is an integer value; the Julian date is a decimal value that allows greater resolution.  Transforming calendar dates to and from Julian dates provides a relatively simple basis for transforming dates from one calendar to another.
    -       gml:epochOfUse is the period for which the calendar era was used as a basis for dating.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeEdge(TimeEdgeType):
    """A time edge is a one-dimensional topological primitive.

    It is an open interval that starts and ends at a node. The edge may
    be realised as a geometry whose value is a time period.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeOrdinalEra(TimeOrdinalEraType):
    """Its content model follows the pattern of gml:TimeEdge, inheriting standard
    properties from gml:DefinitionType, and adding gml:start, gml:end and
    gml:extent properties, a set of gml:member properties which indicate ordered
    gml:TimeOrdinalEra elements, and a gml:group property which points to the
    parent era.

    The recursive inclusion of gml:TimeOrdinalEra elements allow the
    construction of an arbitrary depth hierarchical ordinal reference
    schema, such that an ordinal era at a given level of the hierarchy
    includes a sequence of shorter, coterminous ordinal eras.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralOperationParameterRef(
    AbstractGeneralOperationParameterPropertyType
):
    class Meta:
        name = "abstractGeneralOperationParameterRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringDatumRef(EngineeringDatumPropertyType):
    class Meta:
        name = "engineeringDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringDatum2(EngineeringDatumPropertyType):
    """
    Gml:engineeringDatum is an association role to the engineering datum used by
    this CRS.
    """

    class Meta:
        name = "engineeringDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeneralOperationParameter(AbstractGeneralOperationParameterPropertyType):
    class Meta:
        name = "generalOperationParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Group(OperationParameterGroupPropertyType):
    """
    Gml:group is an association role to the operation parameter group for which
    this element provides parameter values.
    """

    class Meta:
        name = "group"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatumRef(ImageDatumPropertyType):
    class Meta:
        name = "imageDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatum2(ImageDatumPropertyType):
    """
    Gml:imageDatum is an association role to the image datum used by this CRS.
    """

    class Meta:
        name = "imageDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IncludesParameter(AbstractGeneralOperationParameterPropertyType):
    class Meta:
        name = "includesParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterGroupRef(OperationParameterPropertyType):
    class Meta:
        name = "operationParameterGroupRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterRef(OperationParameterPropertyType):
    class Meta:
        name = "operationParameterRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameter2(OperationParameterPropertyType):
    """
    Gml:operationParameter is an association role to the operation parameter of
    which this is a value.
    """

    class Meta:
        name = "operationParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Parameter(AbstractGeneralOperationParameterPropertyType):
    """
    Gml:parameter is an association to an operation parameter or parameter group.
    """

    class Meta:
        name = "parameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesEngineeringDatum(EngineeringDatumPropertyType):
    class Meta:
        name = "usesEngineeringDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesImageDatum(ImageDatumPropertyType):
    class Meta:
        name = "usesImageDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesParameter(AbstractGeneralOperationParameterPropertyType):
    class Meta:
        name = "usesParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesVerticalDatum(VerticalDatumPropertyType):
    class Meta:
        name = "usesVerticalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueOfParameter(OperationParameterPropertyType):
    class Meta:
        name = "valueOfParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValuesOfGroup(OperationParameterGroupPropertyType):
    class Meta:
        name = "valuesOfGroup"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalDatumRef(VerticalDatumPropertyType):
    class Meta:
        name = "verticalDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalDatum2(VerticalDatumPropertyType):
    """
    Gml:verticalDatum is an association role to the vertical datum used by this
    CRS.
    """

    class Meta:
        name = "verticalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiOrganisationType1(AbstractCiPartyType1):
    """
    :ivar logo: Graphic identifying organization
    :ivar individual:
    """

    class Meta:
        name = "CI_Organisation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    logo: List["MdBrowseGraphicPropertyType1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    individual: List[CiIndividualPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class TmPrimitivePropertyType2:
    class Meta:
        name = "TM_Primitive_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gmw/1.0"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvOperationMetadata(SvOperationMetadataType):
    """
    Describes the signature of one and only one method provided by the service.
    """

    class Meta:
        name = "SV_OperationMetadata"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class CiCitationPropertyType3:
    class Meta:
        name = "CI_Citation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_citation: Optional[CiCitation3] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqQuantitativeResultPropertyType1:
    class Meta:
        name = "DQ_QuantitativeResult_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_quantitative_result: Optional[DqQuantitativeResult1] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBandPropertyType1:
    class Meta:
        name = "MD_Band_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_band: Optional[MdBand1] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdExtendedElementInformationPropertyType1:
    class Meta:
        name = "MD_ExtendedElementInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_extended_element_information: Optional[
        MdExtendedElementInformation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_ExtendedElementInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceInformationPropertyType1:
    class Meta:
        name = "MD_MaintenanceInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_maintenance_information: Optional[MdMaintenanceInformation1] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRangeDimensionPropertyType1:
    class Meta:
        name = "MD_RangeDimension_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_band: Optional[MdBand1] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_range_dimension: Optional[MdRangeDimension1] = field(
        default=None,
        metadata={
            "name": "MD_RangeDimension",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdUsagePropertyType1:
    class Meta:
        name = "MD_Usage_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_usage: Optional[MdUsage1] = field(
        default=None,
        metadata={
            "name": "MD_Usage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtLocaleContainerPropertyType2:
    class Meta:
        name = "PT_LocaleContainer_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    pt_locale_container: Optional[PtLocaleContainer2] = field(
        default=None,
        metadata={
            "name": "PT_LocaleContainer",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TmPrimitivePropertyType1:
    class Meta:
        name = "TM_Primitive_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gts"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCoordinateSystem(AbstractCoordinateSystemType):
    """Gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-
    repeating sequence of coordinate system axes that spans a given coordinate
    space.

    A CS is derived from a set of mathematical rules for specifying how
    coordinates in a given space are to be assigned to points. The
    coordinate values in a coordinate tuple shall be recorded in the
    order in which the coordinate system axes associations are recorded.
    This abstract complex type shall not be used, extended, or
    restricted, in an Application Schema, to define a concrete subtype
    with a meaning equivalent to a concrete subtype specified in this
    document.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffineCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "AffineCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcByBulge(ArcByBulgeType):
    """An ArcByBulge is an arc string with only one arc unit, i.e. two control
    points, one bulge and one normal vector.

    As arc is an arc string consisting of a single arc, the attribute
    "numArc" is fixed to "1".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Arc1(ArcType1):
    """An Arc is an arc string with only one arc unit, i.e. three control points
    including the start and end point.

    As arc is an arc string consisting of a single arc, the attribute
    "numArc" is fixed to "1".
    """

    class Meta:
        name = "Arc"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Bezier(BezierType):
    """Bezier curves are polynomial splines that use Bezier or Bernstein
    polynomials for interpolation purposes.

    It is a special case of the B-Spline curve with two knots. degree
    shall be the degree of the polynomial used for interpolation in this
    spline. knot shall be the sequence of distinct knots used to define
    the spline basis functions. interpolation is fixed as
    "polynomialSpline". isPolynomial is fixed as "true". knotType is not
    relevant for Bezier curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "CartesianCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CircleByCenterPoint(CircleByCenterPointType):
    """A gml:CircleByCenterPoint is an gml:ArcByCenterPoint with identical start
    and end angle to form a full circle.

    Again, this representation can be used only in 2D.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CircleType(ArcType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Cone(ConeType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Cylinder(CylinderType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "CylindricalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "EllipsoidalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Geodesic(GeodesicType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatum1(GeodeticDatumType):
    """
    Gml:GeodeticDatum is a geodetic datum defines the precise location and
    orientation in 3-dimensional space of a defined ellipsoid (or sphere), or of a
    Cartesian coordinate system centered in this ellipsoid (or sphere).
    """

    class Meta:
        name = "GeodeticDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LineStringSegmentArrayPropertyType:
    """
    Gml:LineStringSegmentArrayPropertyType provides a container for line strings.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    line_string_segment: List[LineStringSegment] = field(
        default_factory=list,
        metadata={
            "name": "LineStringSegment",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "LinearCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearRingPropertyType:
    """
    A property with the content model of gml:LinearRingPropertyType encapsulates a
    linear ring to represent a component of a surface boundary.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class MultiPointPropertyType:
    """A property that has a collection of points as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ObliqueCartesianCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "ObliqueCartesianCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ParameterValueGroupType(AbstractGeneralParameterValueType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    includes_value: List["IncludesValue"] = field(
        default_factory=list,
        metadata={
            "name": "includesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_value: List["UsesValue"] = field(
        default_factory=list,
        metadata={
            "name": "usesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: List["ParameterValue2"] = field(
        default_factory=list,
        metadata={
            "name": "parameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    values_of_group: Optional[ValuesOfGroup] = field(
        default=None,
        metadata={
            "name": "valuesOfGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    group: Optional[Group] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ParameterValueType(AbstractGeneralParameterValueType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Value] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dms_angle_value: Optional[DmsAngleValue] = field(
        default=None,
        metadata={
            "name": "dmsAngleValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    string_value: Optional[StringValue] = field(
        default=None,
        metadata={
            "name": "stringValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    integer_value: Optional[IntegerValue] = field(
        default=None,
        metadata={
            "name": "integerValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_value: Optional[BooleanValue] = field(
        default=None,
        metadata={
            "name": "booleanValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_list: Optional[ValueList] = field(
        default=None,
        metadata={
            "name": "valueList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    integer_value_list: Optional[IntegerValueList] = field(
        default=None,
        metadata={
            "name": "integerValueList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_file: Optional[ValueFile] = field(
        default=None,
        metadata={
            "name": "valueFile",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_of_parameter: Optional[ValueOfParameter] = field(
        default=None,
        metadata={
            "name": "valueOfParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: Optional[OperationParameter2] = field(
        default=None,
        metadata={
            "name": "operationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class PolarCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "PolarCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Sphere(SphereType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "SphericalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "TemporalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "TimeCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCalendarEraPropertyType:
    """
    Gml:TimeCalendarEraPropertyType provides for associating a gml:TimeCalendarEra
    with an object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_calendar_era: Optional[TimeCalendarEra] = field(
        default=None,
        metadata={
            "name": "TimeCalendarEra",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeOrdinalEraPropertyType:
    """
    Gml:TimeOrdinalEraPropertyType provides for associating a gml:TimeOrdinalEra
    with an object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_ordinal_era: Optional[TimeOrdinalEra] = field(
        default=None,
        metadata={
            "name": "TimeOrdinalEra",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeTopologyPrimitivePropertyType:
    """
    Gml:TimeTopologyPrimitivePropertyType provides for associating a
    gml:AbstractTimeTopologyPrimitive with an object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class UserDefinedCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "UserDefinedCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "VerticalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FormulaCitation:
    """
    Gml:formulaCitation provides a reference to a publication giving the formula(s)
    or procedure used by an coordinate operation method.
    """

    class Meta:
        name = "formulaCitation"
        namespace = "http://www.opengis.net/gml/3.2"

    ci_citation: Optional[CiCitation3] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalDatumRef(TemporalDatumPropertyType):
    class Meta:
        name = "temporalDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalDatum2(TemporalDatumPropertyType):
    """
    Gml:temporalDatum is an association role to the temporal datum used by this
    CRS.
    """

    class Meta:
        name = "temporalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesTemporalDatum(TemporalDatumPropertyType):
    class Meta:
        name = "usesTemporalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiOrganisation1(CiOrganisationType1):
    """
    Information about the party if the party is an organisation.
    """

    class Meta:
        name = "CI_Organisation"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class ExTemporalExtentType2(AbstractObjectType1):
    """
    :ivar extent: period for the content of the resource
    """

    class Meta:
        name = "EX_TemporalExtent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    extent: Optional[TmPrimitivePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )


@dataclass
class SvOperationMetadataPropertyType:
    class Meta:
        name = "SV_OperationMetadata_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_operation_metadata: Optional[SvOperationMetadata] = field(
        default=None,
        metadata={
            "name": "SV_OperationMetadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqConformanceResultType1(AbstractDqResultType1):
    """quantitative_result from Quality Procedures -  - renamed to remove implied use limitiation."""

    class Meta:
        name = "DQ_ConformanceResult_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    specification: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    explanation: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    pass_value: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "pass",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class ExTemporalExtentType1(AbstractObjectType2):
    """
    Time period covered by the content of the dataset.
    """

    class Meta:
        name = "EX_TemporalExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    extent: Optional[TmPrimitivePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdApplicationSchemaInformationType1(AbstractObjectType2):
    """
    Information about the application schema used to build the dataset.
    """

    class Meta:
        name = "MD_ApplicationSchemaInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    schema_language: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "schemaLanguage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    constraint_language: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "constraintLanguage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    schema_ascii: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "schemaAscii",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    graphics_file: Optional[BinaryPropertyType2] = field(
        default=None,
        metadata={
            "name": "graphicsFile",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    software_development_file: Optional[BinaryPropertyType2] = field(
        default=None,
        metadata={
            "name": "softwareDevelopmentFile",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    software_development_file_format: Optional[
        CharacterStringPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "softwareDevelopmentFileFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdCoverageDescriptionType1(AbstractMdContentInformationType1):
    """
    Information about the domain of the raster cell.
    """

    class Meta:
        name = "MD_CoverageDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    attribute_description: Optional[RecordTypePropertyType2] = field(
        default=None,
        metadata={
            "name": "attributeDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    content_type: Optional[MdCoverageContentTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "contentType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    dimension: List[MdRangeDimensionPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdFeatureCatalogueDescriptionType1(AbstractMdContentInformationType1):
    """
    Information identifing the feature catalogue.
    """

    class Meta:
        name = "MD_FeatureCatalogueDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    compliance_code: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "complianceCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    included_with_dataset: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "includedWithDataset",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    feature_types: List[GenericNamePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "featureTypes",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_catalogue_citation: List[CiCitationPropertyType3] = field(
        default_factory=list,
        metadata={
            "name": "featureCatalogueCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class MdGeoreferenceableType1(MdGridSpatialRepresentationType1):
    class Meta:
        name = "MD_Georeferenceable_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    control_point_availability: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "controlPointAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    orientation_parameter_availability: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "orientationParameterAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    orientation_parameter_description: Optional[
        CharacterStringPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "orientationParameterDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    georeferenced_parameters: Optional[RecordPropertyType2] = field(
        default=None,
        metadata={
            "name": "georeferencedParameters",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    parameter_citation: List[CiCitationPropertyType3] = field(
        default_factory=list,
        metadata={
            "name": "parameterCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdIdentifierType2(AbstractObjectType2):
    class Meta:
        name = "MD_Identifier_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    authority: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    code: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdKeywordsType1(AbstractObjectType2):
    """
    Keywords, their type and reference source.
    """

    class Meta:
        name = "MD_Keywords_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    keyword: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    type_value: Optional[MdKeywordTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    thesaurus_name: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "name": "thesaurusName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdMetadataExtensionInformationType1(AbstractObjectType2):
    """
    Information describing metadata extensions.
    """

    class Meta:
        name = "MD_MetadataExtensionInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    extension_on_line_resource: Optional[
        CiOnlineResourcePropertyType3
    ] = field(
        default=None,
        metadata={
            "name": "extensionOnLineResource",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    extended_element_information: List[
        MdExtendedElementInformationPropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "extendedElementInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdPortrayalCatalogueReferenceType1(AbstractObjectType2):
    """
    Information identifing the portrayal catalogue used.
    """

    class Meta:
        name = "MD_PortrayalCatalogueReference_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    portrayal_catalogue_citation: List[CiCitationPropertyType3] = field(
        default_factory=list,
        metadata={
            "name": "portrayalCatalogueCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class AffineCs1(AffineCstype):
    """Gml:AffineCS is a two- or three-dimensional coordinate system with straight
    axes that are not necessarily orthogonal.

    An AffineCS shall have two or three gml:axis property elements; the
    number of property elements shall equal the dimension of the CS.
    """

    class Meta:
        name = "AffineCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCs1(CartesianCstype):
    """Gml:CartesianCS is a 1-, 2-, or 3-dimensional coordinate system.

    In the 1-dimensional case, it contains a single straight coordinate
    axis. In the 2- and 3-dimensional cases gives the position of points
    relative to orthogonal straight axes. In the multi-dimensional case,
    all axes shall have the same length unit of measure. A CartesianCS
    shall have one, two, or three gml:axis property elements.
    """

    class Meta:
        name = "CartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Circle(CircleType):
    """A Circle is an arc whose ends coincide to form a simple closed loop.

    The three control points shall be distinct non-co-linear points for
    the circle to be unambiguously defined. The arc is simply extended
    past the third control point until the first control point is
    encountered.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCs1(CylindricalCstype):
    """Gml:CylindricalCS is a three-dimensional coordinate system consisting of a
    polar coordinate system extended by a straight coordinate axis perpendicular to
    the plane spanned by the polar coordinate system.

    A CylindricalCS shall have three gml:axis property elements.
    """

    class Meta:
        name = "CylindricalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DatumPropertyType:
    """
    Gml:DatumPropertyType is a property type for association roles to a datum,
    either referencing or containing the definition of that datum.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_datum: Optional[TemporalDatum1] = field(
        default=None,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: Optional[VerticalDatum1] = field(
        default=None,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: Optional[ImageDatum1] = field(
        default=None,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: Optional[EngineeringDatum1] = field(
        default=None,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: Optional[GeodeticDatum1] = field(
        default=None,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EllipsoidalCs1(EllipsoidalCstype):
    """Gml:EllipsoidalCS is a two- or three-dimensional coordinate system in which
    position is specified by geodetic latitude, geodetic longitude, and (in the
    three-dimensional case) ellipsoidal height.

    An EllipsoidalCS shall have two or three gml:axis property elements;
    the number of associations shall equal the dimension of the CS.
    """

    class Meta:
        name = "EllipsoidalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatumPropertyType:
    """
    Gml:GeodeticDatumPropertyType is a property type for association roles to a
    geodetic datum, either referencing or containing the definition of that datum.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geodetic_datum: Optional[GeodeticDatum1] = field(
        default=None,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearCs1(LinearCstype):
    """Gml:LinearCS is a one-dimensional coordinate system that consists of the
    points that lie on the single axis described.

    The associated coordinate is the distance – with or without offset –
    from the specified datum to the point along the axis. A LinearCS
    shall have one gml:axis property element.
    """

    class Meta:
        name = "LinearCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ObliqueCartesianCs(ObliqueCartesianCstype):
    class Meta:
        name = "ObliqueCartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationMethodType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    formula_citation: Optional[FormulaCitation] = field(
        default=None,
        metadata={
            "name": "formulaCitation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    method_formula: Optional[MethodFormula] = field(
        default=None,
        metadata={
            "name": "methodFormula",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    formula: Optional[Formula] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    source_dimensions: Optional[SourceDimensions] = field(
        default=None,
        metadata={
            "name": "sourceDimensions",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    target_dimensions: Optional[TargetDimensions] = field(
        default=None,
        metadata={
            "name": "targetDimensions",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_parameter: List[UsesParameter] = field(
        default_factory=list,
        metadata={
            "name": "usesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    general_operation_parameter: List[GeneralOperationParameter] = field(
        default_factory=list,
        metadata={
            "name": "generalOperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_parameter: List[IncludesParameter] = field(
        default_factory=list,
        metadata={
            "name": "includesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter: List[Parameter] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ParameterValueGroup(ParameterValueGroupType):
    """Gml:ParameterValueGroup is a group of related parameter values.

    The same group can be repeated more than once in a Conversion,
    Transformation, or higher level ParameterValueGroup, if those
    instances contain different values of one or more parameterValues
    which suitably distinquish among those groups. This concrete complex
    type can be used for operation methods without using an Application
    Schema that defines operation-method-specialized element names and
    contents. This complex type may be used, extended, or restricted for
    well-known operation methods, especially for methods with only one
    instance. The parameterValue elements are an unordered set of
    composition association roles to the parameter values and groups of
    values included in this group.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ParameterValue1(ParameterValueType):
    """Gml:ParameterValue is a parameter value, an ordered sequence of values, or a
    reference to a file of parameter values.

    This concrete complex type may be used for operation methods without
    using an Application Schema that defines operation-method-
    specialized element names and contents, especially for methods with
    only one instance. This complex type may be used, extended, or
    restricted for well-known operation methods, especially for methods
    with many instances.
    """

    class Meta:
        name = "ParameterValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCs1(PolarCstype):
    """Gml:PolarCS ia s two-dimensional coordinate system in which position is
    specified by the distance from the origin and the angle between the line from
    the origin to a point and a reference direction.

    A PolarCS shall have two gml:axis property elements.
    """

    class Meta:
        name = "PolarCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCs1(SphericalCstype):
    """Gml:SphericalCS is a three-dimensional coordinate system with one distance
    measured from the origin and two angular coordinates.

    A SphericalCS shall have three gml:axis property elements.
    """

    class Meta:
        name = "SphericalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCs(TemporalCstype):
    class Meta:
        name = "TemporalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCs1(TimeCstype):
    """Gml:TimeCS is a one-dimensional coordinate system containing a time axis,
    used to describe the temporal position of a point in the specified time units
    from a specified time origin.

    A TimeCS shall have one gml:axis property element.
    """

    class Meta:
        name = "TimeCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCalendarType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    reference_frame: List[TimeCalendarEraPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "referenceFrame",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TimeOrdinalReferenceSystemType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    component: List[TimeOrdinalEraPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TimeTopologyComplexType(AbstractTimeComplexType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    primitive: List[TimeTopologyPrimitivePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class UserDefinedCs1(UserDefinedCstype):
    """Gml:UserDefinedCS is a two- or three-dimensional coordinate system that
    consists of any combination of coordinate axes not covered by any other
    coordinate system type.

    A UserDefinedCS shall have two or three gml:axis property elements;
    the number of property elements shall equal the dimension of the CS.
    """

    class Meta:
        name = "UserDefinedCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCs1(VerticalCstype):
    """Gml:VerticalCS is a one-dimensional coordinate system used to record the
    heights or depths of points.

    Such a coordinate system is usually dependent on the Earth's gravity
    field, perhaps loosely as when atmospheric pressure is the basis for
    the vertical coordinate system axis. A VerticalCS shall have one
    gml:axis property element.
    """

    class Meta:
        name = "VerticalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCenterOf(MultiPointPropertyType):
    class Meta:
        name = "multiCenterOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiLocation(MultiPointPropertyType):
    class Meta:
        name = "multiLocation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPointProperty(MultiPointPropertyType):
    class Meta:
        name = "multiPointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPosition(MultiPointPropertyType):
    class Meta:
        name = "multiPosition"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCiPartyPropertyType1:
    class Meta:
        name = "AbstractCI_Party_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_organisation: Optional[CiOrganisation1] = field(
        default=None,
        metadata={
            "name": "CI_Organisation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    ci_individual: Optional[CiIndividual1] = field(
        default=None,
        metadata={
            "name": "CI_Individual",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOrganisationPropertyType1:
    class Meta:
        name = "CI_Organisation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_organisation: Optional[CiOrganisation1] = field(
        default=None,
        metadata={
            "name": "CI_Organisation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExTemporalExtent2(ExTemporalExtentType2):
    """
    Time period covered by the content of the resource.
    """

    class Meta:
        name = "EX_TemporalExtent"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class SvOperationChainMetadataType(AbstractObjectType1):
    """
    :ivar name: the name, as used by the service for this chain
    :ivar description: a narrative explanation of the services in the
        chain and resulting output
    :ivar operation:
    """

    class Meta:
        name = "SV_OperationChainMetadata_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    operation: List[SvOperationMetadataPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class DqConformanceResult1(DqConformanceResultType1):
    class Meta:
        name = "DQ_ConformanceResult"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExTemporalExtent1(ExTemporalExtentType1):
    class Meta:
        name = "EX_TemporalExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdApplicationSchemaInformation1(MdApplicationSchemaInformationType1):
    class Meta:
        name = "MD_ApplicationSchemaInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCoverageDescription1(MdCoverageDescriptionType1):
    class Meta:
        name = "MD_CoverageDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdFeatureCatalogueDescription1(MdFeatureCatalogueDescriptionType1):
    class Meta:
        name = "MD_FeatureCatalogueDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeoreferenceable1(MdGeoreferenceableType1):
    class Meta:
        name = "MD_Georeferenceable"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdIdentifier2(MdIdentifierType2):
    class Meta:
        name = "MD_Identifier"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdKeywords1(MdKeywordsType1):
    class Meta:
        name = "MD_Keywords"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMetadataExtensionInformation1(MdMetadataExtensionInformationType1):
    class Meta:
        name = "MD_MetadataExtensionInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdPortrayalCatalogueReference1(MdPortrayalCatalogueReferenceType1):
    class Meta:
        name = "MD_PortrayalCatalogueReference"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class RsIdentifierType(MdIdentifierType2):
    class Meta:
        name = "RS_Identifier_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    code_space: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    version: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractGeneralParameterValuePropertyType:
    """
    Gml:AbstractGeneralParameterValuePropertyType is a  property type for inline
    association roles to a parameter value or group of parameter values, always
    containing the values.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    parameter_value_group: Optional[ParameterValueGroup] = field(
        default=None,
        metadata={
            "name": "ParameterValueGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: Optional[ParameterValue1] = field(
        default=None,
        metadata={
            "name": "ParameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AffineCspropertyType:
    """
    Gml:AffineCSPropertyType is a property type for association roles to an affine
    coordinate system, either referencing or containing the definition of that
    coordinate system.
    """

    class Meta:
        name = "AffineCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    affine_cs: Optional[AffineCs1] = field(
        default=None,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CartesianCspropertyType:
    """
    Gml:CartesianCSPropertyType is a property type for association roles to a
    Cartesian coordinate system, either referencing or containing the definition of
    that coordinate system.
    """

    class Meta:
        name = "CartesianCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    cartesian_cs: Optional[CartesianCs1] = field(
        default=None,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CoordinateSystemPropertyType:
    """
    Gml:CoordinateSystemPropertyType is a property type for association roles to a
    coordinate system, either referencing or containing the definition of that
    coordinate system.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    oblique_cartesian_cs: Optional[ObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_cs: Optional[TemporalCs] = field(
        default=None,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs1] = field(
        default=None,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: Optional[CylindricalCs1] = field(
        default=None,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: Optional[PolarCs1] = field(
        default=None,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs1] = field(
        default=None,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: Optional[UserDefinedCs1] = field(
        default=None,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: Optional[LinearCs1] = field(
        default=None,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: Optional[TimeCs1] = field(
        default=None,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: Optional[VerticalCs1] = field(
        default=None,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs1] = field(
        default=None,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: Optional[EllipsoidalCs1] = field(
        default=None,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CurveSegmentArrayPropertyType:
    """
    Gml:CurveSegmentArrayPropertyType is a container for an array of curve
    segments.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geodesic: List[Geodesic] = field(
        default_factory=list,
        metadata={
            "name": "Geodesic",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    geodesic_string: List[GeodesicString] = field(
        default_factory=list,
        metadata={
            "name": "GeodesicString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    clothoid: List[Clothoid] = field(
        default_factory=list,
        metadata={
            "name": "Clothoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    offset_curve: List[OffsetCurve] = field(
        default_factory=list,
        metadata={
            "name": "OffsetCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    bezier: List[Bezier] = field(
        default_factory=list,
        metadata={
            "name": "Bezier",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    bspline: List[Bspline] = field(
        default_factory=list,
        metadata={
            "name": "BSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    cubic_spline: List[CubicSpline] = field(
        default_factory=list,
        metadata={
            "name": "CubicSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    circle_by_center_point: List[CircleByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "CircleByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_by_center_point: List[ArcByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "ArcByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_by_bulge: List[ArcByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_string_by_bulge: List[ArcStringByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcStringByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    circle: List[Circle] = field(
        default_factory=list,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc: List[Arc1] = field(
        default_factory=list,
        metadata={
            "name": "Arc",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_string: List[ArcString] = field(
        default_factory=list,
        metadata={
            "name": "ArcString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string_segment: List[LineStringSegment] = field(
        default_factory=list,
        metadata={
            "name": "LineStringSegment",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )


@dataclass
class CylindricalCspropertyType:
    """
    Gml:CylindricalCSPropertyType is a property type for association roles to a
    cylindrical coordinate system, either referencing or containing the definition
    of that coordinate system.
    """

    class Meta:
        name = "CylindricalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    cylindrical_cs: Optional[CylindricalCs1] = field(
        default=None,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EllipsoidalCspropertyType:
    """
    Gml:EllipsoidalCSPropertyType is a property type for association roles to an
    ellipsoidal coordinate system, either referencing or containing the definition
    of that coordinate system.
    """

    class Meta:
        name = "EllipsoidalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    ellipsoidal_cs: Optional[EllipsoidalCs1] = field(
        default=None,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearCspropertyType:
    """
    Gml:LinearCSPropertyType is a property type for association roles to a linear
    coordinate system, either referencing or containing the definition of that
    coordinate system.
    """

    class Meta:
        name = "LinearCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    linear_cs: Optional[LinearCs1] = field(
        default=None,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ObliqueCartesianCspropertyType:
    class Meta:
        name = "ObliqueCartesianCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    oblique_cartesian_cs: Optional[ObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationMethod(OperationMethodType):
    """Gml:OperationMethod is a method (algorithm or procedure) used to perform a
    coordinate operation.

    Most operation methods use a number of operation parameters,
    although some coordinate conversions use none. Each coordinate
    operation using the method assigns values to these parameters. The
    parameter elements are an unordered list of associations to the set
    of operation parameters and parameter groups used by this operation
    method.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCspropertyType:
    """
    Gml:PolarCSPropertyType is a property type for association roles to a polar
    coordinate system, either referencing or containing the definition of that
    coordinate system.
    """

    class Meta:
        name = "PolarCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    polar_cs: Optional[PolarCs1] = field(
        default=None,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SphericalCspropertyType:
    """
    Gml:SphericalCSPropertyType is property type for association roles to a
    spherical coordinate system, either referencing or containing the definition of
    that coordinate system.
    """

    class Meta:
        name = "SphericalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    spherical_cs: Optional[SphericalCs1] = field(
        default=None,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCspropertyType:
    class Meta:
        name = "TemporalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_cs: Optional[TemporalCs] = field(
        default=None,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeCspropertyType:
    """
    Gml:TimeCSPropertyType is a property type for association roles to a time
    coordinate system, either referencing or containing the definition of that
    coordinate system.
    """

    class Meta:
        name = "TimeCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_cs: Optional[TimeCs1] = field(
        default=None,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeCalendar(TimeCalendarType):
    """A calendar is a discrete temporal reference system that provides a basis for
    defining temporal position to a resolution of one day.

    gml:TimeCalendar adds one property to those inherited from
    gml:TimeReferenceSystem. A gml:referenceFrame provides a link to a
    gml:TimeCalendarEra that it uses. A  gml:TimeCalendar may reference
    more than one calendar era. The referenceFrame element follows the
    standard GML property model, allowing the association to be
    instantiated either using an inline description using the
    gml:TimeCalendarEra element, or a link to a gml:TimeCalendarEra
    which is explicit elsewhere.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeOrdinalReferenceSystem(TimeOrdinalReferenceSystemType):
    """In some applications of geographic information — such as geology and
    archaeology — relative position in time is known more precisely than absolute
    time or duration.

    The order of events in time can be well established, but the
    magnitude of the intervals between them cannot be accurately
    determined; in such cases, the use of an ordinal temporal reference
    system is appropriate. An ordinal temporal reference system is
    composed of a sequence of named coterminous eras, which may in turn
    be composed of sequences of member eras at a finer scale, giving the
    whole a hierarchical structure of eras of verying resolution. An
    ordinal temporal reference system whose component eras are not
    further subdivided is effectively a temporal topological complex
    constrained to be a linear graph. An ordinal temporal reference
    system some or all of whose component eras are subdivided is
    effectively a temporal topological complex with the constraint that
    parallel branches may only be constructed in pairs where one is a
    single temporal ordinal era and the other is a sequence of temporal
    ordinal eras that are called "members" of the "group". This
    constraint means that within a single temporal ordinal reference
    system, the relative position of all temporal ordinal eras is
    unambiguous. The positions of the beginning and end of a given era
    may calibrate the relative time scale.
    gml:TimeOrdinalReferenceSystem adds one or more gml:component
    properties to the generic temporal reference system model.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeTopologyComplex(TimeTopologyComplexType):
    """A temporal topology complex shall be the connected acyclic directed graph
    composed of temporal topological primitives, i.e. time nodes and time edges.

    Because a time edge may not exist without two time nodes on its
    boundaries, static features have time edges from a temporal topology
    complex as the values of their temporal properties, regardless of
    explicit declarations. A temporal topology complex expresses a
    linear or a non-linear graph. A temporal linear graph, composed of a
    sequence of time edges, provides a lineage described only by
    "substitution" of feature instances or feature element values. A
    time node as the start or the end of the graph connects with at
    least one time edge. A time node other than the start and the end
    shall connect to at least two time edges: one of starting from the
    node, and another ending at the node. A temporal topological complex
    is a set of connected temporal topological primitives. The member
    primtives are indicated, either by reference or by value, using the
    primitive property.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UserDefinedCspropertyType:
    """
    Gml:UserDefinedCSPropertyType is a property type for association roles to a
    user-defined coordinate system, either referencing or containing the definition
    of that coordinate system.
    """

    class Meta:
        name = "UserDefinedCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    user_defined_cs: Optional[UserDefinedCs1] = field(
        default=None,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalCspropertyType:
    """
    Gml:VerticalCSPropertyType is a property type for association roles to a
    vertical coordinate system, either referencing or containing the definition of
    that coordinate system.
    """

    class Meta:
        name = "VerticalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    vertical_cs: Optional[VerticalCs1] = field(
        default=None,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DatumRef(DatumPropertyType):
    class Meta:
        name = "datumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatumRef(GeodeticDatumPropertyType):
    class Meta:
        name = "geodeticDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatum2(GeodeticDatumPropertyType):
    """
    Gml:geodeticDatum is an association role to the geodetic datum used by this
    CRS.
    """

    class Meta:
        name = "geodeticDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesGeodeticDatum(GeodeticDatumPropertyType):
    class Meta:
        name = "usesGeodeticDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibilityType1(AbstractResponsibilityType):
    """
    :ivar role: function performed by the responsible party
    :ivar extent: spatial or temporal extent of the role
    :ivar party:
    """

    class Meta:
        name = "CI_Responsibility_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    role: Optional[CiRoleCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "required": True,
        },
    )
    extent: List["AbstractExtentPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    party: List[AbstractCiPartyPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class SvOperationChainMetadata(SvOperationChainMetadataType):
    """
    Operation Chain Information.
    """

    class Meta:
        name = "SV_OperationChainMetadata"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class DqConformanceResultPropertyType1:
    class Meta:
        name = "DQ_ConformanceResult_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_conformance_result: Optional[DqConformanceResult1] = field(
        default=None,
        metadata={
            "name": "DQ_ConformanceResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqResultPropertyType:
    class Meta:
        name = "DQ_Result_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_quantitative_result: Optional[DqQuantitativeResult1] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_conformance_result: Optional[DqConformanceResult1] = field(
        default=None,
        metadata={
            "name": "DQ_ConformanceResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdApplicationSchemaInformationPropertyType1:
    class Meta:
        name = "MD_ApplicationSchemaInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_application_schema_information: Optional[
        MdApplicationSchemaInformation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_ApplicationSchemaInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFeatureCatalogueDescriptionPropertyType1:
    class Meta:
        name = "MD_FeatureCatalogueDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_feature_catalogue_description: Optional[
        MdFeatureCatalogueDescription1
    ] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogueDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeoreferenceablePropertyType1:
    class Meta:
        name = "MD_Georeferenceable_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_georeferenceable: Optional[MdGeoreferenceable1] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGridSpatialRepresentationPropertyType1:
    class Meta:
        name = "MD_GridSpatialRepresentation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_georectified: Optional[MdGeorectified1] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable1] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_grid_spatial_representation: Optional[
        MdGridSpatialRepresentation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_GridSpatialRepresentation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdKeywordsPropertyType1:
    class Meta:
        name = "MD_Keywords_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_keywords: Optional[MdKeywords1] = field(
        default=None,
        metadata={
            "name": "MD_Keywords",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMetadataExtensionInformationPropertyType1:
    class Meta:
        name = "MD_MetadataExtensionInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_metadata_extension_information: Optional[
        MdMetadataExtensionInformation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_MetadataExtensionInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdPortrayalCatalogueReferencePropertyType1:
    class Meta:
        name = "MD_PortrayalCatalogueReference_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_portrayal_catalogue_reference: Optional[
        MdPortrayalCatalogueReference1
    ] = field(
        default=None,
        metadata={
            "name": "MD_PortrayalCatalogueReference",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSpatialRepresentationPropertyType:
    class Meta:
        name = "MD_SpatialRepresentation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_georectified: Optional[MdGeorectified1] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable1] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_grid_spatial_representation: Optional[
        MdGridSpatialRepresentation1
    ] = field(
        default=None,
        metadata={
            "name": "MD_GridSpatialRepresentation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RsIdentifier(RsIdentifierType):
    class Meta:
        name = "RS_Identifier"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class OperationMethodPropertyType:
    """
    Gml:OperationMethodPropertyType is a property type for association roles to a
    concrete general-purpose operation method, either referencing or containing the
    definition of that method.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_method: Optional[OperationMethod] = field(
        default=None,
        metadata={
            "name": "OperationMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeCalendarPropertyType:
    """
    Gml:TimeCalendarPropertyType provides for associating a gml:TimeCalendar with
    an object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_calendar: Optional[TimeCalendar] = field(
        default=None,
        metadata={
            "name": "TimeCalendar",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeTopologyComplexPropertyType:
    """
    Gml:TimeTopologyComplexPropertyType provides for associating a
    gml:TimeTopologyComplex with an object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_topology_complex: Optional[TimeTopologyComplex] = field(
        default=None,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AffineCs2(AffineCspropertyType):
    """
    Gml:affineCS is an association role to the affine coordinate system used by
    this CRS.
    """

    class Meta:
        name = "affineCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCsref(CartesianCspropertyType):
    class Meta:
        name = "cartesianCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCs2(CartesianCspropertyType):
    """
    Gml:cartesianCS is an association role to the Cartesian coordinate system used
    by this CRS.
    """

    class Meta:
        name = "cartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystem(CoordinateSystemPropertyType):
    """
    An association role to the coordinate system used by this CRS.
    """

    class Meta:
        name = "coordinateSystem"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystemRef(CoordinateSystemPropertyType):
    class Meta:
        name = "coordinateSystemRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCsref(CylindricalCspropertyType):
    class Meta:
        name = "cylindricalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCs2(CylindricalCspropertyType):
    """
    Gml:cylindricalCS is an association role to the cylindrical coordinate system
    used by this CRS.
    """

    class Meta:
        name = "cylindricalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidalCsref(EllipsoidalCspropertyType):
    class Meta:
        name = "ellipsoidalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidalCs2(EllipsoidalCspropertyType):
    """
    Gml:ellipsoidalCS is an association role to the ellipsoidal coordinate system
    used by this CRS.
    """

    class Meta:
        name = "ellipsoidalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IncludesValue(AbstractGeneralParameterValuePropertyType):
    class Meta:
        name = "includesValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearCsref(LinearCspropertyType):
    class Meta:
        name = "linearCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearCs2(LinearCspropertyType):
    """
    Gml:linearCS is an association role to the linear coordinate system used by
    this CRS.
    """

    class Meta:
        name = "linearCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ObliqueCartesianCsref(ObliqueCartesianCspropertyType):
    class Meta:
        name = "obliqueCartesianCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ParameterValue2(AbstractGeneralParameterValuePropertyType):
    """
    Gml:parameterValue is a composition association to a parameter value or group
    of parameter values used by a coordinate operation.
    """

    class Meta:
        name = "parameterValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCsref(PolarCspropertyType):
    class Meta:
        name = "polarCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCs2(PolarCspropertyType):
    """
    Gml:polarCS is an association role to the polar coordinate system used by this
    CRS.
    """

    class Meta:
        name = "polarCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Segments(CurveSegmentArrayPropertyType):
    """This property element contains a list of curve segments.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "segments"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCsref(SphericalCspropertyType):
    class Meta:
        name = "sphericalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCs2(SphericalCspropertyType):
    """
    Gml:sphericalCS is an association role to the spherical coordinate system used
    by this CRS.
    """

    class Meta:
        name = "sphericalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCsref(TemporalCspropertyType):
    class Meta:
        name = "temporalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCs2(TimeCspropertyType):
    """
    Gml:timeCS is an association role to the time coordinate system used by this
    CRS.
    """

    class Meta:
        name = "timeCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UserDefinedCsref(UserDefinedCspropertyType):
    class Meta:
        name = "userDefinedCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UserDefinedCs2(UserDefinedCspropertyType):
    """
    Gml:userDefinedCS is an association role to the user defined coordinate system
    used by this CRS.
    """

    class Meta:
        name = "userDefinedCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesAffineCs(AffineCspropertyType):
    class Meta:
        name = "usesAffineCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesCs(CoordinateSystemPropertyType):
    class Meta:
        name = "usesCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesCartesianCs(CartesianCspropertyType):
    class Meta:
        name = "usesCartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesEllipsoidalCs(EllipsoidalCspropertyType):
    class Meta:
        name = "usesEllipsoidalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesObliqueCartesianCs(ObliqueCartesianCspropertyType):
    class Meta:
        name = "usesObliqueCartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesSphericalCs(SphericalCspropertyType):
    class Meta:
        name = "usesSphericalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesTemporalCs(TemporalCspropertyType):
    class Meta:
        name = "usesTemporalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesTimeCs(TimeCspropertyType):
    class Meta:
        name = "usesTimeCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesValue(AbstractGeneralParameterValuePropertyType):
    class Meta:
        name = "usesValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesVerticalCs(VerticalCspropertyType):
    class Meta:
        name = "usesVerticalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCsref(VerticalCspropertyType):
    class Meta:
        name = "verticalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCs2(VerticalCspropertyType):
    """
    Gml:verticalCS is an association role to the vertical coordinate system used by
    this CRS.
    """

    class Meta:
        name = "verticalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibility1(CiResponsibilityType1):
    """
    Information about the party and their role.
    """

    class Meta:
        name = "CI_Responsibility"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class SvOperationChainMetadataPropertyType:
    class Meta:
        name = "SV_OperationChainMetadata_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_operation_chain_metadata: Optional[SvOperationChainMetadata] = field(
        default=None,
        metadata={
            "name": "SV_OperationChainMetadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdIdentifierPropertyType2:
    class Meta:
        name = "MD_Identifier_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    rs_identifier: Optional[RsIdentifier] = field(
        default=None,
        metadata={
            "name": "RS_Identifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_identifier: Optional[MdIdentifier2] = field(
        default=None,
        metadata={
            "name": "MD_Identifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RsIdentifierPropertyType:
    class Meta:
        name = "RS_Identifier_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    rs_identifier: Optional[RsIdentifier] = field(
        default=None,
        metadata={
            "name": "RS_Identifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CurveType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    segments: Optional[Segments] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeClockType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    reference_event: Optional[StringOrRefType] = field(
        default=None,
        metadata={
            "name": "referenceEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    reference_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "referenceTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    utc_reference: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "utcReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    date_basis: List[TimeCalendarPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "dateBasis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Method(OperationMethodPropertyType):
    """
    Gml:method is an association role to the operation method used by a coordinate
    operation.
    """

    class Meta:
        name = "method"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationMethodRef(OperationMethodPropertyType):
    class Meta:
        name = "operationMethodRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesMethod(OperationMethodPropertyType):
    class Meta:
        name = "usesMethod"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibilityPropertyType1:
    class Meta:
        name = "CI_Responsibility_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_responsibility: Optional[CiResponsibility1] = field(
        default=None,
        metadata={
            "name": "CI_Responsibility",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractResponsibilityPropertyType:
    class Meta:
        name = "Abstract_Responsibility_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    ci_responsibility: Optional["CiResponsibility2"] = field(
        default=None,
        metadata={
            "name": "CI_Responsibility",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_responsibility: Optional[
        CiResponsibility1
    ] = field(
        default=None,
        metadata={
            "name": "CI_Responsibility",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqElementType1(AbstractObjectType2):
    class Meta:
        name = "AbstractDQ_Element_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name_of_measure: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "nameOfMeasure",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    measure_identification: Optional[MdIdentifierPropertyType2] = field(
        default=None,
        metadata={
            "name": "measureIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    measure_description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "measureDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    evaluation_method_type: Optional[
        DqEvaluationMethodTypeCodePropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "evaluationMethodType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    evaluation_method_description: Optional[
        CharacterStringPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "evaluationMethodDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    evaluation_procedure: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "name": "evaluationProcedure",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    date_time: List[DateTimePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    result: List[DqResultPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
            "max_occurs": 2,
        },
    )


@dataclass
class ExGeographicDescriptionType1(AbstractExGeographicExtentType1):
    class Meta:
        name = "EX_GeographicDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    geographic_identifier: Optional[MdIdentifierPropertyType2] = field(
        default=None,
        metadata={
            "name": "geographicIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdAggregateInformationType(AbstractObjectType2):
    """
    Encapsulates the dataset aggregation information.
    """

    class Meta:
        name = "MD_AggregateInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    aggregate_data_set_name: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "name": "aggregateDataSetName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    aggregate_data_set_identifier: Optional[MdIdentifierPropertyType2] = field(
        default=None,
        metadata={
            "name": "aggregateDataSetIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    association_type: Optional[DsAssociationTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "associationType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    initiative_type: Optional[DsInitiativeTypeCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "initiativeType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdImageDescriptionType1(MdCoverageDescriptionType1):
    """
    Information about an image's suitability for use.
    """

    class Meta:
        name = "MD_ImageDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    illumination_elevation_angle: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "illuminationElevationAngle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    illumination_azimuth_angle: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "illuminationAzimuthAngle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    imaging_condition: Optional[MdImagingConditionCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "imagingCondition",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    image_quality_code: Optional[MdIdentifierPropertyType2] = field(
        default=None,
        metadata={
            "name": "imageQualityCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    cloud_cover_percentage: Optional[RealPropertyType2] = field(
        default=None,
        metadata={
            "name": "cloudCoverPercentage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    processing_level_code: Optional[MdIdentifierPropertyType2] = field(
        default=None,
        metadata={
            "name": "processingLevelCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    compression_generation_quantity: Optional[IntegerPropertyType2] = field(
        default=None,
        metadata={
            "name": "compressionGenerationQuantity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    triangulation_indicator: Optional[BooleanPropertyType3] = field(
        default=None,
        metadata={
            "name": "triangulationIndicator",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    radiometric_calibration_data_availability: Optional[
        BooleanPropertyType3
    ] = field(
        default=None,
        metadata={
            "name": "radiometricCalibrationDataAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    camera_calibration_information_availability: Optional[
        BooleanPropertyType3
    ] = field(
        default=None,
        metadata={
            "name": "cameraCalibrationInformationAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    film_distortion_information_availability: Optional[
        BooleanPropertyType3
    ] = field(
        default=None,
        metadata={
            "name": "filmDistortionInformationAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    lens_distortion_information_availability: Optional[
        BooleanPropertyType3
    ] = field(
        default=None,
        metadata={
            "name": "lensDistortionInformationAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdReferenceSystemType1(AbstractObjectType2):
    class Meta:
        name = "MD_ReferenceSystem_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    reference_system_identifier: Optional[RsIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "referenceSystemIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class Curve(CurveType):
    """A curve is a 1-dimensional primitive.

    Curves are continuous, connected, and have a measurable length in
    terms of the coordinate system. A curve is composed of one or more
    curve segments. Each curve segment within a curve may be defined
    using a different interpolation method. The curve segments are
    connected to one another, with the end point of each segment except
    the last being the start point of the next segment in the segment
    list. The orientation of the curve is positive. The element segments
    encapsulates the segments of the curve.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeClock(TimeClockType):
    """A clock provides a basis for defining temporal position within a day. A
    clock shall be used with a calendar in order to provide a complete description
    of a temporal position within a specific day.

    gml:TimeClock adds the following properties to those inherited from gml:TimeReferenceSystemType:
    -       gml:referenceEvent is the name or description of an event, such as solar noon or sunrise, which fixes the position of the base scale of the clock.
    -       gml:referenceTime specifies the time of day associated with the reference event expressed as a time of day in the given clock. The reference time is usually the origin of the clock scale.
    -       gml:utcReference specifies the 24 hour local or UTC time that corresponds to the reference time.
    -       gml:dateBasis contains or references the calendars that use this clock.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MiRevisionType(AbstractObjectType1):
    """Description: NASA Revision Description"""

    class Meta:
        name = "MI_Revision_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    author: Optional[AbstractResponsibilityPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    date_info: Optional[AbstractTypedDatePropertyType] = field(
        default=None,
        metadata={
            "name": "dateInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )


@dataclass
class MdReleasabilityType(AbstractObjectType1):
    """
    :ivar addressee: party responsible for the Release statement
    :ivar statement: release statement
    :ivar dissemination_constraints: component in determining
        releasability
    """

    class Meta:
        name = "MD_Releasability_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    addressee: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    statement: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    dissemination_constraints: List[MdRestrictionCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "disseminationConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )


@dataclass
class MdExtendedElementInformationType2(AbstractObjectType1):
    """
    :ivar name: name of the extended metadata element
    :ivar definition: definition of the extended element
    :ivar obligation: obligation of the extended element
    :ivar condition: condition under which the extended element is
        mandatory
    :ivar data_type: code which identifies the kind of value provided in
        the extended element
    :ivar maximum_occurrence: maximum occurrence of the extended element
    :ivar domain_value: valid values that can be assigned to the
        extended element
    :ivar parent_entity: name of the metadata entity(s) under which this
        extended metadata element may appear. The name(s) may be
        standard metadata element(s) or other extended metadata
        element(s)
    :ivar rule: specifies how the extended element relates to other
        existing elements and entities
    :ivar rationale: reason for creating the extended element
    :ivar source: name of the person or organisation creating the
        extended element
    :ivar concept_name:
    :ivar code:
    """

    class Meta:
        name = "MD_ExtendedElementInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
            "required": True,
        },
    )
    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
            "required": True,
        },
    )
    obligation: Optional[MdObligationCodePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    condition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    data_type: Optional[MdDatatypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "dataType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
            "required": True,
        },
    )
    maximum_occurrence: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "maximumOccurrence",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    domain_value: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "domainValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    parent_entity: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "parentEntity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
            "min_occurs": 1,
        },
    )
    rule: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
            "required": True,
        },
    )
    rationale: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    source: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
            "min_occurs": 1,
        },
    )
    concept_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "conceptName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )


@dataclass
class AbstractDqCompletenessType1(AbstractDqElementType1):
    class Meta:
        name = "AbstractDQ_Completeness_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqElement1(AbstractDqElementType1):
    class Meta:
        name = "AbstractDQ_Element"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqLogicalConsistencyType1(AbstractDqElementType1):
    class Meta:
        name = "AbstractDQ_LogicalConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqPositionalAccuracyType1(AbstractDqElementType1):
    class Meta:
        name = "AbstractDQ_PositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqTemporalAccuracyType(AbstractDqElementType1):
    class Meta:
        name = "AbstractDQ_TemporalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqThematicAccuracyType1(AbstractDqElementType1):
    class Meta:
        name = "AbstractDQ_ThematicAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExGeographicDescription1(ExGeographicDescriptionType1):
    class Meta:
        name = "EX_GeographicDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdAggregateInformation(MdAggregateInformationType):
    class Meta:
        name = "MD_AggregateInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdImageDescription1(MdImageDescriptionType1):
    class Meta:
        name = "MD_ImageDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdReferenceSystem1(MdReferenceSystemType1):
    class Meta:
        name = "MD_ReferenceSystem"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CurvePropertyType:
    """A property that has a curve as its value domain may either be an appropriate
    geometry element encapsulated in an element of this type or an XLink reference
    to a remote geometry element (where remote includes geometry elements located
    elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional["Ring"] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeClockPropertyType:
    """
    Gml:TimeClockPropertyType provides for associating a gml:TimeClock with an
    object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_clock: Optional[TimeClock] = field(
        default=None,
        metadata={
            "name": "TimeClock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MiRevision(MiRevisionType):
    class Meta:
        name = "MI_Revision"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MdReleasability(MdReleasabilityType):
    """
    State, nation or organization to which resource can be released to e.g. NATO
    unclassified releasable to PfP.
    """

    class Meta:
        name = "MD_Releasability"
        namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"


@dataclass
class MdExtendedElementInformation2(MdExtendedElementInformationType2):
    """
    New metadata element, not found in ISO 19115, which is required to describe
    geographic data.
    """

    class Meta:
        name = "MD_ExtendedElementInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"


@dataclass
class AbstractDqCompleteness1(AbstractDqCompletenessType1):
    class Meta:
        name = "AbstractDQ_Completeness"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqLogicalConsistency1(AbstractDqLogicalConsistencyType1):
    class Meta:
        name = "AbstractDQ_LogicalConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqPositionalAccuracy1(AbstractDqPositionalAccuracyType1):
    class Meta:
        name = "AbstractDQ_PositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqTemporalAccuracy(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "AbstractDQ_TemporalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqThematicAccuracy1(AbstractDqThematicAccuracyType1):
    class Meta:
        name = "AbstractDQ_ThematicAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAbsoluteExternalPositionalAccuracyType1(
    AbstractDqPositionalAccuracyType1
):
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAccuracyOfAtimeMeasurementType1(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessCommissionType1(AbstractDqCompletenessType1):
    class Meta:
        name = "DQ_CompletenessCommission_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessOmissionType1(AbstractDqCompletenessType1):
    class Meta:
        name = "DQ_CompletenessOmission_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqConceptualConsistencyType1(AbstractDqLogicalConsistencyType1):
    class Meta:
        name = "DQ_ConceptualConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqDomainConsistencyType1(AbstractDqLogicalConsistencyType1):
    class Meta:
        name = "DQ_DomainConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqFormatConsistencyType1(AbstractDqLogicalConsistencyType1):
    class Meta:
        name = "DQ_FormatConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqGriddedDataPositionalAccuracyType1(AbstractDqPositionalAccuracyType1):
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqNonQuantitativeAttributeAccuracyType(AbstractDqThematicAccuracyType1):
    class Meta:
        name = "DQ_NonQuantitativeAttributeAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqQuantitativeAttributeAccuracyType1(AbstractDqThematicAccuracyType1):
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqRelativeInternalPositionalAccuracyType1(
    AbstractDqPositionalAccuracyType1
):
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalConsistencyType1(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "DQ_TemporalConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalValidityType1(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "DQ_TemporalValidity_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqThematicClassificationCorrectnessType1(
    AbstractDqThematicAccuracyType1
):
    class Meta:
        name = "DQ_ThematicClassificationCorrectness_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTopologicalConsistencyType1(AbstractDqLogicalConsistencyType1):
    class Meta:
        name = "DQ_TopologicalConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExGeographicDescriptionPropertyType1:
    class Meta:
        name = "EX_GeographicDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_geographic_description: Optional[ExGeographicDescription1] = field(
        default=None,
        metadata={
            "name": "EX_GeographicDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdAggregateInformationPropertyType:
    class Meta:
        name = "MD_AggregateInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_aggregate_information: Optional[MdAggregateInformation] = field(
        default=None,
        metadata={
            "name": "MD_AggregateInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdContentInformationPropertyType:
    class Meta:
        name = "MD_ContentInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_image_description: Optional[MdImageDescription1] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_coverage_description: Optional[MdCoverageDescription1] = field(
        default=None,
        metadata={
            "name": "MD_CoverageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_feature_catalogue_description: Optional[
        MdFeatureCatalogueDescription1
    ] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogueDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageDescriptionPropertyType1:
    class Meta:
        name = "MD_CoverageDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_image_description: Optional[MdImageDescription1] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_coverage_description: Optional[MdCoverageDescription1] = field(
        default=None,
        metadata={
            "name": "MD_CoverageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImageDescriptionPropertyType1:
    class Meta:
        name = "MD_ImageDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_image_description: Optional[MdImageDescription1] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdReferenceSystemPropertyType1:
    class Meta:
        name = "MD_ReferenceSystem_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_reference_system: Optional[MdReferenceSystem1] = field(
        default=None,
        metadata={
            "name": "MD_ReferenceSystem",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class BaseCurve(CurvePropertyType):
    """The property baseCurve references or contains the base curve, i.e. it either
    references the base curve via the XLink-attributes or contains the curve
    element.

    A curve element is any element which is substitutable for
    AbstractCurve. The base curve has positive orientation.
    """

    class Meta:
        name = "baseCurve"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CenterLineOf(CurvePropertyType):
    class Meta:
        name = "centerLineOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveMember(CurvePropertyType):
    class Meta:
        name = "curveMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveProperty(CurvePropertyType):
    """This property element either references a curve via the XLink-attributes or
    contains the curve element.

    curveProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for AbstractCurve.
    """

    class Meta:
        name = "curveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EdgeOf(CurvePropertyType):
    class Meta:
        name = "edgeOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MiRevisionPropertyType:
    class Meta:
        name = "MI_Revision_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_revision: Optional[MiRevision] = field(
        default=None,
        metadata={
            "name": "MI_Revision",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdReleasabilityPropertyType:
    class Meta:
        name = "MD_Releasability_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    md_releasability: Optional[MdReleasability] = field(
        default=None,
        metadata={
            "name": "MD_Releasability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdExtendedElementInformationPropertyType2:
    class Meta:
        name = "MD_ExtendedElementInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    md_extended_element_information: Optional[
        MdExtendedElementInformation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_ExtendedElementInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMdIdentificationType1(AbstractObjectType2):
    """
    Basic information about data.
    """

    class Meta:
        name = "AbstractMD_Identification_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    citation: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    abstract: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    purpose: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    credit: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    status: List[MdProgressCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    point_of_contact: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "pointOfContact",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_maintenance: List[MdMaintenanceInformationPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "resourceMaintenance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    graphic_overview: List[MdBrowseGraphicPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "graphicOverview",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_format: List[MdFormatPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "resourceFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    descriptive_keywords: List[MdKeywordsPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "descriptiveKeywords",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_specific_usage: List[MdUsagePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "resourceSpecificUsage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_constraints: List[MdConstraintsPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "resourceConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    aggregation_info: List[MdAggregateInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "aggregationInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DqAbsoluteExternalPositionalAccuracy1(
    DqAbsoluteExternalPositionalAccuracyType1
):
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAccuracyOfAtimeMeasurement1(DqAccuracyOfAtimeMeasurementType1):
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessCommission1(DqCompletenessCommissionType1):
    class Meta:
        name = "DQ_CompletenessCommission"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessOmission1(DqCompletenessOmissionType1):
    class Meta:
        name = "DQ_CompletenessOmission"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqConceptualConsistency1(DqConceptualConsistencyType1):
    class Meta:
        name = "DQ_ConceptualConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqDomainConsistency1(DqDomainConsistencyType1):
    class Meta:
        name = "DQ_DomainConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqFormatConsistency1(DqFormatConsistencyType1):
    class Meta:
        name = "DQ_FormatConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqGriddedDataPositionalAccuracy1(DqGriddedDataPositionalAccuracyType1):
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqNonQuantitativeAttributeAccuracy(
    DqNonQuantitativeAttributeAccuracyType
):
    class Meta:
        name = "DQ_NonQuantitativeAttributeAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqQuantitativeAttributeAccuracy1(DqQuantitativeAttributeAccuracyType1):
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqRelativeInternalPositionalAccuracy1(
    DqRelativeInternalPositionalAccuracyType1
):
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalConsistency1(DqTemporalConsistencyType1):
    class Meta:
        name = "DQ_TemporalConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalValidity1(DqTemporalValidityType1):
    class Meta:
        name = "DQ_TemporalValidity"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqThematicClassificationCorrectness1(
    DqThematicClassificationCorrectnessType1
):
    class Meta:
        name = "DQ_ThematicClassificationCorrectness"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTopologicalConsistency1(DqTopologicalConsistencyType1):
    class Meta:
        name = "DQ_TopologicalConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class RingType(AbstractRingType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    curve_member: List[CurveMember] = field(
        default_factory=list,
        metadata={
            "name": "curveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class MdConstraintsType2(AbstractConstraintsType):
    """
    :ivar use_limitation: limitation affecting the fitness for use of
        the resource or metadata. Example, "not to be used for
        navigation"
    :ivar constraint_application_scope: Spatial and temporal extent of
        the application of the constraint restrictions
    :ivar graphic: graphic /symbol indicating the constraint Eg.
    :ivar reference: citation/URL for the limitation or constraint, e.g.
        copyright statement, license agreement, etc
    :ivar releasability: information concerning the parties to whom the
        resource can or cannot be released and the party responsible for
        determining the releasibility
    :ivar responsible_party: party responsible for the resource
        constraints
    """

    class Meta:
        name = "MD_Constraints_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    use_limitation: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "useLimitation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    constraint_application_scope: Optional["MdScopePropertyType"] = field(
        default=None,
        metadata={
            "name": "constraintApplicationScope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    graphic: List["MdBrowseGraphicPropertyType1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    reference: List["AbstractCitationPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    releasability: Optional[MdReleasabilityPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    responsible_party: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "responsibleParty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )


@dataclass
class MdMetadataExtensionInformationType2(AbstractMetadataExtensionType):
    """
    :ivar extension_on_line_resource: information about on-line sources
        containing the community profile name and the extended metadata
        elements. Information for all new metadata elements
    :ivar extended_element_information:
    """

    class Meta:
        name = "MD_MetadataExtensionInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    extension_on_line_resource: List[
        AbstractOnlineResourcePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "extensionOnLineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    extended_element_information: List[
        MdExtendedElementInformationPropertyType2
    ] = field(
        default_factory=list,
        metadata={
            "name": "extendedElementInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )


@dataclass
class AbstractMdIdentification1(AbstractMdIdentificationType1):
    class Meta:
        name = "AbstractMD_Identification"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAbsoluteExternalPositionalAccuracyPropertyType1:
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqAccuracyOfAtimeMeasurementPropertyType1:
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessCommissionPropertyType1:
    class Meta:
        name = "DQ_CompletenessCommission_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_commission: Optional[DqCompletenessCommission1] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessOmissionPropertyType1:
    class Meta:
        name = "DQ_CompletenessOmission_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_omission: Optional[DqCompletenessOmission1] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessPropertyType:
    class Meta:
        name = "DQ_Completeness_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_commission: Optional[DqCompletenessCommission1] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_completeness_omission: Optional[DqCompletenessOmission1] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqConceptualConsistencyPropertyType1:
    class Meta:
        name = "DQ_ConceptualConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_conceptual_consistency: Optional[DqConceptualConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDomainConsistencyPropertyType1:
    class Meta:
        name = "DQ_DomainConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_domain_consistency: Optional[DqDomainConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqElementPropertyType:
    class Meta:
        name = "DQ_Element_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_commission: Optional[DqCompletenessCommission1] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_completeness_omission: Optional[DqCompletenessOmission1] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_conceptual_consistency: Optional[DqConceptualConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_topological_consistency: Optional[DqTopologicalConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_non_quantitative_attribute_accuracy: Optional[
        DqNonQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_validity: Optional[DqTemporalValidity1] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqFormatConsistencyPropertyType1:
    class Meta:
        name = "DQ_FormatConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_format_consistency: Optional[DqFormatConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqGriddedDataPositionalAccuracyPropertyType1:
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqLogicalConsistencyPropertyType:
    class Meta:
        name = "DQ_LogicalConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_conceptual_consistency: Optional[DqConceptualConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_topological_consistency: Optional[DqTopologicalConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqNonQuantitativeAttributeAccuracyPropertyType:
    class Meta:
        name = "DQ_NonQuantitativeAttributeAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_non_quantitative_attribute_accuracy: Optional[
        DqNonQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqPositionalAccuracyPropertyType:
    class Meta:
        name = "DQ_PositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqQuantitativeAttributeAccuracyPropertyType1:
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqRelativeInternalPositionalAccuracyPropertyType1:
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalAccuracyPropertyType:
    class Meta:
        name = "DQ_TemporalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_validity: Optional[DqTemporalValidity1] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalConsistencyPropertyType1:
    class Meta:
        name = "DQ_TemporalConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_temporal_consistency: Optional[DqTemporalConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalValidityPropertyType1:
    class Meta:
        name = "DQ_TemporalValidity_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_temporal_validity: Optional[DqTemporalValidity1] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqThematicAccuracyPropertyType:
    class Meta:
        name = "DQ_ThematicAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_non_quantitative_attribute_accuracy: Optional[
        DqNonQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqThematicClassificationCorrectnessPropertyType1:
    class Meta:
        name = "DQ_ThematicClassificationCorrectness_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTopologicalConsistencyPropertyType1:
    class Meta:
        name = "DQ_TopologicalConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_topological_consistency: Optional[DqTopologicalConsistency1] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdServiceIdentificationType(AbstractMdIdentificationType1):
    """
    See 19119 for further info.
    """

    class Meta:
        name = "MD_ServiceIdentification_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class Ring(RingType):
    """A ring is used to represent a single connected component of a surface
    boundary as specified in ISO 19107:2003, 6.3.6.

    Every gml:curveMember references or contains one curve, i.e. any
    element which is substitutable for gml:AbstractCurve. In the context
    of a ring, the curves describe the boundary of the surface. The
    sequence of curves shall be contiguous and connected in a cycle. If
    provided, the aggregationType attribute shall have the value
    "sequence".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateOperationAccuracy:
    """Gml:coordinateOperationAccuracy is an association role to a
    DQ_PositionalAccuracy object as encoded in ISO/TS 19139, either referencing or
    containing the definition of that positional accuracy.

    That object contains an estimate of the impact of this coordinate
    operation on point accuracy. That is, it gives position error
    estimates for the target coordinates of this coordinate operation,
    assuming no errors in the source coordinates.
    """

    class Meta:
        name = "coordinateOperationAccuracy"
        namespace = "http://www.opengis.net/gml/3.2"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy1
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MdConstraints2(MdConstraintsType2):
    """
    Restrictions on the access and use of a resource or metadata.
    """

    class Meta:
        name = "MD_Constraints"
        namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"


@dataclass
class MdLegalConstraintsType2(MdConstraintsType2):
    """
    :ivar access_constraints: access constraints applied to assure the
        protection of privacy or intellectual property, and any special
        restrictions or limitations on obtaining the resource or
        metadata
    :ivar use_constraints: constraints applied to assure the protection
        of privacy or intellectual property, and any special
        restrictions or limitations or warnings on using the resource or
        metadata
    :ivar other_constraints: other restrictions and legal prerequisites
        for accessing and using the resource or metadata
    """

    class Meta:
        name = "MD_LegalConstraints_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    access_constraints: List[MdRestrictionCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "accessConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    use_constraints: List[MdRestrictionCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "useConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    other_constraints: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "otherConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )


@dataclass
class MdSecurityConstraintsType2(MdConstraintsType2):
    """
    :ivar classification: name of the handling restrictions on the
        resource or metadata
    :ivar user_note: explanation of the application of the legal
        constraints or other restrictions and legal prerequisites for
        obtaining and using the resource or metadata
    :ivar classification_system: name of the classification system
    :ivar handling_description: additional information about the
        restrictions on handling the resource or metadata
    """

    class Meta:
        name = "MD_SecurityConstraints_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    classification: Optional[MdClassificationCodePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
            "required": True,
        },
    )
    user_note: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "userNote",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    classification_system: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "classificationSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    handling_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "handlingDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )


@dataclass
class MdMetadataExtensionInformation2(MdMetadataExtensionInformationType2):
    """
    Information describing metadata extensions.
    """

    class Meta:
        name = "MD_MetadataExtensionInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"


@dataclass
class MdServiceIdentification(MdServiceIdentificationType):
    class Meta:
        name = "MD_ServiceIdentification"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractCoordinateOperationType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: Optional["DomainOfValidity"] = field(
        default=None,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    scope: List[Scope] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    operation_version: Optional[OperationVersion] = field(
        default=None,
        metadata={
            "name": "operationVersion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_operation_accuracy: List[CoordinateOperationAccuracy] = field(
        default_factory=list,
        metadata={
            "name": "coordinateOperationAccuracy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    source_crs: Optional[SourceCrs] = field(
        default=None,
        metadata={
            "name": "sourceCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    target_crs: Optional[TargetCrs] = field(
        default=None,
        metadata={
            "name": "targetCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractRingPropertyType:
    """
    A property with the content model of gml:AbstractRingPropertyType encapsulates
    a ring to represent the surface boundary property of a surface.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CurveArrayPropertyType:
    """A container for an array of curves.

    The elements are always contained in the array property, referencing
    geometry elements or arrays of geometry elements via XLinks is not
    supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_curve: List[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_curve: List[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    curve: List[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    ring: List[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    linear_ring: List[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string: List[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RingPropertyType:
    """
    A property with the content model of gml:RingPropertyType encapsulates a ring
    to represent a component of a surface boundary.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class AbstractMetadataExtensionPropertyType:
    class Meta:
        name = "Abstract_MetadataExtension_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_metadata_extension_information: Optional[
        MdMetadataExtensionInformation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_MetadataExtensionInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdLegalConstraints2(MdLegalConstraintsType2):
    """
    Restrictions and legal prerequisites for accessing and using the resource or
    metadata.
    """

    class Meta:
        name = "MD_LegalConstraints"
        namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"


@dataclass
class MdSecurityConstraints2(MdSecurityConstraintsType2):
    """
    Handling restrictions imposed on the resource or metadata for national security
    or similar security concerns.
    """

    class Meta:
        name = "MD_SecurityConstraints"
        namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"


@dataclass
class MdMetadataExtensionInformationPropertyType2:
    class Meta:
        name = "MD_MetadataExtensionInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mex/1.0"

    md_metadata_extension_information: Optional[
        MdMetadataExtensionInformation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_MetadataExtensionInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdServiceIdentificationPropertyType:
    class Meta:
        name = "MD_ServiceIdentification_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_service_identification: Optional[MdServiceIdentification] = field(
        default=None,
        metadata={
            "name": "MD_ServiceIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCoordinateOperation(AbstractCoordinateOperationType):
    """Gml:AbstractCoordinateOperation is a mathematical operation on coordinates
    that transforms or converts coordinates to another coordinate reference system.

    Many but not all coordinate operations (from CRS A to CRS B) also
    uniquely define the inverse operation (from CRS B to CRS A). In some
    cases, the operation method algorithm for the inverse operation is
    the same as for the forward algorithm, but the signs of some
    operation parameter values shall be reversed. In other cases,
    different algorithms are required for the forward and inverse
    operations, but the same operation parameter values are used. If
    (some) entirely different parameter values are needed, a different
    coordinate operation shall be defined. The optional
    coordinateOperationAccuracy property elements provide estimates of
    the impact of this coordinate operation on point position accuracy.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralConversionType(AbstractCoordinateOperationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_version: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    source_crs: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    target_crs: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class AbstractGeneralTransformationType(AbstractCoordinateOperationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    operation_version: Optional[OperationVersion] = field(
        default=None,
        metadata={
            "name": "operationVersion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    source_crs: Optional[SourceCrs] = field(
        default=None,
        metadata={
            "name": "sourceCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    target_crs: Optional[TargetCrs] = field(
        default=None,
        metadata={
            "name": "targetCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class AbstractOperation(AbstractCoordinateOperationType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSingleOperation(AbstractCoordinateOperationType):
    """
    Gml:AbstractSingleOperation is a single (not concatenated) coordinate
    operation.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PassThroughOperationType(AbstractCoordinateOperationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    modified_coordinate: List[ModifiedCoordinate] = field(
        default_factory=list,
        metadata={
            "name": "modifiedCoordinate",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    uses_operation: Optional["UsesOperation"] = field(
        default=None,
        metadata={
            "name": "usesOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_single_operation: Optional["UsesSingleOperation"] = field(
        default=None,
        metadata={
            "name": "usesSingleOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coord_operation: Optional["CoordOperation"] = field(
        default=None,
        metadata={
            "name": "coordOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class CurveArrayProperty(CurveArrayPropertyType):
    class Meta:
        name = "curveArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveMembers(CurveArrayPropertyType):
    """This property element contains a list of curves.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "curveMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Exterior(AbstractRingPropertyType):
    """A boundary of a surface consists of a number of rings.

    In the normal 2D case, one of these rings is distinguished as being
    the exterior boundary. In a general manifold this is not always
    possible, in which case all boundaries shall be listed as interior
    boundaries, and the exterior will be empty.
    """

    class Meta:
        name = "exterior"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Interior(AbstractRingPropertyType):
    """A boundary of a surface consists of a number of rings.

    The "interior" rings separate the surface / surface patch from the
    area enclosed by the rings.
    """

    class Meta:
        name = "interior"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractConstraintsPropertyType:
    class Meta:
        name = "Abstract_Constraints_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_security_constraints: Optional[MdSecurityConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    md_legal_constraints: Optional[MdLegalConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    md_constraints: Optional[MdConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_Constraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdConstraintsPropertyType2:
    class Meta:
        name = "MD_Constraints_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    md_security_constraints: Optional[MdSecurityConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    md_legal_constraints: Optional[MdLegalConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    md_constraints: Optional[MdConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_Constraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdLegalConstraintsPropertyType2:
    class Meta:
        name = "MD_LegalConstraints_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    md_legal_constraints: Optional[MdLegalConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSecurityConstraintsPropertyType2:
    class Meta:
        name = "MD_SecurityConstraints_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mco/1.0"

    md_security_constraints: Optional[MdSecurityConstraints2] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mco/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractGeneralConversion(AbstractGeneralConversionType):
    """Gm:AbstractGeneralConversion is an abstract operation on coordinates that
    does not include any change of datum.

    The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters. The operationVersion, sourceCRS, and targetCRS elements are omitted in a coordinate conversion.
    This abstract complex type is expected to be extended for well-known operation methods with many Conversion instances, in GML Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralTransformation(AbstractGeneralTransformationType):
    """Gml:AbstractGeneralTransformation is an abstract operation on coordinates
    that usually includes a change of Datum.

    The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation. The operationVersion, sourceCRS, and targetCRS proeprty elements are mandatory in a coordinate transformation.
    This abstract complex type is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConversionType(AbstractGeneralConversionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_method: Optional[UsesMethod] = field(
        default=None,
        metadata={
            "name": "usesMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    method: Optional[Method] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_value: List[IncludesValue] = field(
        default_factory=list,
        metadata={
            "name": "includesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_value: List[UsesValue] = field(
        default_factory=list,
        metadata={
            "name": "usesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: List[ParameterValue2] = field(
        default_factory=list,
        metadata={
            "name": "parameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiCurveType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    curve_member: List[CurveMember] = field(
        default_factory=list,
        metadata={
            "name": "curveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve_members: Optional[CurveMembers] = field(
        default=None,
        metadata={
            "name": "curveMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class PassThroughOperation(PassThroughOperationType):
    """Gml:PassThroughOperation is a pass-through operation specifies that a subset
    of a coordinate tuple is subject to a specific coordinate operation.

    The modifiedCoordinate property elements are an ordered sequence of
    positive integers defining the positions in a coordinate tuple of
    the coordinates affected by this pass-through operation. The
    AggregationAttributeGroup should be used to specify that the
    modifiedCoordinate elements are ordered.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolygonPatchType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interior: List[Interior] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: SurfaceInterpolationType = field(
        init=False,
        default=SurfaceInterpolationType.PLANAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PolygonType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interior: List[Interior] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RectangleType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: SurfaceInterpolationType = field(
        init=False,
        default=SurfaceInterpolationType.PLANAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TransformationType(AbstractGeneralTransformationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_method: Optional[UsesMethod] = field(
        default=None,
        metadata={
            "name": "usesMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    method: Optional[Method] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_value: List[IncludesValue] = field(
        default_factory=list,
        metadata={
            "name": "includesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_value: List[UsesValue] = field(
        default_factory=list,
        metadata={
            "name": "usesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: List[ParameterValue2] = field(
        default_factory=list,
        metadata={
            "name": "parameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TriangleType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: SurfaceInterpolationType = field(
        init=False,
        default=SurfaceInterpolationType.PLANAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MdBrowseGraphicType1(AbstractObjectType1):
    """
    :ivar file_name: name of the file that contains a graphic that
        provides an illustration of the dataset
    :ivar file_description: text description of the illustration
    :ivar file_type:
    :ivar image_constraints: restriction on access and/or use of browse
        graphic
    :ivar linkage: link to browse graphic
    """

    class Meta:
        name = "MD_BrowseGraphic_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    file_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "fileName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
            "required": True,
        },
    )
    file_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "fileDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    file_type: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    image_constraints: List[AbstractConstraintsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "imageConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    linkage: List[AbstractOnlineResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )


@dataclass
class Conversion1(ConversionType):
    """Gml:Conversion is a concrete operation on coordinates that does not include
    any change of Datum.

    The best-known example of a coordinate conversion is a map
    projection. The parameters describing coordinate conversions are
    defined rather than empirically derived. Note that some conversions
    have no parameters. This concrete complex type can be used without
    using a GML Application Schema that defines operation-method-
    specialized element names and contents, especially for methods with
    only one Conversion instance. The usesValue property elements are an
    unordered list of composition associations to the set of parameter
    values used by this conversion operation.
    """

    class Meta:
        name = "Conversion"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurve(MultiCurveType):
    """A gml:MultiCurve is defined by one or more gml:AbstractCurves.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:curveMember) or the array property
    (gml:curveMembers). It is also valid to use both the "standard" and
    the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PassThroughOperationPropertyType:
    """
    Gml:PassThroughOperationPropertyType is a property type for association roles
    to a pass through operation, either referencing or containing the definition of
    that pass through operation.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Polygon(PolygonType):
    """A Polygon is a special surface that is defined by a single surface patch
    (see D.3.6).

    The boundary of this patch is coplanar and the polygon uses planar
    interpolation in its interior. The elements exterior and interior
    describe the surface boundary of the polygon.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolygonPatch(PolygonPatchType):
    """A gml:PolygonPatch is a surface patch that is defined by a set of boundary
    curves and an underlying surface to which these curves adhere.

    The curves shall be coplanar and the polygon uses planar
    interpolation in its interior. interpolation is fixed to "planar",
    i.e. an interpolation shall return points on a single plane. The
    boundary of the patch shall be contained within that plane.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Rectangle(RectangleType):
    """Gml:Rectangle represents a rectangle as a surface patch with an outer
    boundary consisting of a linear ring.

    Note that this is a polygon (subtype) with no inner boundaries. The
    number of points in the linear ring shall be five. The ring (element
    exterior) shall be a gml:LinearRing and shall form a rectangle; the
    first and the last position shall be coincident. interpolation is
    fixed to "planar", i.e. an interpolation shall return points on a
    single plane. The boundary of the patch shall be contained within
    that plane.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Transformation(TransformationType):
    """Gml:Transformation is a concrete object element derived from
    gml:GeneralTransformation (13.6.2.13).

    This concrete object can be used for all operation methods, without
    using a GML Application Schema that defines operation-method-
    specialized element names and contents, especially for methods with
    only one Transformation instance. The parameterValue elements are an
    unordered list of composition associations to the set of parameter
    values used by this conversion operation.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Triangle(TriangleType):
    """Gml:Triangle represents a triangle as a surface patch with an outer boundary
    consisting of a linear ring.

    Note that this is a polygon (subtype) with no inner boundaries. The
    number of points in the linear ring shall be four. The ring (element
    exterior) shall be a gml:LinearRing and shall form a triangle, the
    first and the last position shall be coincident. interpolation is
    fixed to "planar", i.e. an interpolation shall return points on a
    single plane. The boundary of the patch shall be contained within
    that plane.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MdBrowseGraphic1(MdBrowseGraphicType1):
    """
    Graphic that provides an illustration of the dataset (should include a legend
    for the graphic, if applicable)
    """

    class Meta:
        name = "MD_BrowseGraphic"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class ConversionPropertyType:
    """
    Gml:ConversionPropertyType is a property type for association roles to a
    concrete general-purpose conversion, either referencing or containing the
    definition of that conversion.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CoordinateOperationPropertyType:
    """
    Gml:CoordinateOperationPropertyType is a property type for association roles to
    a coordinate operation, either referencing or containing the definition of that
    coordinate operation.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    concatenated_operation: Optional["ConcatenatedOperation"] = field(
        default=None,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeneralConversionPropertyType:
    """
    Gml:GeneralConversionPropertyType is a property type for association roles to a
    general conversion, either referencing or containing the definition of that
    conversion.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeneralTransformationPropertyType:
    """
    Gml:GeneralTransformationPropertyType is a property type for association roles
    to a general transformation, either referencing or containing the definition of
    that transformation.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiCurvePropertyType:
    """A property that has a collection of curves as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OperationPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SingleOperationPropertyType:
    """
    Gml:SingleOperationPropertyType is a property type for association roles to a
    single operation, either referencing or containing the definition of that
    single operation.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SurfacePatchArrayPropertyType:
    """
    Gml:SurfacePatchArrayPropertyType is a container for a sequence of surface
    patches.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    sphere: List[Sphere] = field(
        default_factory=list,
        metadata={
            "name": "Sphere",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    cylinder: List[Cylinder] = field(
        default_factory=list,
        metadata={
            "name": "Cylinder",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    cone: List[Cone] = field(
        default_factory=list,
        metadata={
            "name": "Cone",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    rectangle: List[Rectangle] = field(
        default_factory=list,
        metadata={
            "name": "Rectangle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangle: List[Triangle] = field(
        default_factory=list,
        metadata={
            "name": "Triangle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon_patch: List[PolygonPatch] = field(
        default_factory=list,
        metadata={
            "name": "PolygonPatch",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )


@dataclass
class TransformationPropertyType:
    """
    Gml:TransformationPropertyType is a property type for association roles to a
    transformation, either referencing or containing the definition of that
    transformation.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class PassThroughOperationRef(PassThroughOperationPropertyType):
    class Meta:
        name = "passThroughOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MdBrowseGraphicPropertyType1:
    class Meta:
        name = "MD_BrowseGraphic_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_browse_graphic: Optional[MdBrowseGraphic1] = field(
        default=None,
        metadata={
            "name": "MD_BrowseGraphic",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ConversionRef(ConversionPropertyType):
    class Meta:
        name = "conversionRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Conversion2(GeneralConversionPropertyType):
    """
    Gml:conversion is an association role to the coordinate conversion used to
    define the derived CRS.
    """

    class Meta:
        name = "conversion"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordOperation(CoordinateOperationPropertyType):
    """
    Gml:coordOperation is an association role to a coordinate operation.
    """

    class Meta:
        name = "coordOperation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateOperationRef(CoordinateOperationPropertyType):
    class Meta:
        name = "coordinateOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinedByConversion(GeneralConversionPropertyType):
    class Meta:
        name = "definedByConversion"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeneralConversionRef(GeneralConversionPropertyType):
    class Meta:
        name = "generalConversionRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeneralTransformationRef(GeneralTransformationPropertyType):
    class Meta:
        name = "generalTransformationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCenterLineOf(MultiCurvePropertyType):
    class Meta:
        name = "multiCenterLineOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveProperty(MultiCurvePropertyType):
    class Meta:
        name = "multiCurveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiEdgeOf(MultiCurvePropertyType):
    class Meta:
        name = "multiEdgeOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationRef(OperationPropertyType):
    class Meta:
        name = "operationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Patches(SurfacePatchArrayPropertyType):
    """The patches property element contains the sequence of surface patches.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "patches"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolygonPatches(SurfacePatchArrayPropertyType):
    class Meta:
        name = "polygonPatches"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SingleOperationRef(SingleOperationPropertyType):
    class Meta:
        name = "singleOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TransformationRef(TransformationPropertyType):
    class Meta:
        name = "transformationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TrianglePatches(SurfacePatchArrayPropertyType):
    class Meta:
        name = "trianglePatches"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesOperation(CoordinateOperationPropertyType):
    class Meta:
        name = "usesOperation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesSingleOperation(CoordinateOperationPropertyType):
    class Meta:
        name = "usesSingleOperation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiOrganisationType2(AbstractCiPartyType2):
    """
    :ivar logo: Graphic identifying organization
    :ivar individual:
    """

    class Meta:
        name = "CI_Organisation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    logo: List[MdBrowseGraphicPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    individual: List[CiIndividualPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class CiCitationType1(AbstractCitationType):
    """
    :ivar title: name by which the cited resource is known
    :ivar alternate_title: short name or other language name by which
        the cited information is known. Example: DCW as an alternative
        title for Digital Chart of the World
    :ivar date: reference date for the cited resource
    :ivar edition: version of the cited resource
    :ivar edition_date: date of the edition
    :ivar identifier: value uniquely identifying an object within a
        namespace
    :ivar cited_responsible_party: name and position information for an
        individual or organisation that is responsible for the resource
    :ivar presentation_form: mode in which the resource is represented
    :ivar series: information about the series, or aggregate resource,
        of which the resource is a part
    :ivar other_citation_details: other information required to complete
        the citation that is not recorded elsewhere
    :ivar isbn: international Standard Book Number
    :ivar issn: international Standard Serial Number
    :ivar online_resource: online reference to the cited resource
    :ivar graphic: citation graphic or logo for cited party
    """

    class Meta:
        name = "CI_Citation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    title: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
            "required": True,
        },
    )
    alternate_title: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "alternateTitle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    date: List[CiDatePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    edition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    edition_date: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "editionDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    identifier: List["MdIdentifierPropertyType1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    cited_responsible_party: List[CiResponsibilityPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "citedResponsibleParty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    presentation_form: List[CiPresentationFormCodePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "presentationForm",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    series: Optional[CiSeriesPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    other_citation_details: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "otherCitationDetails",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    isbn: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "ISBN",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    issn: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "ISSN",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    online_resource: List[CiOnlineResourcePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "onlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    graphic: List[MdBrowseGraphicPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )


@dataclass
class ConcatenatedOperationType(AbstractCoordinateOperationType):
    """Gml:ConcatenatedOperation is an ordered sequence of two or more coordinate
    operations.

    This sequence of operations is constrained by the requirement that
    the source coordinate reference system of step (n+1) must be the
    same as the target coordinate reference system of step (n). The
    source coordinate reference system of the first step and the target
    coordinate reference system of the last step are the source and
    target coordinate reference system associated with the concatenated
    operation. Instead of a forward operation, an inverse operation may
    be used for one or more of the operation steps mentioned above, if
    the inverse operation is uniquely defined by the forward operation.
    The gml:coordOperation property elements are an ordered sequence of
    associations to the two or more operations used by this concatenated
    operation. The AggregationAttributeGroup should be used to specify
    that the coordOperation associations are ordered.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_operation: List[UsesOperation] = field(
        default_factory=list,
        metadata={
            "name": "usesOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_single_operation: List[UsesSingleOperation] = field(
        default_factory=list,
        metadata={
            "name": "usesSingleOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coord_operation: List[CoordOperation] = field(
        default_factory=list,
        metadata={
            "name": "coordOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class SurfaceType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    triangle_patches: Optional[TrianglePatches] = field(
        default=None,
        metadata={
            "name": "trianglePatches",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon_patches: Optional[PolygonPatches] = field(
        default=None,
        metadata={
            "name": "polygonPatches",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    patches: Optional[Patches] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CiOrganisation2(CiOrganisationType2):
    """
    Information about the party if the party is an organisation.
    """

    class Meta:
        name = "CI_Organisation"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class CiCitation1(CiCitationType1):
    """
    Standardized resource reference.
    """

    class Meta:
        name = "CI_Citation"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"


@dataclass
class ConcatenatedOperation(ConcatenatedOperationType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolyhedralSurface(SurfaceType):
    """A polyhedral surface is a surface composed of polygon patches connected
    along their common boundary curves.

    This differs from the surface type only in the restriction on the
    types of surface patches acceptable. polygonPatches encapsulates the
    polygon patches of the polyhedral surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Surface(SurfaceType):
    """A Surface is a 2-dimensional primitive and is composed of one or more
    surface patches as specified in ISO 19107:2003, 6.3.17.1.

    The surface patches are connected to one another. patches
    encapsulates the patches of the surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TinType(SurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    stop_lines: List[LineStringSegmentArrayPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "stopLines",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    break_lines: List[LineStringSegmentArrayPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "breakLines",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    max_length: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "maxLength",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    control_point: Optional["TinType.ControlPoint"] = field(
        default=None,
        metadata={
            "name": "controlPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )

    @dataclass
    class ControlPoint:
        pos_list: Optional[PosList] = field(
            default=None,
            metadata={
                "name": "posList",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        pos: List[Pos] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        point_property: List[PointProperty] = field(
            default_factory=list,
            metadata={
                "name": "pointProperty",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class TriangulatedSurface(SurfaceType):
    """A triangulated surface is a polyhedral surface that is composed only of
    triangles.

    There is no restriction on how the triangulation is derived.
    trianglePatches encapsulates the triangles of the triangulated
    surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCiPartyPropertyType2:
    class Meta:
        name = "AbstractCI_Party_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_organisation: Optional[CiOrganisation2] = field(
        default=None,
        metadata={
            "name": "CI_Organisation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    ci_individual: Optional[CiIndividual2] = field(
        default=None,
        metadata={
            "name": "CI_Individual",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOrganisationPropertyType2:
    class Meta:
        name = "CI_Organisation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_organisation: Optional[CiOrganisation2] = field(
        default=None,
        metadata={
            "name": "CI_Organisation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiCitationPropertyType1:
    class Meta:
        name = "CI_Citation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/2.0"

    ci_citation: Optional[CiCitation1] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ConcatenatedOperationPropertyType:
    """
    Gml:ConcatenatedOperationPropertyType is a property type for association roles
    to a concatenated operation, either referencing or containing the definition of
    that concatenated operation.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    concatenated_operation: Optional[ConcatenatedOperation] = field(
        default=None,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Tin(TinType):
    """A tin is a triangulated surface that uses the Delauny algorithm or a similar
    algorithm complemented with consideration of stoplines (stopLines), breaklines
    (breakLines), and maximum length of triangle sides (maxLength).

    controlPoint shall contain a set of the positions (three or more)
    used as posts for this TIN (corners of the triangles in the TIN).
    See ISO 19107:2003, 6.4.39 for details.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibilityType2(AbstractResponsibilityType):
    """
    :ivar role: function performed by the responsible party
    :ivar extent: spatial or temporal extent of the role
    :ivar party:
    """

    class Meta:
        name = "CI_Responsibility_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    role: Optional[CiRoleCodePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "required": True,
        },
    )
    extent: List["AbstractExtentPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    party: List[AbstractCiPartyPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class SurfacePropertyType:
    """A property that has a surface as its value domain may either be an
    appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional["Shell"] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ConcatenatedOperationRef(ConcatenatedOperationPropertyType):
    class Meta:
        name = "concatenatedOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibility2(CiResponsibilityType2):
    """
    Information about the party and their role.
    """

    class Meta:
        name = "CI_Responsibility"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class BaseSurface(SurfacePropertyType):
    """The property baseSurface references or contains the base surface.

    The property baseSurface either references the base surface via the
    XLink-attributes or contains the surface element. A surface element
    is any element which is substitutable for gml:AbstractSurface. The
    base surface has positive orientation.
    """

    class Meta:
        name = "baseSurface"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExtentOf(SurfacePropertyType):
    class Meta:
        name = "extentOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceMember(SurfacePropertyType):
    """This property element either references a surface via the XLink-attributes
    or contains the surface element.

    A surface element is any element, which is substitutable for
    gml:AbstractSurface.
    """

    class Meta:
        name = "surfaceMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceProperty(SurfacePropertyType):
    """This property element either references a surface via the XLink-attributes
    or contains the surface element.

    surfaceProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for AbstractSurface.
    """

    class Meta:
        name = "surfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibilityPropertyType2:
    class Meta:
        name = "CI_Responsibility_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_responsibility: Optional[CiResponsibility2] = field(
        default=None,
        metadata={
            "name": "CI_Responsibility",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ShellType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    surface_member: List[SurfaceMember] = field(
        default_factory=list,
        metadata={
            "name": "surfaceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class CiCitationType2(AbstractCitationType):
    """
    :ivar title: name by which the cited resource is known
    :ivar alternate_title: short name or other language name by which
        the cited information is known. Example: DCW as an alternative
        title for Digital Chart of the World
    :ivar date: reference date for the cited resource
    :ivar edition: version of the cited resource
    :ivar edition_date: date of the edition
    :ivar identifier: value uniquely identifying an object within a
        namespace
    :ivar cited_responsible_party: name and position information for an
        individual or organisation that is responsible for the resource
    :ivar presentation_form: mode in which the resource is represented
    :ivar series: information about the series, or aggregate resource,
        of which the resource is a part
    :ivar other_citation_details: other information required to complete
        the citation that is not recorded elsewhere
    :ivar isbn: international Standard Book Number
    :ivar issn: international Standard Serial Number
    :ivar online_resource: online reference to the cited resource
    :ivar graphic: citation graphic or logo for cited party
    """

    class Meta:
        name = "CI_Citation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    title: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
            "required": True,
        },
    )
    alternate_title: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "alternateTitle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    date: List[CiDatePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    edition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    edition_date: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "editionDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    identifier: List["MdIdentifierPropertyType1"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    cited_responsible_party: List[CiResponsibilityPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "citedResponsibleParty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    presentation_form: List[CiPresentationFormCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "presentationForm",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    series: Optional[CiSeriesPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    other_citation_details: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "otherCitationDetails",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    isbn: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "ISBN",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    issn: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "ISSN",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    online_resource: List[CiOnlineResourcePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "onlineResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    graphic: List[MdBrowseGraphicPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )


@dataclass
class PtLocaleContainerType1(PtLocaleType1):
    class Meta:
        name = "PT_LocaleContainer_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "required": True,
        },
    )
    locale: Optional["PtLocalePropertyType1"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "required": True,
        },
    )
    date: List[CiDatePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "min_occurs": 1,
        },
    )
    responsible_party: List[CiResponsibilityPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "responsibleParty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "min_occurs": 1,
        },
    )
    localised_string: List[LocalisedCharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "localisedString",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class Shell(ShellType):
    """A shell is used to represent a single connected component of a solid
    boundary as specified in ISO 19107:2003, 6.3.8.

    Every gml:surfaceMember references or contains one surface, i.e. any
    element which is substitutable for gml:AbstractSurface. In the
    context of a shell, the surfaces describe the boundary of the solid.
    If provided, the aggregationType attribute shall have the value
    "set".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiCitation2(CiCitationType2):
    """
    Standardized resource reference.
    """

    class Meta:
        name = "CI_Citation"
        namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"


@dataclass
class PtLocaleContainer1(PtLocaleContainerType1):
    class Meta:
        name = "PT_LocaleContainer"
        namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"


@dataclass
class ShellPropertyType:
    """
    A property with the content model of gml:ShellPropertyType encapsulates a shell
    to represent a component of a solid boundary.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class SurfaceArrayPropertyType:
    """Gml:SurfaceArrayPropertyType is a container for an array of surfaces.

    The elements are always contained in the array property, referencing
    geometry elements or arrays of geometry elements via XLinks is not
    supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_surface: List[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    shell: List[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_surface: List[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    tin: List[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangulated_surface: List[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polyhedral_surface: List[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    surface: List[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon: List[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CiCitationPropertyType2:
    class Meta:
        name = "CI_Citation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cit/1.0"

    ci_citation: Optional[CiCitation2] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtLocaleContainerPropertyType1:
    class Meta:
        name = "PT_LocaleContainer_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    pt_locale_container: Optional[PtLocaleContainer1] = field(
        default=None,
        metadata={
            "name": "PT_LocaleContainer",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtLocalePropertyType1:
    class Meta:
        name = "PT_Locale_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/lan/1.0"

    pt_locale_container: Optional[PtLocaleContainer1] = field(
        default=None,
        metadata={
            "name": "PT_LocaleContainer",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    pt_locale: Optional[PtLocale1] = field(
        default=None,
        metadata={
            "name": "PT_Locale",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/lan/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCitationPropertyType:
    class Meta:
        name = "Abstract_Citation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    ci_citation: Optional[CiCitation2] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/1.0",
        },
    )
    standards_iso_org_iso_19115_3_cit_2_0_ci_citation: Optional[
        CiCitation1
    ] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cit/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SolidType(AbstractSolidType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[ShellPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interior: List[ShellPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SurfaceArrayProperty(SurfaceArrayPropertyType):
    class Meta:
        name = "surfaceArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceMembers(SurfaceArrayPropertyType):
    """This property element contains a list of surfaces.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "surfaceMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCtCatalogueType(AbstractObjectType1):
    class Meta:
        name = "AbstractCT_Catalogue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )
    scope: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "min_occurs": 1,
        },
    )
    field_of_application: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "fieldOfApplication",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    version_number: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "versionNumber",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )
    version_date: Optional[DatePropertyType1] = field(
        default=None,
        metadata={
            "name": "versionDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "required": True,
        },
    )
    language: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    character_set: Optional[MdCharacterSetCodePropertyType1] = field(
        default=None,
        metadata={
            "name": "characterSet",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    locale: List[PtLocalePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )


@dataclass
class MdApplicationSchemaInformationType2(
    AbstractApplicationSchemaInformationType
):
    """
    :ivar name: name of the application schema used
    :ivar schema_language: identification of the schema language used
    :ivar constraint_language: formal language used in Application
        Schema
    :ivar schema_ascii: full application schema given as an ASCII file
    :ivar graphics_file: full application schema given as a graphics
        file
    :ivar software_development_file: full application schema given as a
        software development file
    :ivar software_development_file_format: software dependent format
        used for the application schema software dependent file
    """

    class Meta:
        name = "MD_ApplicationSchemaInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mas/1.0"

    name: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
            "required": True,
        },
    )
    schema_language: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "schemaLanguage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
            "required": True,
        },
    )
    constraint_language: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "constraintLanguage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
            "required": True,
        },
    )
    schema_ascii: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "schemaAscii",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
        },
    )
    graphics_file: Optional[AbstractOnlineResourcePropertyType] = field(
        default=None,
        metadata={
            "name": "graphicsFile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
        },
    )
    software_development_file: Optional[
        AbstractOnlineResourcePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "softwareDevelopmentFile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
        },
    )
    software_development_file_format: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "softwareDevelopmentFileFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
        },
    )


@dataclass
class MdIdentifierType1(AbstractObjectType1):
    """
    :ivar authority: Citation for the code namespace and optionally the
        person or party responsible for maintenance of that namespace
    :ivar code: alphanumeric value identifying an instance in the
        namespace e.g. EPSG::4326
    :ivar code_space: Identifier or namespace in which the code is valid
    :ivar version: version identifier for the namespace
    :ivar description: natural language description of the meaning of
        the code value E.G for codeSpace = EPSG, code = 4326:
        description = WGS-84" to "for codeSpace = EPSG, code =
        EPSG::4326: description = WGS-84
    """

    class Meta:
        name = "MD_Identifier_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    authority: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
            "required": True,
        },
    )
    code_space: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    version: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )


@dataclass
class MdPortrayalCatalogueReferenceType2(
    AbstractPortrayalCatalogueInformationType
):
    """
    :ivar portrayal_catalogue_citation: bibliographic reference to the
        portrayal catalogue cited
    """

    class Meta:
        name = "MD_PortrayalCatalogueReference_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mpc/1.0"

    portrayal_catalogue_citation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "portrayalCatalogueCitation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mpc/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class MdFeatureCatalogueDescriptionType2(AbstractContentInformationType):
    """
    :ivar compliance_code: indication of whether or not the cited
        feature catalogue complies with ISO 19110
    :ivar locale: language(s) used within the catalogue
    :ivar included_with_dataset: indication of whether or not the
        feature catalogue is included with the resource
    :ivar feature_types: subset of feature types from cited feature
        catalogue occurring in dataset
    :ivar feature_catalogue_citation: complete bibliographic reference
        to one or more external feature catalogues
    """

    class Meta:
        name = "MD_FeatureCatalogueDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    compliance_code: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "complianceCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    locale: List[PtLocalePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    included_with_dataset: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "includedWithDataset",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    feature_types: List[MdFeatureTypeInfoPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureTypes",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    feature_catalogue_citation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureCatalogueCitation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdAssociatedResourceType(AbstractObjectType1):
    """
    :ivar name: citation information about the associated resource
    :ivar association_type: type of relation between the resources
    :ivar initiative_type: type of initiative under which the associated
        resource was produced NOTE: the activity that resulted in the
        associated resource
    :ivar metadata_reference: reference to the metadata of the
        associated resource
    """

    class Meta:
        name = "MD_AssociatedResource_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    name: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    association_type: Optional[DsAssociationTypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "associationType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )
    initiative_type: Optional[DsInitiativeTypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "initiativeType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    metadata_reference: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "metadataReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )


@dataclass
class MdKeywordClassType(AbstractObjectType1):
    """
    :ivar class_name: character string to label the keyword category in
        natural language
    :ivar concept_identifier: URI of concept in ontology specified by
        the ontology attribute; this concept is labeled by the
        className: CharacterString.
    :ivar ontology: a reference that binds the keyword class to a formal
        conceptualization of a knowledge domain for use in semantic
        processingNOTE: Keywords in the associated MD_Keywords keyword
        list must be within the scope of this ontology
    """

    class Meta:
        name = "MD_KeywordClass_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    class_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "className",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )
    concept_identifier: Optional[UriPropertyType] = field(
        default=None,
        metadata={
            "name": "conceptIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    ontology: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )


@dataclass
class MdUsageType2(AbstractObjectType1):
    """
    :ivar specific_usage: brief description of the resource and/or
        resource series usage
    :ivar usage_date_time: date and time of the first use or range of
        uses of the resource and/or resource series
    :ivar user_determined_limitations: applications, determined by the
        user for which the resource and/or resource series is not
        suitable
    :ivar user_contact_info: identification of and means of
        communicating with person(s) and organisation(s) using the
        resource(s)
    :ivar response: response to the user-determined limitationsE.G..
        'this has been fixed in version x'
    :ivar additional_documentation:
    :ivar identified_issues:
    """

    class Meta:
        name = "MD_Usage_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    specific_usage: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "specificUsage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )
    usage_date_time: List[TmPrimitivePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "usageDateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    user_determined_limitations: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "userDeterminedLimitations",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    user_contact_info: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "userContactInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    response: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    additional_documentation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "additionalDocumentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    identified_issues: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "identifiedIssues",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )


@dataclass
class LeAlgorithmType(AbstractObjectType1):
    """
    :ivar citation: Description: information identifying the algorithm
        and version or date FGDC: Algorithm_Identifiers Position: 1
        shortName: algId
    :ivar description: Description: information describing the algorithm
        used to generate the data FGDC: Algorithm_Description Position:
        2 shortName: algDesc
    """

    class Meta:
        name = "LE_Algorithm_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )


@dataclass
class DqEvaluationMethodType(AbstractObjectType1):
    """
    :ivar date_time: date or range of dates on which a data quality
        measure was applied
    :ivar evaluation_method_description: description of the evaluation
        method
    :ivar evaluation_procedure: reference to the procedure information
    :ivar reference_doc: Information on documents which are referenced
        in developing and applying a data quality evaluation method
    :ivar evaluation_method_type: type of method used to evaluate
        quality of the data
    """

    class Meta:
        name = "DQ_EvaluationMethod_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    date_time: List[DateTimePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    evaluation_method_description: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "evaluationMethodDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    evaluation_procedure: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "evaluationProcedure",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    reference_doc: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "referenceDoc",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    evaluation_method_type: Optional[
        DqEvaluationMethodTypeCodePropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "evaluationMethodType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class MultiSurfaceType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    surface_member: List[SurfaceMember] = field(
        default_factory=list,
        metadata={
            "name": "surfaceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface_members: Optional[SurfaceMembers] = field(
        default=None,
        metadata={
            "name": "surfaceMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Solid(SolidType):
    """A solid is the basis for 3-dimensional geometry.

    The extent of a solid is defined by the boundary surfaces as
    specified in ISO 19107:2003, 6.3.18. exterior specifies the outer
    boundary, interior the inner boundary of the solid.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcDefinitionSourceType(AbstractObjectType1):
    """
    :ivar source: The actual citation of the source, sufficient to
        identify the document and how to obtain it.
    """

    class Meta:
        name = "FC_DefinitionSource_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    source: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class AbstractCtCatalogue(AbstractCtCatalogueType):
    class Meta:
        name = "AbstractCT_Catalogue"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCodelistCatalogueType(AbstractCtCatalogueType):
    class Meta:
        name = "CT_CodelistCatalogue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    codelist_item: List[CtCodelistPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "codelistItem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class CtCrsCatalogueType(AbstractCtCatalogueType):
    class Meta:
        name = "CT_CrsCatalogue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    parameters: List[CtOperationParametersPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    operation: List[CtOperationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    coordinate_system: List[CtCoordinateSystemPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "coordinateSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    ellipsoid: List[CtEllipsoidPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    datum: List[CtDatumPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    operation_method: List[CtOperationMethodPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "operationMethod",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    crs: List[CtCrsPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
            "min_occurs": 1,
        },
    )
    prime_meridian: List[CtPrimeMeridianPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "primeMeridian",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    axis: List[CtCoordinateSystemAxisPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )


@dataclass
class CtUomCatalogueType(AbstractCtCatalogueType):
    class Meta:
        name = "CT_UomCatalogue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class MdApplicationSchemaInformation2(MdApplicationSchemaInformationType2):
    """
    Information about the application schema used to build the dataset.
    """

    class Meta:
        name = "MD_ApplicationSchemaInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mas/1.0"


@dataclass
class MdIdentifier1(MdIdentifierType1):
    """
    Value uniquely identifying an object within a namespace.
    """

    class Meta:
        name = "MD_Identifier"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class MdPortrayalCatalogueReference2(MdPortrayalCatalogueReferenceType2):
    """
    Information identifying the portrayal catalogue used.
    """

    class Meta:
        name = "MD_PortrayalCatalogueReference"
        namespace = "http://standards.iso.org/iso/19115/-3/mpc/1.0"


@dataclass
class MdFeatureCatalogueDescription2(MdFeatureCatalogueDescriptionType2):
    """
    Information identifying the feature catalogue or the conceptual schema.
    """

    class Meta:
        name = "MD_FeatureCatalogueDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdAssociatedResource(MdAssociatedResourceType):
    """associated resource information NOTE: An associated resource is a dataset composed of a collection of datasets"""

    class Meta:
        name = "MD_AssociatedResource"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class MdKeywordClass(MdKeywordClassType):
    """
    Specification of a class to categorize keywords in a domain-specific vocabulary
    that has a binding to a formal ontology.
    """

    class Meta:
        name = "MD_KeywordClass"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class MdUsage2(MdUsageType2):
    """
    Brief description of ways in which the resource(s) is/are currently or has been
    used.
    """

    class Meta:
        name = "MD_Usage"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class LeAlgorithm(LeAlgorithmType):
    """Description: Details of the methodology by which geographic information was derived from the instrument readings FGDC: Algorithm_Information shortName: Algorithm"""

    class Meta:
        name = "LE_Algorithm"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class AbstractDqDataEvaluationType(DqEvaluationMethodType):
    class Meta:
        name = "AbstractDQ_DataEvaluation_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqAggregationDerivationType(DqEvaluationMethodType):
    class Meta:
        name = "DQ_AggregationDerivation_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqEvaluationMethod(DqEvaluationMethodType):
    """
    Description of the evaluation method and procedure applied.
    """

    class Meta:
        name = "DQ_EvaluationMethod"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class MultiSurface(MultiSurfaceType):
    """A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:surfaceMember) or the array property
    (gml:surfaceMembers). It is also valid to use both the "standard"
    and the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidPropertyType:
    """A property that has a solid as its value domain may either be an appropriate
    geometry element encapsulated in an element of this type or an XLink reference
    to a remote geometry element (where remote includes geometry elements located
    elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_solid: Optional["CompositeSolid"] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFeatureCatalogueType(AbstractCtCatalogueType):
    class Meta:
        name = "Abstract_FeatureCatalogue_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/fcc/2.1"


@dataclass
class FcDefinitionSource(FcDefinitionSourceType):
    """
    Class that specifies the source of a definition.
    """

    class Meta:
        name = "FC_DefinitionSource"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class CtCodelistCatalogue(CtCodelistCatalogueType):
    class Meta:
        name = "CT_CodelistCatalogue"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtCrsCatalogue(CtCrsCatalogueType):
    class Meta:
        name = "CT_CrsCatalogue"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class CtUomCatalogue(CtUomCatalogueType):
    class Meta:
        name = "CT_UomCatalogue"
        namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"


@dataclass
class MdApplicationSchemaInformationPropertyType2:
    class Meta:
        name = "MD_ApplicationSchemaInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mas/1.0"

    md_application_schema_information: Optional[
        MdApplicationSchemaInformation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_ApplicationSchemaInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractApplicationSchemaInformationPropertyType:
    class Meta:
        name = "Abstract_ApplicationSchemaInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_application_schema_information: Optional[
        MdApplicationSchemaInformation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_ApplicationSchemaInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mas/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractPortrayalCatalogueInformationPropertyType:
    class Meta:
        name = "Abstract_PortrayalCatalogueInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_portrayal_catalogue_reference: Optional[
        MdPortrayalCatalogueReference2
    ] = field(
        default=None,
        metadata={
            "name": "MD_PortrayalCatalogueReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mpc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdIdentifierPropertyType1:
    class Meta:
        name = "MD_Identifier_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_identifier: Optional[MdIdentifier1] = field(
        default=None,
        metadata={
            "name": "MD_Identifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdPortrayalCatalogueReferencePropertyType2:
    class Meta:
        name = "MD_PortrayalCatalogueReference_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mpc/1.0"

    md_portrayal_catalogue_reference: Optional[
        MdPortrayalCatalogueReference2
    ] = field(
        default=None,
        metadata={
            "name": "MD_PortrayalCatalogueReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mpc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFeatureCatalogueDescriptionPropertyType2:
    class Meta:
        name = "MD_FeatureCatalogueDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    md_feature_catalogue_description: Optional[
        MdFeatureCatalogueDescription2
    ] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogueDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdAssociatedResourcePropertyType:
    class Meta:
        name = "MD_AssociatedResource_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_associated_resource: Optional[MdAssociatedResource] = field(
        default=None,
        metadata={
            "name": "MD_AssociatedResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdKeywordClassPropertyType:
    class Meta:
        name = "MD_KeywordClass_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_keyword_class: Optional[MdKeywordClass] = field(
        default=None,
        metadata={
            "name": "MD_KeywordClass",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdUsagePropertyType2:
    class Meta:
        name = "MD_Usage_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_usage: Optional[MdUsage2] = field(
        default=None,
        metadata={
            "name": "MD_Usage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeAlgorithmPropertyType:
    class Meta:
        name = "LE_Algorithm_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_algorithm: Optional[LeAlgorithm] = field(
        default=None,
        metadata={
            "name": "LE_Algorithm",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqDataEvaluation(AbstractDqDataEvaluationType):
    """
    Data evaluation method.
    """

    class Meta:
        name = "AbstractDQ_DataEvaluation"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqAggregationDerivation(DqAggregationDerivationType):
    """
    Aggregation or derivation method.
    """

    class Meta:
        name = "DQ_AggregationDerivation"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqFullInspectionType(AbstractDqDataEvaluationType):
    class Meta:
        name = "DQ_FullInspection_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqIndirectEvaluationType(AbstractDqDataEvaluationType):
    """
    :ivar deductive_source: information on which data are used as
        sources in deductive evaluation method
    """

    class Meta:
        name = "DQ_IndirectEvaluation_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    deductive_source: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "deductiveSource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class DqSampleBasedInspectionType(AbstractDqDataEvaluationType):
    """
    :ivar sampling_scheme: information of the type of sampling scheme
        and description of the sampling procedure
    :ivar lot_description: information of how lots are defined
    :ivar sampling_ratio: information on how many samples on average are
        extracted for inspection from each lot of population
    """

    class Meta:
        name = "DQ_SampleBasedInspection_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    sampling_scheme: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "samplingScheme",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    lot_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "lotDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    sampling_ratio: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "samplingRatio",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )


@dataclass
class MultiSurfacePropertyType:
    """A property that has a collection of surfaces as its value domain may either
    be an appropriate geometry element encapsulated in an element of this type or
    an XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class SolidMember(SolidPropertyType):
    """This property element either references a solid via the XLink-attributes or
    contains the solid element.

    A solid element is any element, which is substitutable for
    gml:AbstractSolid.
    """

    class Meta:
        name = "solidMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidProperty(SolidPropertyType):
    """This property element either references a solid via the XLink-attributes or
    contains the solid element.

    solidProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for AbstractSolid.
    """

    class Meta:
        name = "solidProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFeatureCatalogue(AbstractFeatureCatalogueType):
    class Meta:
        name = "Abstract_FeatureCatalogue"
        namespace = "https://schemas.isotc211.org/19110/-/fcc/2.1"


@dataclass
class FcDefinitionSourcePropertyType:
    class Meta:
        name = "FC_DefinitionSource_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_definition_source: Optional[FcDefinitionSource] = field(
        default=None,
        metadata={
            "name": "FC_DefinitionSource",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtCodelistCataloguePropertyType:
    class Meta:
        name = "CT_CodelistCatalogue_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_codelist_catalogue: Optional[CtCodelistCatalogue] = field(
        default=None,
        metadata={
            "name": "CT_CodelistCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtCrsCataloguePropertyType:
    class Meta:
        name = "CT_CrsCatalogue_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_crs_catalogue: Optional[CtCrsCatalogue] = field(
        default=None,
        metadata={
            "name": "CT_CrsCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CtUomCataloguePropertyType:
    class Meta:
        name = "CT_UomCatalogue_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    ct_uom_catalogue: Optional[CtUomCatalogue] = field(
        default=None,
        metadata={
            "name": "CT_UomCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicDescriptionType2(AbstractExGeographicExtentType2):
    """
    :ivar geographic_identifier: identifier used to represent a
        geographic area e.g. a geographic identifier as described in ISO
        19112
    """

    class Meta:
        name = "EX_GeographicDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    geographic_identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "geographicIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )


@dataclass
class MiRequirementType(AbstractObjectType1):
    """
    :ivar citation: Description: identification of reference or guidance
        material for the requirement shortName: reqRef
    :ivar identifier: Description: unique name, or code, for the
        requirement shortName: reqId
    :ivar requestor: Description: origin of requirement shortName:
        requestor
    :ivar recipient: Description: person(s), or body(ies), to recieve
        results of requirement shortName: recipient
    :ivar priority: Description: relative ordered importance, or
        urgency, of the requirement shortName: reqPri
    :ivar requested_date: Description: required or preferred acquisition
        date and time shortName: reqDate
    :ivar expiry_date: Description: date and time after which collection
        is no longer valid shortName: reqExpire
    :ivar satisified_plan:
    """

    class Meta:
        name = "MI_Requirement_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    requestor: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "min_occurs": 1,
        },
    )
    recipient: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "min_occurs": 1,
        },
    )
    priority: Optional[MiPriorityCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    requested_date: Optional[MiRequestedDatePropertyType] = field(
        default=None,
        metadata={
            "name": "requestedDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    expiry_date: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "expiryDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    satisified_plan: List["MiPlanPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "satisifiedPlan",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MdRangeDimensionType2(AbstractObjectType1):
    """
    :ivar sequence_identifier: number that uniquely identifies instances
        of bands of wavelengths on which a sensor operates
    :ivar description: description of the range of a cell measurement
        value
    :ivar name: identifiers for each attribute included in the resource.
        These identifiers can be used to provide names for the
        resource's attribute from a standard set of names
    """

    class Meta:
        name = "MD_RangeDimension_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    sequence_identifier: Optional[MemberNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "sequenceIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    name: List[MdIdentifierPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdMediumType2(AbstractObjectType1):
    """
    :ivar name: name of the medium on which the resource can be received
    :ivar density: density at which the data is recorded
    :ivar density_units: units of measure for the recording density
    :ivar volumes: number of items in the media identified
    :ivar medium_format: method used to write to the medium
    :ivar medium_note: description of other limitations or requirements
        for using the medium
    :ivar identifier:
    """

    class Meta:
        name = "MD_Medium_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    name: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    density: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    density_units: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "densityUnits",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    volumes: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    medium_format: List[MdMediumFormatCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "mediumFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    medium_note: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "mediumNote",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )


@dataclass
class MdKeywordsType2(AbstractObjectType1):
    """
    :ivar keyword: commonly used word(s) or formalised word(s) or
        phrase(s) used to describe the subject
    :ivar type_value: subject matter used to group similar keywords
    :ivar thesaurus_name: name of the formally registered thesaurus or a
        similar authoritative source of keywords
    :ivar keyword_class:
    """

    class Meta:
        name = "MD_Keywords_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    keyword: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "min_occurs": 1,
        },
    )
    type_value: Optional[MdKeywordTypeCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    thesaurus_name: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "thesaurusName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    keyword_class: Optional[MdKeywordClassPropertyType] = field(
        default=None,
        metadata={
            "name": "keywordClass",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )


@dataclass
class LeProcessingType(AbstractObjectType1):
    """
    :ivar identifier: Description: Information to identify the
        processing package that produced the data FGDC:
        Processing_Identifiers Position: 1 shortName: procInfoId
    :ivar software_reference: Description: Reference to document
        describing processing software FGDC:
        Processing_Software_Reference Position: 2 shortName:
        procInfoSwRef
    :ivar procedure_description: Description: Additional details about
        the processing procedures FGDC: Processing_Procedure_Description
        Position: 3 shortName: procInfoDesc
    :ivar documentation: Description: Reference to documentation
        describing the processing FGDC: Processing_Documentation
        Position: 4 shortName: procInfoDoc
    :ivar run_time_parameters: Description: Parameters to control the
        processing operations, entered at run time FGDC:
        Command_Line_Processing_Parameter Position: 5 shortName:
        procInfoParam
    :ivar parameter: type of other property description (i.e.
        netcdf/variable in ncml.xsd or AdditionalAttribute in ECHO)
    :ivar other_property_type: type of other property description (i.e.
        netcdf/variable in ncml.xsd or AdditionalAttribute in ECHO)
    :ivar other_property: instance of otherPropertyType that defines
        attributes not explicitly included in LE_Processing
    :ivar algorithm: details of the methodology by which geographic
        information was derived from the instrument reading
    """

    class Meta:
        name = "LE_Processing_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    software_reference: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "softwareReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    procedure_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "procedureDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    documentation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    run_time_parameters: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "runTimeParameters",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    parameter: List[LeProcessParameterPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    other_property_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "otherPropertyType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    other_property: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "otherProperty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    algorithm: List[LeAlgorithmPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class MdReferenceSystemType2(AbstractReferenceSystemType):
    """
    :ivar reference_system_identifier: identifier and codespace for
        reference systeme.g. EPSG::4326
    :ivar reference_system_type: type of reference system identifiede.g.
        geographic2D
    """

    class Meta:
        name = "MD_ReferenceSystem_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrs/1.0"

    reference_system_identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "referenceSystemIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrs/1.0",
        },
    )
    reference_system_type: Optional[
        MdReferenceSystemTypeCodePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "referenceSystemType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrs/1.0",
        },
    )


@dataclass
class DqAggregationDerivationPropertyType:
    class Meta:
        name = "DQ_AggregationDerivation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_aggregation_derivation: Optional[DqAggregationDerivation] = field(
        default=None,
        metadata={
            "name": "DQ_AggregationDerivation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqFullInspection(DqFullInspectionType):
    """
    Full inspection.
    """

    class Meta:
        name = "DQ_FullInspection"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqIndirectEvaluation(DqIndirectEvaluationType):
    """
    Indirect evaluation.
    """

    class Meta:
        name = "DQ_IndirectEvaluation"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqMeasureReferenceType(AbstractObjectType1):
    """
    :ivar measure_identification: Identifier of the measure, value
        uniquely identifying the measure within a namespace
    :ivar name_of_measure: name of the test applied to the data
    :ivar measure_description: description of the measure
    """

    class Meta:
        name = "DQ_MeasureReference_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    measure_identification: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "measureIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    name_of_measure: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "nameOfMeasure",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    measure_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "measureDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class DqSampleBasedInspection(DqSampleBasedInspectionType):
    """
    Sample based inspection.
    """

    class Meta:
        name = "DQ_SampleBasedInspection"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class CompositeSolidType(AbstractSolidType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    solid_member: List[SolidMember] = field(
        default_factory=list,
        metadata={
            "name": "solidMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class TopoSolidType(AbstractTopoPrimitiveType):
    """
    :ivar isolated:
    :ivar directed_face:
    :ivar solid_property:
    :ivar aggregation_type:
    :ivar universal: A gml:TopoSolid must indicate whether it is a
        universal topo-solid or not, to ensure a lossless topology
        representation as defined by Kuijpers, et. al. (see OGC 05-102
        Topology IPR). The optional universal attribute of type boolean
        is used to indicate this and the default is fault. NOTE The
        universal topo-solid is normally not part of any feature, and is
        used to represent the unbounded portion of the data set. Its
        interior boundary (it has no exterior boundary) would normally
        be considered the exterior boundary of the data set.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    isolated: List["NodeOrEdgePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_face: List[DirectedFace] = field(
        default_factory=list,
        metadata={
            "name": "directedFace",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    solid_property: Optional[SolidProperty] = field(
        default=None,
        metadata={
            "name": "solidProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )
    universal: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MultiCoverage(MultiSurfacePropertyType):
    class Meta:
        name = "multiCoverage"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiExtentOf(MultiSurfacePropertyType):
    class Meta:
        name = "multiExtentOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceProperty(MultiSurfacePropertyType):
    class Meta:
        name = "multiSurfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcLocalisedDefinitionReferenceType(AbstractObjectType1):
    class Meta:
        name = "FC_LocalisedDefinitionReference_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    source_identifier: Optional[LocalisedCharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "sourceIdentifier",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition_source: Optional[FcDefinitionSourcePropertyType] = field(
        default=None,
        metadata={
            "name": "definitionSource",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class ExGeographicDescription2(ExGeographicDescriptionType2):
    """
    Description of the geographic area using identifiers.
    """

    class Meta:
        name = "EX_GeographicDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class MiRequirement(MiRequirementType):
    """Description: requirement to be satisfied by the planned data acquisition shortName: Requirement"""

    class Meta:
        name = "MI_Requirement"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MdRangeDimension2(MdRangeDimensionType2):
    """
    Information on the range of attribute values.
    """

    class Meta:
        name = "MD_RangeDimension"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdSampleDimensionType(MdRangeDimensionType2):
    """
    :ivar max_value: maximum value of data values in each dimension
        included in the resource. Restricted to UomLength in the MD_Band
        class.
    :ivar min_value: minimum value of data values in each dimension
        included in the resource. Restricted to UomLength in the MD_Band
        class.
    :ivar units: units of data in each dimension included in the
        resource. Note that the type of this is UnitOfMeasure and that
        it is restricted to UomLength in the MD_Band class.
    :ivar scale_factor: scale factor which has been applied to the cell
        value
    :ivar offset: the physical value corresponding to a cell value of
        zero
    :ivar mean_value: mean value of data values in each dimension
        included in the resource
    :ivar number_of_values: this gives the number of values used in a
        thematicClassification resource EX:. the number of classes in a
        Land Cover Type coverage or the number of cells with data in
        other types of coverages
    :ivar standard_deviation: standard deviation of data values in each
        dimension included in the resource
    :ivar other_property_type: type of other attribute description (i.e.
        netcdf/variable in ncml.xsd)
    :ivar other_property: instance of otherAttributeType that defines
        attributes not explicitly included in MD_CoverageType
    :ivar bits_per_value: maximum number of significant bits in the
        uncompressed representation for the value in each band of each
        pixel
    :ivar range_element_description:
    """

    class Meta:
        name = "MD_SampleDimension_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    max_value: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "maxValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    min_value: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "minValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    units: Optional[UnitOfMeasurePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    scale_factor: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "scaleFactor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    offset: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mean_value: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "meanValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    number_of_values: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "numberOfValues",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    standard_deviation: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "standardDeviation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    other_property_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "otherPropertyType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    other_property: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "otherProperty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    bits_per_value: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "bitsPerValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    range_element_description: List[
        MiRangeElementDescriptionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "rangeElementDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdMedium2(MdMediumType2):
    """
    Information about the media on which the resource can be distributed.
    """

    class Meta:
        name = "MD_Medium"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class MdKeywords2(MdKeywordsType2):
    """
    Keywords, their type and reference source NOTE: When the resource described is
    a service, one instance of MD_Keyword shall refer to the service taxonomy
    defined in ISO 19119, 8.3)
    """

    class Meta:
        name = "MD_Keywords"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class LeProcessing(LeProcessingType):
    """Description: Comprehensive information about the procedure(s), process(es) and algorithm(s) applied in the process step shortName: Procsg"""

    class Meta:
        name = "LE_Processing"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class MdReferenceSystem2(MdReferenceSystemType2):
    """
    Information about the reference system.
    """

    class Meta:
        name = "MD_ReferenceSystem"
        namespace = "http://standards.iso.org/iso/19115/-3/mrs/1.0"


@dataclass
class AbstractDqDataEvaluationPropertyType:
    class Meta:
        name = "AbstractDQ_DataEvaluation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_sample_based_inspection: Optional[DqSampleBasedInspection] = field(
        default=None,
        metadata={
            "name": "DQ_SampleBasedInspection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_indirect_evaluation: Optional[DqIndirectEvaluation] = field(
        default=None,
        metadata={
            "name": "DQ_IndirectEvaluation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_full_inspection: Optional[DqFullInspection] = field(
        default=None,
        metadata={
            "name": "DQ_FullInspection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqEvaluationMethodPropertyType:
    class Meta:
        name = "DQ_EvaluationMethod_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_sample_based_inspection: Optional[DqSampleBasedInspection] = field(
        default=None,
        metadata={
            "name": "DQ_SampleBasedInspection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_indirect_evaluation: Optional[DqIndirectEvaluation] = field(
        default=None,
        metadata={
            "name": "DQ_IndirectEvaluation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_full_inspection: Optional[DqFullInspection] = field(
        default=None,
        metadata={
            "name": "DQ_FullInspection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_aggregation_derivation: Optional[DqAggregationDerivation] = field(
        default=None,
        metadata={
            "name": "DQ_AggregationDerivation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_evaluation_method: Optional[DqEvaluationMethod] = field(
        default=None,
        metadata={
            "name": "DQ_EvaluationMethod",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqFullInspectionPropertyType:
    class Meta:
        name = "DQ_FullInspection_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_full_inspection: Optional[DqFullInspection] = field(
        default=None,
        metadata={
            "name": "DQ_FullInspection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqIndirectEvaluationPropertyType:
    class Meta:
        name = "DQ_IndirectEvaluation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_indirect_evaluation: Optional[DqIndirectEvaluation] = field(
        default=None,
        metadata={
            "name": "DQ_IndirectEvaluation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqMeasureReference(DqMeasureReferenceType):
    """
    Reference to the measure used.
    """

    class Meta:
        name = "DQ_MeasureReference"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqSampleBasedInspectionPropertyType:
    class Meta:
        name = "DQ_SampleBasedInspection_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_sample_based_inspection: Optional[DqSampleBasedInspection] = field(
        default=None,
        metadata={
            "name": "DQ_SampleBasedInspection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CompositeSolid(CompositeSolidType):
    """Gml:CompositeSolid implements ISO 19107 GM_CompositeSolid (see ISO
    19107:2003, 6.6.7) as specified in D.2.3.6.

    A gml:CompositeSolid is represented by a set of orientable surfaces.
    It is a geometry type with all the geometric properties of a
    (primitive) solid. Essentially, a composite solid is a collection of
    solids that join in pairs on common boundary surfaces and which,
    when considered as a whole, form a single solid. solidMember
    references or contains one solid in the composite solid. The solids
    are contiguous.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSolid(TopoSolidType):
    """Gml:TopoSolid represents the 3-dimensional topology primitive.

    The topological boundary of a solid (gml:directedFace) consists of a
    set of directed faces. A solid may optionally be realised by a
    3-dimensional geometric primitive (gml:solidProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcLocalisedDefinitionReference(FcLocalisedDefinitionReferenceType):
    class Meta:
        name = "FC_LocalisedDefinitionReference"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class ExGeographicDescriptionPropertyType2:
    class Meta:
        name = "EX_GeographicDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_geographic_description: Optional[ExGeographicDescription2] = field(
        default=None,
        metadata={
            "name": "EX_GeographicDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiRequirementPropertyType:
    class Meta:
        name = "MI_Requirement_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_requirement: Optional[MiRequirement] = field(
        default=None,
        metadata={
            "name": "MI_Requirement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractReferenceSystemPropertyType:
    class Meta:
        name = "Abstract_ReferenceSystem_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_reference_system: Optional[MdReferenceSystem2] = field(
        default=None,
        metadata={
            "name": "MD_ReferenceSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrs/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBandType2(MdSampleDimensionType):
    """
    :ivar bound_max:
    :ivar bound_min:
    :ivar bound_units:
    :ivar peak_response: wavelength at which the response is the highest
    :ivar tone_gradation: number of discrete numerical values in the
        grid data
    """

    class Meta:
        name = "MD_Band_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    bound_max: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "boundMax",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    bound_min: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "boundMin",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    bound_units: Optional[UomLengthPropertyType2] = field(
        default=None,
        metadata={
            "name": "boundUnits",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    peak_response: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "peakResponse",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    tone_gradation: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "toneGradation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdSampleDimension(MdSampleDimensionType):
    """
    The characteristics of each dimension (layer) included in the resource.
    """

    class Meta:
        name = "MD_SampleDimension"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdMediumPropertyType2:
    class Meta:
        name = "MD_Medium_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_medium: Optional[MdMedium2] = field(
        default=None,
        metadata={
            "name": "MD_Medium",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdKeywordsPropertyType2:
    class Meta:
        name = "MD_Keywords_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_keywords: Optional[MdKeywords2] = field(
        default=None,
        metadata={
            "name": "MD_Keywords",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeProcessingPropertyType:
    class Meta:
        name = "LE_Processing_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_processing: Optional[LeProcessing] = field(
        default=None,
        metadata={
            "name": "LE_Processing",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdReferenceSystemPropertyType2:
    class Meta:
        name = "MD_ReferenceSystem_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrs/1.0"

    md_reference_system: Optional[MdReferenceSystem2] = field(
        default=None,
        metadata={
            "name": "MD_ReferenceSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrs/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqMeasureReferencePropertyType:
    class Meta:
        name = "DQ_MeasureReference_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_measure_reference: Optional[DqMeasureReference] = field(
        default=None,
        metadata={
            "name": "DQ_MeasureReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DirectedTopoSolidPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: Optional[TopoSolid] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.VALUE_1,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometricPrimitivePropertyType:
    """A property that has a geometric primitive as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SolidArrayPropertyType:
    """Gml:SolidArrayPropertyType is a container for an array of solids.

    The elements are always contained in the array property, referencing
    geometry elements or arrays of geometry elements is not supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_solid: List[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    solid: List[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoSolidPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: Optional[TopoSolid] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FcLocalisedDefinitionReferencePropertyType:
    class Meta:
        name = "FC_LocalisedDefinitionReference_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_localised_definition_reference: Optional[
        FcLocalisedDefinitionReference
    ] = field(
        default=None,
        metadata={
            "name": "FC_LocalisedDefinitionReference",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiPlanType(AbstractObjectType1):
    """
    :ivar type_value: Description: manner of sampling geometry the
        planner expects for collection of the objective data Postion: 2
        shortName: planType
    :ivar status: Description: current status of the plan (pending,
        completed, etc.) shortName: planStatus
    :ivar citation: Description: Identification of authority requesting
        target collection Postion: 1 shortName: planReqId
    :ivar operation:
    :ivar satisfied_requirement:
    """

    class Meta:
        name = "MI_Plan_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    type_value: Optional[MiGeometryTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    status: Optional[MdProgressCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    operation: List["MiOperationPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    satisfied_requirement: List[MiRequirementPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "satisfiedRequirement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MdBand2(MdBandType2):
    """
    Range of wavelengths in the electromagnetic spectrum.
    """

    class Meta:
        name = "MD_Band"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiBandType(MdBandType2):
    """
    :ivar band_boundary_definition: Description: Designation of
        criterion for defining maximum and minimum wavelengths for a
        spectral band FGDC: Band_Boundry_Definition Position: 1
        shortName: bBndDef
    :ivar nominal_spatial_resolution: Description: Smallest distance
        between which separate points can be distinguished, as specified
        in instrument design FGDC: Nominal_Spatial_Resolution Position:
        4 shortName: bndRes
    :ivar transfer_function_type: Description: transform function to be
        used when scaling a physical value for a given element
        shortName: scalXfrFunc
    :ivar transmitted_polarisation: Description: polarisation of the
        transmitter or detector shortName: polarisation
    :ivar detected_polarisation: Description: polarisation of the
        transmitter or detector shortName: polarisation
    """

    class Meta:
        name = "MI_Band_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    band_boundary_definition: Optional[MiBandDefinitionPropertyType] = field(
        default=None,
        metadata={
            "name": "bandBoundaryDefinition",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    nominal_spatial_resolution: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "nominalSpatialResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    transfer_function_type: Optional[
        MiTransferFunctionTypeCodePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "transferFunctionType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    transmitted_polarisation: Optional[
        MiPolarisationOrientationCodePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "transmittedPolarisation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    detected_polarisation: Optional[
        MiPolarisationOrientationCodePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "detectedPolarisation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdDigitalTransferOptionsType2(AbstractObjectType1):
    """
    :ivar units_of_distribution: tiles, layers, geographic areas, etc.,
        in which data is available NOTE: unitsOfDistribution applies to
        both onLine and offLine distributions
    :ivar transfer_size: estimated size of a unit in the specified
        transfer format, expressed in megabytes. The transfer size is
        &gt; 0.0
    :ivar on_line: information about online sources from which the
        resource can be obtained
    :ivar off_line: information about offline media on which the
        resource can be obtained
    :ivar transfer_frequency: rate of occurrence of distribution
    :ivar distribution_format: format of distribution
    """

    class Meta:
        name = "MD_DigitalTransferOptions_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    units_of_distribution: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "unitsOfDistribution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    transfer_size: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "transferSize",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    on_line: List[AbstractOnlineResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "onLine",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    off_line: List[MdMediumPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "offLine",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    transfer_frequency: Optional[TmPeriodDurationPropertyType1] = field(
        default=None,
        metadata={
            "name": "transferFrequency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    distribution_format: List[MdFormatPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "distributionFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )


@dataclass
class EdgeType(AbstractTopoPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    container: Optional[TopoSolidPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_node: List[DirectedNode] = field(
        default_factory=list,
        metadata={
            "name": "directedNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 2,
            "max_occurs": 2,
        },
    )
    directed_face: List[DirectedFace] = field(
        default_factory=list,
        metadata={
            "name": "directedFace",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve_property: Optional[CurveProperty] = field(
        default=None,
        metadata={
            "name": "curveProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class GeometricComplexType(AbstractGeometryType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    element: List[GeometricPrimitivePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class DirectedTopoSolid(DirectedTopoSolidPropertyType):
    """The gml:directedSolid property element describes the coBoundary of topology
    faces and is used in the support of volume features via the gml:TopoVolume
    expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included solid appears in the face coboundary. In the
    context of a gml:TopoVolume the orientation attribute has no
    meaning.
    """

    class Meta:
        name = "directedTopoSolid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidArrayProperty(SolidArrayPropertyType):
    class Meta:
        name = "solidArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidMembers(SolidArrayPropertyType):
    """This property element contains a list of solids.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "solidMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcDefinitionReferenceType(AbstractObjectType1):
    """
    :ivar source_identifier: Additional information to help locate the
        definition in the source document. The format of this
        information is specific to the structure of the source document.
    :ivar translation:
    :ivar definition_source: Role that links this definition reference
        to the citation for the source document.
    """

    class Meta:
        name = "FC_DefinitionReference_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    source_identifier: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "sourceIdentifier",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    translation: List[FcLocalisedDefinitionReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition_source: Optional[FcDefinitionSourcePropertyType] = field(
        default=None,
        metadata={
            "name": "definitionSource",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class MiPlan(MiPlanType):
    """Description: Designations for the planning information related to meeting requirements shortName: PlanId"""

    class Meta:
        name = "MI_Plan"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiBand(MiBandType):
    """Description: extensions to electromagnetic spectrum wavelength description shortName: BandExt"""

    class Meta:
        name = "MI_Band"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdDigitalTransferOptions2(MdDigitalTransferOptionsType2):
    """
    Technical means and media by which a resource is obtained from the distributor.
    """

    class Meta:
        name = "MD_DigitalTransferOptions"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class Edge(EdgeType):
    """Gml:Edge represents the 1-dimensional primitive.

    The topological boundary of an Edge (gml:directedNode) consists of a
    negatively directed start Node and a positively directed end Node.
    The optional coboundary of an edge (gml:directedFace) is a circular
    sequence of directed faces which are incident on this edge in
    document order. In the 2D case, the orientation of the face on the
    left of the edge is "+"; the orientation of the face on the right on
    its right is "-". If provided, the aggregationType attribute shall
    have the value "sequence". An edge may optionally be realised by a
    1-dimensional geometric primitive (gml:curveProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeometricComplex(GeometricComplexType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    solid_member: List[SolidMember] = field(
        default_factory=list,
        metadata={
            "name": "solidMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid_members: Optional[SolidMembers] = field(
        default=None,
        metadata={
            "name": "solidMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TopoVolumeType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_topo_solid: List[DirectedTopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "directedTopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class FcDefinitionReference(FcDefinitionReferenceType):
    """
    Class that links a data instance to the source of its definition.
    """

    class Meta:
        name = "FC_DefinitionReference"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class MiPlanPropertyType:
    class Meta:
        name = "MI_Plan_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_plan: Optional[MiPlan] = field(
        default=None,
        metadata={
            "name": "MI_Plan",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBandPropertyType2:
    class Meta:
        name = "MD_Band_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_band: Optional[MiBand] = field(
        default=None,
        metadata={
            "name": "MI_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_band: Optional[MdBand2] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRangeDimensionPropertyType2:
    class Meta:
        name = "MD_RangeDimension_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_band: Optional[MiBand] = field(
        default=None,
        metadata={
            "name": "MI_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_band: Optional[MdBand2] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_sample_dimension: Optional[MdSampleDimension] = field(
        default=None,
        metadata={
            "name": "MD_SampleDimension",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_range_dimension: Optional[MdRangeDimension2] = field(
        default=None,
        metadata={
            "name": "MD_RangeDimension",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSampleDimensionPropertyType:
    class Meta:
        name = "MD_SampleDimension_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_band: Optional[MiBand] = field(
        default=None,
        metadata={
            "name": "MI_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_band: Optional[MdBand2] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_sample_dimension: Optional[MdSampleDimension] = field(
        default=None,
        metadata={
            "name": "MD_SampleDimension",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiBandPropertyType:
    class Meta:
        name = "MI_Band_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_band: Optional[MiBand] = field(
        default=None,
        metadata={
            "name": "MI_Band",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDigitalTransferOptionsPropertyType2:
    class Meta:
        name = "MD_DigitalTransferOptions_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_digital_transfer_options: Optional[MdDigitalTransferOptions2] = field(
        default=None,
        metadata={
            "name": "MD_DigitalTransferOptions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DirectedEdgePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    edge: Optional[Edge] = field(
        default=None,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.VALUE_1,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometricComplexPropertyType:
    """A property that has a geometric complex as its value domain may either be an
    appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiSolid(MultiSolidType):
    """A gml:MultiSolid is defined by one or more gml:AbstractSolids.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:solidMember) or the array property
    (gml:solidMembers). It is also valid to use both the "standard" and
    the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoVolume(TopoVolumeType):
    """Gml:TopoVolume represents a homogeneous topological expression, a set of
    directed topologic solids, which if realised are isomorphic to a geometric
    solid primitive.

    The intended use of gml:TopoVolume is to appear within a solid
    feature to express the structural and geometric relationships of
    this solid feature to other features via the shared solid
    definitions.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcDefinitionReferencePropertyType:
    class Meta:
        name = "FC_DefinitionReference_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_definition_reference: Optional[FcDefinitionReference] = field(
        default=None,
        metadata={
            "name": "FC_DefinitionReference",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdAttributeGroupType(AbstractObjectType1):
    """
    :ivar content_type: type of information represented by the value
    :ivar attribute:
    """

    class Meta:
        name = "MD_AttributeGroup_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    content_type: List[MdCoverageContentTypeCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "contentType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "min_occurs": 1,
        },
    )
    attribute: List[MdRangeDimensionPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdDistributorType2(AbstractObjectType1):
    """
    :ivar distributor_contact: party from whom the resource may be
        obtained. This list need not be exhaustive
    :ivar distribution_order_process:
    :ivar distributor_format:
    :ivar distributor_transfer_options:
    """

    class Meta:
        name = "MD_Distributor_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    distributor_contact: Optional[AbstractResponsibilityPropertyType] = field(
        default=None,
        metadata={
            "name": "distributorContact",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
            "required": True,
        },
    )
    distribution_order_process: List[
        AbstractStandardOrderProcessPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "distributionOrderProcess",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    distributor_format: List["AbstractFormatPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "distributorFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    distributor_transfer_options: List[
        MdDigitalTransferOptionsPropertyType2
    ] = field(
        default_factory=list,
        metadata={
            "name": "distributorTransferOptions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )


@dataclass
class GeometryArrayPropertyType:
    """If a feature has a property which takes an array of geometry elements as its
    value, this is called a geometry array property.

    A generic type for such a geometry property is
    GeometryArrayPropertyType. The elements are always contained inline
    in the array property, referencing geometry elements or arrays of
    geometry elements via XLinks is not supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: List[RectifiedGrid] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    grid: List[Grid] = field(
        default_factory=list,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    geometric_complex: List[GeometricComplex] = field(
        default_factory=list,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_solid: List[MultiSolid] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_surface: List[MultiSurface] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_curve: List[MultiCurve] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_point: List[MultiPoint] = field(
        default_factory=list,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_geometry: List["MultiGeometry"] = field(
        default_factory=list,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_solid: List[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    solid: List[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_surface: List[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    shell: List[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_surface: List[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    tin: List[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangulated_surface: List[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polyhedral_surface: List[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    surface: List[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon: List[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_curve: List[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_curve: List[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    curve: List[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    ring: List[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    linear_ring: List[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string: List[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    point: List[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometryPropertyType:
    """A geometric property may either be any geometry element encapsulated in an
    element of this type or an XLink reference to a remote geometry element (where
    remote includes geometry elements located elsewhere in the same or another
    document).

    Note that either the reference or the contained element shall be
    given, but not both or none. If a feature has a property that takes
    a geometry element as its value, this is called a geometry property.
    A generic type for such a geometry property is GeometryPropertyType.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional["MultiGeometry"] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MultiSolidPropertyType:
    """A property that has a collection of solids as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoVolumePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_volume: Optional[TopoVolume] = field(
        default=None,
        metadata={
            "name": "TopoVolume",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DirectedEdge(DirectedEdgePropertyType):
    """A gml:directedEdge property element describes the boundary of topology
    faces, the coBoundary of topology nodes and is used in the support of
    topological line features via the gml:TopoCurve expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included edge is used, i.e. forward or reverse.
    """

    class Meta:
        name = "directedEdge"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFcPropertyTypeType(AbstractFcCarrierOfCharacteristicsType):
    """
    :ivar member_name: member name that locates this member within a
        feature type for a local property or within the feature
        catalogue for a global property
    :ivar definition: Definition of the member in a natural language.
        This attribute is required if the definition is not provided by
        FC_FeatureCatalogue::definitionSource. If not provided, the
        definitionReference should specify a citation where the
        definition may be found, and any additional information as to
        which definition is to be used. &lt;c&gt;Mandatory if definition
        not provided by definition source.&lt;/c&gt;
    :ivar cardinality: Cardinality of the member in the feature class.
        If this is an attribute or operation, the default cardinality is
        1. If this is an association role, then the default cardinality
        is 0..*. For operations, this is the number of return values
        possible. This is an elaboration of the GFM to allow for
        complete specifications for various programming and data
        defintion languages.
    :ivar designation: designation of the feature property in a natural
        language
    :ivar definition_reference: Role that links this instance to the
        source of its definition.
    :ivar feature_catalogue: feature catalogue to which a global
        property pertains
    """

    class Meta:
        name = "AbstractFC_PropertyType_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    member_name: Optional[CodeType1] = field(
        default=None,
        metadata={
            "name": "memberName",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    cardinality: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    designation: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition_reference: Optional[FcDefinitionReferencePropertyType] = field(
        default=None,
        metadata={
            "name": "definitionReference",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    feature_catalogue: Optional[ObjectReferencePropertyType1] = field(
        default=None,
        metadata={
            "name": "featureCatalogue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class FcListedValueType(AbstractObjectType1):
    """
    :ivar label: Descriptive label that uniquely identifies one value of
        the feature attribute.
    :ivar code: Numeric or alphanumeric code (such as a country code)
        that uniquely identifies this value of the feature attribute.
    :ivar definition: Definition of the attribute value in a natural
        language. If not provided, the definitionReference may specify a
        citation where the definition may be found, and any additional
        information as to which definition is to be used.
    :ivar designation:
    :ivar definition_reference: Role that links this instance to the
        source of its definition.
    """

    class Meta:
        name = "FC_ListedValue_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    label: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    designation: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition_reference: Optional[FcDefinitionReferencePropertyType] = field(
        default=None,
        metadata={
            "name": "definitionReference",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class MdAttributeGroup(MdAttributeGroupType):
    class Meta:
        name = "MD_AttributeGroup"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdDistributor2(MdDistributorType2):
    """
    Information about the distributor.
    """

    class Meta:
        name = "MD_Distributor"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class FaceType(AbstractTopoPrimitiveType):
    """
    :ivar isolated:
    :ivar directed_edge:
    :ivar directed_topo_solid:
    :ivar surface_property:
    :ivar aggregation_type:
    :ivar universal: If the topological representation exists an
        unbounded manifold (e.g. Euclidean plane), a gml:Face must
        indicate whether it is a universal face or not, to ensure a
        lossless topology representation as defined by Kuijpers, et. al.
        (see OGC 05-102 Topology IPR). The optional universal attribute
        of type boolean is used to indicate this. NOTE The universal
        face is normally not part of any feature, and is used to
        represent the unbounded portion of the data set. Its interior
        boundary (it has no exterior boundary) would normally be
        considered the exterior boundary of the map represented by the
        data set.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    isolated: List[NodePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_edge: List[DirectedEdge] = field(
        default_factory=list,
        metadata={
            "name": "directedEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    directed_topo_solid: List[DirectedTopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "directedTopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "max_occurs": 2,
        },
    )
    surface_property: Optional[SurfaceProperty] = field(
        default=None,
        metadata={
            "name": "surfaceProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )
    universal: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoCurveType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_edge: List[DirectedEdge] = field(
        default_factory=list,
        metadata={
            "name": "directedEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class GeometryMember(GeometryPropertyType):
    """
    This property element either references a geometry element via the XLink-
    attributes or contains the geometry element.
    """

    class Meta:
        name = "geometryMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeometryMembers(GeometryArrayPropertyType):
    """This property element contains a list of geometry elements.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "geometryMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidProperty(MultiSolidPropertyType):
    class Meta:
        name = "multiSolidProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoVolumeProperty(TopoVolumePropertyType):
    """
    The gml:topoVolumeProperty element may be used in features to express their
    relationship to the referenced topology volume.
    """

    class Meta:
        name = "topoVolumeProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFcPropertyType(AbstractFcPropertyTypeType):
    """
    Abstract class for local and global feature properties.
    """

    class Meta:
        name = "AbstractFC_PropertyType"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class FcAssociationRoleType(AbstractFcPropertyTypeType):
    """
    :ivar type_value: Type of association role, indicating whether this
        role acts as a "is part of" or "is a member of" semantics.
    :ivar is_ordered: Indicates if the instances of this association
        role within the containing feature instance are ordered or not,
        with FALSE = "not ordered" and TRUE = "ordered". If TRUE, the
        the FC_PropertyType::definition shall contain an explanation of
        the meaning of the order.
    :ivar is_navigable: Indicates whether this role is navigable from
        the source feature to the target feature of the association.
    :ivar role_player: type of the target value of this association role
    :ivar relation: Relation of which this association role is a part.
    """

    class Meta:
        name = "FC_AssociationRole_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    type_value: Optional[FcRoleTypePropertyType] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    is_ordered: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "isOrdered",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    is_navigable: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "isNavigable",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    role_player: Optional["FcFeatureTypePropertyType"] = field(
        default=None,
        metadata={
            "name": "rolePlayer",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    relation: Optional[FcFeatureAssociationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class FcFeatureOperationType(AbstractFcPropertyTypeType):
    """
    :ivar signature: The name and parameters for this operation. It may
        contain optional returned parameters. This signature is usually
        derived from the formalDefinition. The signature of an operation
        must be unique. This is the equivalent of the UML signature.
    :ivar formal_definition: Formal description of the behaviour of the
        member, expressed in the symbol set defined by
        FC_FeatureCatalogue::functionalLanguage. Involves operational
        parameters, and interactions with other members of the feature
        type.
    :ivar observes_values_of: specifies attribute that may be used as
        input to perform an operation
    :ivar affects_values_of: specifies attribute that will be affected
        by an operation
    :ivar triggered_by_values_of: specifies attribute which may trigger
        an operation
    """

    class Meta:
        name = "FC_FeatureOperation_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    signature: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    formal_definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "formalDefinition",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    observes_values_of: List[
        "AbstractFcCarrierOfCharacteristicsPropertyType"
    ] = field(
        default_factory=list,
        metadata={
            "name": "observesValuesOf",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    affects_values_of: List[
        "AbstractFcCarrierOfCharacteristicsPropertyType"
    ] = field(
        default_factory=list,
        metadata={
            "name": "affectsValuesOf",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    triggered_by_values_of: List[
        "AbstractFcCarrierOfCharacteristicsPropertyType"
    ] = field(
        default_factory=list,
        metadata={
            "name": "triggeredByValuesOf",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class FcListedValue(FcListedValueType):
    """
    Value for an enumerated feature attribute domain, including its codes and
    interpretation.
    """

    class Meta:
        name = "FC_ListedValue"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class MdAttributeGroupPropertyType:
    class Meta:
        name = "MD_AttributeGroup_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    md_attribute_group: Optional[MdAttributeGroup] = field(
        default=None,
        metadata={
            "name": "MD_AttributeGroup",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributorPropertyType2:
    class Meta:
        name = "MD_Distributor_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_distributor: Optional[MdDistributor2] = field(
        default=None,
        metadata={
            "name": "MD_Distributor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Face(FaceType):
    """Gml:Face represents the 2-dimensional topology primitive.

    The topological boundary of a face (gml:directedEdge) consists of a
    sequence of directed edges. If provided, the aggregationType
    attribute shall have the value "sequence". The optional coboundary
    of a face (gml:directedTopoSolid) is a pair of directed solids which
    are bounded by this face. A positively directed solid corresponds to
    a solid which lies in the direction of the negatively directed
    normal to the face in any geometric realisation. A face may
    optionally be realised by a 2-dimensional geometric primitive
    (gml:surfaceProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiGeometryType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geometry_member: List[GeometryMember] = field(
        default_factory=list,
        metadata={
            "name": "geometryMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometry_members: Optional[GeometryMembers] = field(
        default=None,
        metadata={
            "name": "geometryMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TopoCurve(TopoCurveType):
    """Gml:TopoCurve represents a homogeneous topological expression, a sequence of
    directed edges, which if realised are isomorphic to a geometric curve
    primitive.

    The intended use of gml:TopoCurve is to appear within a line feature
    to express the structural and geometric relationships of this
    feature to other features via the shared edge definitions. If
    provided, the aggregationType attribute shall have the value
    "sequence".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcAssociationRole(FcAssociationRoleType):
    """A role of the association FC_AssociationRole::relation. &lt;ocl&gt; roleName = FC_Member::memberName; FC_PropertyType::cardinality realizes GF_AssociationRole::cardinality &lt;/ocl&gt;"""

    class Meta:
        name = "FC_AssociationRole"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class FcFeatureOperation(FcFeatureOperationType):
    """Operation that every instance of an associated feature type must implement.

    &lt;ocl&gt; triggeredByValuesOf realizes GF_Operation::triggeredByValuesOf; observesValuesOf realizes GF_Operation::observesValuesOf; affectsValuesOf realizes GF_Operation::affectsValuesOf &lt;/ocl&gt;
    """

    class Meta:
        name = "FC_FeatureOperation"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class FcListedValuePropertyType:
    class Meta:
        name = "FC_ListedValue_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_listed_value: Optional[FcListedValue] = field(
        default=None,
        metadata={
            "name": "FC_ListedValue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageDescriptionType2(AbstractContentInformationType):
    """
    :ivar attribute_description: description of the attribute described
        by the measurement value
    :ivar processing_level_code: Code and codespace that identifies the
        level of processing that has been applied to the resource
    :ivar attribute_group:
    """

    class Meta:
        name = "MD_CoverageDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    attribute_description: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "attributeDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "required": True,
        },
    )
    processing_level_code: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "processingLevelCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    attribute_group: List[MdAttributeGroupPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "attributeGroup",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdFormatType2(AbstractFormatType):
    """
    :ivar format_specification_citation: citation/URL of the
        specification for the format
    :ivar amendment_number: amendment number of the format version
    :ivar file_decompression_technique: recommendations of algorithms or
        processes that can be applied to read or expand resources to
        which compression techniques have been applied
    :ivar medium: medium used by the format
    :ivar format_distributor:
    """

    class Meta:
        name = "MD_Format_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    format_specification_citation: Optional[
        AbstractCitationPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "formatSpecificationCitation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
            "required": True,
        },
    )
    amendment_number: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "amendmentNumber",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    file_decompression_technique: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "fileDecompressionTechnique",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    medium: List[MdMediumPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    format_distributor: List[MdDistributorPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "formatDistributor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )


@dataclass
class FaceOrTopoSolidPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    face: Optional[Face] = field(
        default=None,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_solid: Optional[TopoSolid] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MultiGeometry(MultiGeometryType):
    """Gml:MultiGeometry is a collection of one or more GML geometry objects of
    arbitrary type.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:geometryMember) or the array property
    (gml:geometryMembers). It is also valid to use both the "standard"
    and the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoCurvePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_curve: Optional[TopoCurve] = field(
        default=None,
        metadata={
            "name": "TopoCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FcAssociationRolePropertyType:
    class Meta:
        name = "FC_AssociationRole_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_association_role: Optional[FcAssociationRole] = field(
        default=None,
        metadata={
            "name": "FC_AssociationRole",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcFeatureAttributeType(AbstractFcPropertyTypeType):
    """
    :ivar code: The numeric or alphanumeric code that uniquely
        identifies the feature attribute within the feature catalogue.
    :ivar value_measurement_unit: Unit of measure used for this feature
        attribute.
    :ivar value_type: The type of the value of this feature attribute; a
        name from some namespace. Implementations of this International
        Standard shall specify which namespace implementation is to be
        used. One possibility is the URI (RFC2396). &lt;c&gt;Mandatory
        for local feature attribute&lt;/c&gt;
    :ivar listed_value: If present, it defines the permissible values of
        this feature attribute as a restriction of the attribute
        valueType. If not present, there is no restriction on the
        valueType
    """

    class Meta:
        name = "FC_FeatureAttribute_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    value_measurement_unit: Optional[UomIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "valueMeasurementUnit",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    value_type: Optional[TypeNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    listed_value: List[FcListedValuePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "listedValue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class FcFeatureOperationPropertyType:
    class Meta:
        name = "FC_FeatureOperation_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_operation: Optional[FcFeatureOperation] = field(
        default=None,
        metadata={
            "name": "FC_FeatureOperation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class GmObjectPropertyType2:
    class Meta:
        name = "GM_Object_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gmw/1.0"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageDescription2(MdCoverageDescriptionType2):
    """
    Details about the content of a resource.
    """

    class Meta:
        name = "MD_CoverageDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdImageDescriptionType2(MdCoverageDescriptionType2):
    """
    :ivar illumination_elevation_angle: illumination elevation measured
        in degrees clockwise from the target plane at intersection of
        the optical line of sight with the Earth's surface. For images
        from a scanning device, refer to the centre pixel of the image
    :ivar illumination_azimuth_angle: illumination azimuth measured in
        degrees clockwise from true north at the time the image is
        taken. For images from a scanning device, refer to the centre
        pixel of the image
    :ivar imaging_condition: conditions affected the image
    :ivar image_quality_code: code in producers code space that
        specifies the image quality
    :ivar cloud_cover_percentage: area of the dataset obscured by
        clouds, expressed as a percentage of the spatial extent
    :ivar compression_generation_quantity: count of the number of lossy
        compression cycles performed on the image
    :ivar triangulation_indicator: indication of whether or not
        triangulation has been performed upon the image
    :ivar radiometric_calibration_data_availability: indication of
        whether or not the radiometric calibration information for
        generating the radiometrically calibrated standard data product
        is available
    :ivar camera_calibration_information_availability: indication of
        whether or not constants are available which allow for camera
        calibration corrections
    :ivar film_distortion_information_availability: indication of
        whether or not Calibration Reseau information is available
    :ivar lens_distortion_information_availability: indication of
        whether or not lens aberration correction information is
        available
    """

    class Meta:
        name = "MD_ImageDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    illumination_elevation_angle: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "illuminationElevationAngle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    illumination_azimuth_angle: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "illuminationAzimuthAngle",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    imaging_condition: Optional[MdImagingConditionCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "imagingCondition",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    image_quality_code: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "imageQualityCode",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    cloud_cover_percentage: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "cloudCoverPercentage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    compression_generation_quantity: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "compressionGenerationQuantity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    triangulation_indicator: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "triangulationIndicator",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    radiometric_calibration_data_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "radiometricCalibrationDataAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    camera_calibration_information_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "cameraCalibrationInformationAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    film_distortion_information_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "filmDistortionInformationAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    lens_distortion_information_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "lensDistortionInformationAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MiCoverageDescriptionType(MdCoverageDescriptionType2):
    class Meta:
        name = "MI_CoverageDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    range_element_description: List[
        MiRangeElementDescriptionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "rangeElementDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class MdFormat2(MdFormatType2):
    """
    Description of the computer language construct that specifies the
    representation of data objects in a record, file, message, storage device or
    transmission channel.
    """

    class Meta:
        name = "MD_Format"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class GmObjectPropertyType1:
    class Meta:
        name = "GM_Object_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gss"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DomainSetType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_topology_complex: Optional[TimeTopologyComplex] = field(
        default=None,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LocationPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_key_word: Optional[LocationKeyWord] = field(
        default=None,
        metadata={
            "name": "LocationKeyWord",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_string: Optional[LocationString] = field(
        default=None,
        metadata={
            "name": "LocationString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    null: Optional[Null] = field(
        default=None,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiGeometryPropertyType:
    """A property that has a geometric aggregate as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class NodeType(AbstractTopoPrimitiveType):
    """
    :ivar container:
    :ivar directed_edge: In the case of planar topology, a gml:Node must
        have a clockwise sequence of gml:directedEdge properties, to
        ensure a lossless topology representation as defined by
        Kuijpers, et. al. (see OGC 05-102 Topology IPR).
    :ivar point_property:
    :ivar aggregation_type:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    container: Optional[FaceOrTopoSolidPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_edge: List[DirectedEdge] = field(
        default_factory=list,
        metadata={
            "name": "directedEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: Optional[PointProperty] = field(
        default=None,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class ValueArrayPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity_extent: List[QuantityExtent] = field(
        default_factory=list,
        metadata={
            "name": "QuantityExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    count_extent: List[CountExtent] = field(
        default_factory=list,
        metadata={
            "name": "CountExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    category_extent: List[CategoryExtent] = field(
        default_factory=list,
        metadata={
            "name": "CategoryExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    value_array: List["ValueArray"] = field(
        default_factory=list,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_value: List["CompositeValue"] = field(
        default_factory=list,
        metadata={
            "name": "CompositeValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    quantity_list: List[QuantityList] = field(
        default_factory=list,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    count_list: List[CountList] = field(
        default_factory=list,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    category_list: List[CategoryList] = field(
        default_factory=list,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    boolean_list: List[BooleanList] = field(
        default_factory=list,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    quantity: List[Quantity] = field(
        default_factory=list,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    count: List[Count] = field(
        default_factory=list,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    category: List[Category] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    boolean: List[Boolean2] = field(
        default_factory=list,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    rectified_grid: List[RectifiedGrid] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    grid: List[Grid] = field(
        default_factory=list,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    geometric_complex: List[GeometricComplex] = field(
        default_factory=list,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_solid: List[MultiSolid] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_surface: List[MultiSurface] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_curve: List[MultiCurve] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_point: List[MultiPoint] = field(
        default_factory=list,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_geometry: List[MultiGeometry] = field(
        default_factory=list,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_solid: List[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    solid: List[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_surface: List[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    shell: List[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_surface: List[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    tin: List[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangulated_surface: List[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polyhedral_surface: List[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    surface: List[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon: List[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_curve: List[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_curve: List[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    curve: List[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    ring: List[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    linear_ring: List[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string: List[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    point: List[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_topology_complex: List[TimeTopologyComplex] = field(
        default_factory=list,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_edge: List[TimeEdge] = field(
        default_factory=list,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_node: List[TimeNode] = field(
        default_factory=list,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_period: List[TimePeriod] = field(
        default_factory=list,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_instant: List[TimeInstant] = field(
        default_factory=list,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    null: List[Null] = field(
        default_factory=list,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ValuePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity_extent: Optional[QuantityExtent] = field(
        default=None,
        metadata={
            "name": "QuantityExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_extent: Optional[CountExtent] = field(
        default=None,
        metadata={
            "name": "CountExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_extent: Optional[CategoryExtent] = field(
        default=None,
        metadata={
            "name": "CategoryExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_array: Optional["ValueArray"] = field(
        default=None,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_value: Optional["CompositeValue"] = field(
        default=None,
        metadata={
            "name": "CompositeValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_list: Optional[QuantityList] = field(
        default=None,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_list: Optional[CountList] = field(
        default=None,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_list: Optional[CategoryList] = field(
        default=None,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_list: Optional[BooleanList] = field(
        default=None,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity: Optional[Quantity] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    count: Optional[Count] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    category: Optional[Category] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    boolean: Optional[Boolean2] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_topology_complex: Optional[TimeTopologyComplex] = field(
        default=None,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    null: Optional[Null] = field(
        default=None,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoCurveProperty(TopoCurvePropertyType):
    """
    The gml:topoCurveProperty property element may be used in features to express
    their relationship to the referenced topology edges.
    """

    class Meta:
        name = "topoCurveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcFeatureAttribute(FcFeatureAttributeType):
    """
    Characteristic of a feature type.
    """

    class Meta:
        name = "FC_FeatureAttribute"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class ExBoundingPolygonType2(AbstractExGeographicExtentType2):
    """
    :ivar polygon: sets of points defining the bounding polygon or any
        other GM_Object geometry (point, line or polygon)
    """

    class Meta:
        name = "EX_BoundingPolygon_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    polygon: List[GmObjectPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractFormatPropertyType:
    class Meta:
        name = "Abstract_Format_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_format: Optional[MdFormat2] = field(
        default=None,
        metadata={
            "name": "MD_Format",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImageDescription2(MdImageDescriptionType2):
    """
    Information about an image's suitability for use.
    """

    class Meta:
        name = "MD_ImageDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiCoverageDescription(MiCoverageDescriptionType):
    """Description: information about the content of a coverage, including the description of specific range elements shortName: CCovDesc"""

    class Meta:
        name = "MI_CoverageDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MiImageDescriptionType(MdImageDescriptionType2):
    class Meta:
        name = "MI_ImageDescription_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    range_element_description: List[
        MiRangeElementDescriptionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "rangeElementDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )


@dataclass
class ExBoundingPolygonType1(AbstractExGeographicExtentType1):
    """
    Boundary enclosing the dataset expressed as the closed set of (x,y) coordinates
    of the polygon (last point replicates first point)
    """

    class Meta:
        name = "EX_BoundingPolygon_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    polygon: List[GmObjectPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class Node(NodeType):
    """Gml:Node represents the 0-dimensional primitive.

    The optional coboundary of a node (gml:directedEdge) is a sequence
    of directed edges which are incident on this node. Edges emanating
    from this node appear in the node coboundary with a negative
    orientation. If provided, the aggregationType attribute shall have
    the value "sequence". A node may optionally be realised by a
    0-dimensional geometric primitive (gml:pointProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PriorityLocationPropertyType(LocationPropertyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    priority: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DomainSet(DomainSetType):
    """The gml:domainSet property element describes the spatio-temporal region of
    interest, within which the coverage is defined.

    Its content model is given by gml:DomainSetType. The value of the
    domain is thus a choice between a gml:AbstractGeometry and a
    gml:AbstractTimeObject.  In the instance these abstract elements
    will normally be substituted by a geometry complex or temporal
    complex, to represent spatial coverages and time-series,
    respectively. The presence of the gml:AssociationAttributeGroup
    means that domainSet follows the usual GML property model and may
    use the xlink:href attribute to point to the domain, as an
    alternative to describing the domain inline. Ownership semantics may
    be provided using the gml:OwnershipAttributeGroup.
    """

    class Meta:
        name = "domainSet"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridDomain(DomainSetType):
    class Meta:
        name = "gridDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Location(LocationPropertyType):
    class Meta:
        name = "location"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveDomain(DomainSetType):
    class Meta:
        name = "multiCurveDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiGeometryProperty(MultiGeometryPropertyType):
    class Meta:
        name = "multiGeometryProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPointDomain(DomainSetType):
    class Meta:
        name = "multiPointDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidDomain(DomainSetType):
    class Meta:
        name = "multiSolidDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceDomain(DomainSetType):
    class Meta:
        name = "multiSurfaceDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RectifiedGridDomain(DomainSetType):
    class Meta:
        name = "rectifiedGridDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueComponent(ValuePropertyType):
    """
    Property that refers to, or contains, a Value.
    """

    class Meta:
        name = "valueComponent"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueComponents(ValueArrayPropertyType):
    """
    Property that contains Values.
    """

    class Meta:
        name = "valueComponents"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueProperty(ValuePropertyType):
    """Property that refers to, or contains, a Value.

    Convenience element for general use.
    """

    class Meta:
        name = "valueProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFcPropertyTypePropertyType:
    class Meta:
        name = "AbstractFC_PropertyType_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_operation: Optional[FcFeatureOperation] = field(
        default=None,
        metadata={
            "name": "FC_FeatureOperation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_feature_attribute: Optional[FcFeatureAttribute] = field(
        default=None,
        metadata={
            "name": "FC_FeatureAttribute",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_association_role: Optional[FcAssociationRole] = field(
        default=None,
        metadata={
            "name": "FC_AssociationRole",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcFeatureAttributePropertyType:
    class Meta:
        name = "FC_FeatureAttribute_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_attribute: Optional[FcFeatureAttribute] = field(
        default=None,
        metadata={
            "name": "FC_FeatureAttribute",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExBoundingPolygon2(ExBoundingPolygonType2):
    """
    Enclosing geometric object which locates the resource, expressed as a set of
    (x,y) coordinate (s) NOTE: If a polygon is used it should be closed (last point
    replicates first point)
    """

    class Meta:
        name = "EX_BoundingPolygon"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class MiCoverageDescriptionPropertyType:
    class Meta:
        name = "MI_CoverageDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_coverage_description: Optional[MiCoverageDescription] = field(
        default=None,
        metadata={
            "name": "MI_CoverageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiImageDescription(MiImageDescriptionType):
    """Description: information about the content of an image, including the description of specific range elements shortName: ICovDesc"""

    class Meta:
        name = "MI_ImageDescription"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class MdDistributionType2(AbstractDistributionType):
    class Meta:
        name = "MD_Distribution_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    distribution_format: List[AbstractFormatPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "distributionFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    distributor: List[MdDistributorPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    transfer_options: List[MdDigitalTransferOptionsPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "transferOptions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )


@dataclass
class QualityResultFileType(AbstractObjectType1):
    class Meta:
        name = "QualityResultFile_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    file_name: Optional[FileNamePropertyType] = field(
        default=None,
        metadata={
            "name": "fileName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    file_type: Optional[MimeFileTypePropertyType] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    file_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "fileDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    file_format: Optional[AbstractFormatPropertyType] = field(
        default=None,
        metadata={
            "name": "fileFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )


@dataclass
class ExBoundingPolygon1(ExBoundingPolygonType1):
    class Meta:
        name = "EX_BoundingPolygon"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CompositeValueType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value_component: List[ValueComponent] = field(
        default_factory=list,
        metadata={
            "name": "valueComponent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_components: Optional[ValueComponents] = field(
        default=None,
        metadata={
            "name": "valueComponents",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class NodeOrEdgePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    node: Optional[Node] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    edge: Optional[Edge] = field(
        default=None,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoPrimitiveArrayAssociationType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: List[TopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    face: List[Face] = field(
        default_factory=list,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    edge: List[Edge] = field(
        default_factory=list,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    node: List[Node] = field(
        default_factory=list,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoPrimitiveMemberType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: Optional[TopoSolid] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    face: Optional[Face] = field(
        default=None,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    edge: Optional[Edge] = field(
        default=None,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    node: Optional[Node] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PriorityLocation(PriorityLocationPropertyType):
    class Meta:
        name = "priorityLocation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcBindingType(AbstractFcCarrierOfCharacteristicsType):
    """
    :ivar description: The description of how a property type is bound
        to a particular feature type.
    :ivar global_property: Role that links to the bound global property
    """

    class Meta:
        name = "FC_Binding_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    global_property: Optional[AbstractFcPropertyTypePropertyType] = field(
        default=None,
        metadata={
            "name": "globalProperty",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class AbstractExGeographicExtentPropertyType:
    class Meta:
        name = "AbstractEX_GeographicExtent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_geographic_description: Optional[ExGeographicDescription2] = field(
        default=None,
        metadata={
            "name": "EX_GeographicDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    ex_geographic_bounding_box: Optional[ExGeographicBoundingBox2] = field(
        default=None,
        metadata={
            "name": "EX_GeographicBoundingBox",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    ex_bounding_polygon: Optional[ExBoundingPolygon2] = field(
        default=None,
        metadata={
            "name": "EX_BoundingPolygon",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExBoundingPolygonPropertyType2:
    class Meta:
        name = "EX_BoundingPolygon_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_bounding_polygon: Optional[ExBoundingPolygon2] = field(
        default=None,
        metadata={
            "name": "EX_BoundingPolygon",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageDescriptionPropertyType2:
    class Meta:
        name = "MD_CoverageDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_image_description: Optional[MiImageDescription] = field(
        default=None,
        metadata={
            "name": "MI_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_image_description: Optional[MdImageDescription2] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mi_coverage_description: Optional[MiCoverageDescription] = field(
        default=None,
        metadata={
            "name": "MI_CoverageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_coverage_description: Optional[MdCoverageDescription2] = field(
        default=None,
        metadata={
            "name": "MD_CoverageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImageDescriptionPropertyType2:
    class Meta:
        name = "MD_ImageDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_image_description: Optional[MiImageDescription] = field(
        default=None,
        metadata={
            "name": "MI_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_image_description: Optional[MdImageDescription2] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiImageDescriptionPropertyType:
    class Meta:
        name = "MI_ImageDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    mi_image_description: Optional[MiImageDescription] = field(
        default=None,
        metadata={
            "name": "MI_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistribution2(MdDistributionType2):
    """
    Information about the distributor of and options for obtaining the resource.
    """

    class Meta:
        name = "MD_Distribution"
        namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"


@dataclass
class QualityResultFile(QualityResultFileType):
    """
    Implement MX_File in this package to avoid circular dependencies required by
    import of 'Metadata for file transfer' package.
    """

    class Meta:
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class ExBoundingPolygonPropertyType1:
    class Meta:
        name = "EX_BoundingPolygon_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_bounding_polygon: Optional[ExBoundingPolygon1] = field(
        default=None,
        metadata={
            "name": "EX_BoundingPolygon",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicExtentPropertyType:
    class Meta:
        name = "EX_GeographicExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_geographic_description: Optional[ExGeographicDescription1] = field(
        default=None,
        metadata={
            "name": "EX_GeographicDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ex_geographic_bounding_box: Optional[ExGeographicBoundingBox1] = field(
        default=None,
        metadata={
            "name": "EX_GeographicBoundingBox",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ex_bounding_polygon: Optional[ExBoundingPolygon1] = field(
        default=None,
        metadata={
            "name": "EX_BoundingPolygon",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractFeatureType1(AbstractGmltype):
    """The basic feature model is given by the gml:AbstractFeatureType.

    The content model for gml:AbstractFeatureType adds two specific
    properties suitable for geographic features to the content model
    defined in gml:AbstractGMLType. The value of the gml:boundedBy
    property describes an envelope that encloses the entire feature
    instance, and is primarily useful for supporting rapid searching for
    features that occur in a particular location. The value of the
    gml:location property describes the extent, position or relative
    location of the feature.
    """

    class Meta:
        name = "AbstractFeatureType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    bounded_by: Optional[BoundedBy] = field(
        default=None,
        metadata={
            "name": "boundedBy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    priority_location: Optional[PriorityLocation] = field(
        default=None,
        metadata={
            "name": "priorityLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location: Optional[Location] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CompositeValue(CompositeValueType):
    """Gml:CompositeValue is an aggregate value built from other values .

    It contains zero or an arbitrary number of gml:valueComponent
    elements, and zero or one gml:valueComponents property elements.  It
    may be used for strongly coupled aggregates (vectors, tensors) or
    for arbitrary collections of values.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MovingObjectStatusType(AbstractTimeSliceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    position: Optional[GeometryPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_name: Optional[LocationName] = field(
        default=None,
        metadata={
            "name": "locationName",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_reference: Optional[LocationReference] = field(
        default=None,
        metadata={
            "name": "locationReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    priority_location: Optional[PriorityLocation] = field(
        default=None,
        metadata={
            "name": "priorityLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location: Optional[Location] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    speed: Optional[MeasureType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bearing: Optional[DirectionPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    acceleration: Optional[MeasureType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    elevation: Optional[MeasureType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    status: Optional[Status] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    status_reference: Optional[StatusReference] = field(
        default=None,
        metadata={
            "name": "statusReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ValueArrayType(CompositeValueType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class TopoPrimitiveMember(TopoPrimitiveMemberType):
    """
    The gml:topoPrimitiveMember property element encodes for the relationship
    between a topology complex and a single topology primitive.
    """

    class Meta:
        name = "topoPrimitiveMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPrimitiveMembers(TopoPrimitiveArrayAssociationType):
    """
    The gml:topoPrimitiveMembers property element encodes the relationship between
    a topology complex and an arbitrary number of topology primitives.
    """

    class Meta:
        name = "topoPrimitiveMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcBinding(FcBindingType):
    """Class that is used to describe the specifics of how a property type is bound
    to a particular feature type.

    Used as an association class for the association MemberOf between
    feature type and property type.
    """

    class Meta:
        name = "FC_Binding"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class FcBoundAssociationRoleType(FcBindingType):
    """
    :ivar role_player: target feature type of this association role
    """

    class Meta:
        name = "FC_BoundAssociationRole_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    role_player: Optional["FcFeatureTypePropertyType"] = field(
        default=None,
        metadata={
            "name": "rolePlayer",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class FcBoundFeatureAttributeType(FcBindingType):
    """
    :ivar value_type: type of the value of this feature attribute; a
        name from some namespace &lt;c&gt; Mandatory if the value type
        of the feature attribute is not defined globally &lt;/c&gt;
    """

    class Meta:
        name = "FC_BoundFeatureAttribute_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    value_type: Optional[TypeNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class AbstractDistributionPropertyType:
    class Meta:
        name = "Abstract_Distribution_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_distribution: Optional[MdDistribution2] = field(
        default=None,
        metadata={
            "name": "MD_Distribution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributionPropertyType2:
    class Meta:
        name = "MD_Distribution_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrd/1.0"

    md_distribution: Optional[MdDistribution2] = field(
        default=None,
        metadata={
            "name": "MD_Distribution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrd/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class QualityResultFilePropertyType:
    class Meta:
        name = "QualityResultFile_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    quality_result_file: Optional[QualityResultFile] = field(
        default=None,
        metadata={
            "name": "QualityResultFile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExSpatialTemporalExtentType1(ExTemporalExtentType1):
    """
    Extent with respect to date and time.
    """

    class Meta:
        name = "EX_SpatialTemporalExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    spatial_extent: List[ExGeographicExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "spatialExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractFeature(AbstractFeatureType1):
    """This abstract element serves as the head of a substitution group which may
    contain any elements whose content model is derived from
    gml:AbstractFeatureType.

    This may be used as a variable in the construction of content
    models. gml:AbstractFeature may be thought of as "anything that is a
    GML feature" and may be used to define variables or templates in
    which the value of a GML property is "any feature". This occurs in
    particular in a GML feature collection where the feature member
    properties contain one or multiple copies of gml:AbstractFeature
    respectively.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BoundedFeatureType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    bounded_by: Optional[BoundedBy] = field(
        default=None,
        metadata={
            "name": "boundedBy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )


@dataclass
class MovingObjectStatus(MovingObjectStatusType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoComplexType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    maximal_complex: Optional[MaximalComplex] = field(
        default=None,
        metadata={
            "name": "maximalComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    super_complex: List[SuperComplex] = field(
        default_factory=list,
        metadata={
            "name": "superComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    sub_complex: List[SubComplex] = field(
        default_factory=list,
        metadata={
            "name": "subComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_primitive_member: List[TopoPrimitiveMember] = field(
        default_factory=list,
        metadata={
            "name": "topoPrimitiveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_primitive_members: Optional[TopoPrimitiveMembers] = field(
        default=None,
        metadata={
            "name": "topoPrimitiveMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    is_maximal: bool = field(
        default=False,
        metadata={
            "name": "isMaximal",
            "type": "Attribute",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class ValueArray(ValueArrayType):
    """A Value Array is used for homogeneous arrays of primitive and aggregate
    values.

    The member values may be scalars, composites, arrays or lists.
    ValueArray has the same content model as CompositeValue, but the
    member values shall be homogeneous.  The element declaration
    contains a Schematron constraint which expresses this restriction
    precisely.  Since the members are homogeneous, the
    gml:referenceSystem (uom, codeSpace) may be specified on the
    gml:ValueArray itself and inherited by all the members if desired.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcBoundAssociationRole(FcBoundAssociationRoleType):
    """
    Class that is used to describe the specifics of how a global association role
    is bound to a particular feature type.
    """

    class Meta:
        name = "FC_BoundAssociationRole"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class FcBoundFeatureAttribute(FcBoundFeatureAttributeType):
    """
    Class that is used to describe the specifics of how a global feature attribute
    is bound to a particular feature type.
    """

    class Meta:
        name = "FC_BoundFeatureAttribute"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class ExSpatialTemporalExtent1(ExSpatialTemporalExtentType1):
    class Meta:
        name = "EX_SpatialTemporalExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class HistoryPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    moving_object_status: List[MovingObjectStatus] = field(
        default_factory=list,
        metadata={
            "name": "MovingObjectStatus",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RangeSetType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value_array: List[ValueArray] = field(
        default_factory=list,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_list: List[QuantityList] = field(
        default_factory=list,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_list: List[CountList] = field(
        default_factory=list,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_list: List[CategoryList] = field(
        default_factory=list,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_list: List[BooleanList] = field(
        default_factory=list,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_block: Optional[DataBlock] = field(
        default=None,
        metadata={
            "name": "DataBlock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file: Optional[File] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TopoComplex(TopoComplexType):
    """Gml:TopoComplex is a collection of topological primitives.

    Each complex holds a reference to its maximal complex
    (gml:maximalComplex) and optionally to sub- or super-complexes
    (gml:subComplex, gml:superComplex). A topology complex contains its
    primitive and sub-complex members.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFcCarrierOfCharacteristicsPropertyType:
    class Meta:
        name = "AbstractFC_CarrierOfCharacteristics_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_operation: Optional[FcFeatureOperation] = field(
        default=None,
        metadata={
            "name": "FC_FeatureOperation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_feature_attribute: Optional[FcFeatureAttribute] = field(
        default=None,
        metadata={
            "name": "FC_FeatureAttribute",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_association_role: Optional[FcAssociationRole] = field(
        default=None,
        metadata={
            "name": "FC_AssociationRole",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_bound_feature_attribute: Optional[FcBoundFeatureAttribute] = field(
        default=None,
        metadata={
            "name": "FC_BoundFeatureAttribute",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_bound_association_role: Optional[FcBoundAssociationRole] = field(
        default=None,
        metadata={
            "name": "FC_BoundAssociationRole",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_binding: Optional[FcBinding] = field(
        default=None,
        metadata={
            "name": "FC_Binding",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcBindingPropertyType:
    class Meta:
        name = "FC_Binding_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_bound_feature_attribute: Optional[FcBoundFeatureAttribute] = field(
        default=None,
        metadata={
            "name": "FC_BoundFeatureAttribute",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_bound_association_role: Optional[FcBoundAssociationRole] = field(
        default=None,
        metadata={
            "name": "FC_BoundAssociationRole",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_binding: Optional[FcBinding] = field(
        default=None,
        metadata={
            "name": "FC_Binding",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcBoundAssociationRolePropertyType:
    class Meta:
        name = "FC_BoundAssociationRole_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_bound_association_role: Optional[FcBoundAssociationRole] = field(
        default=None,
        metadata={
            "name": "FC_BoundAssociationRole",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcBoundFeatureAttributePropertyType:
    class Meta:
        name = "FC_BoundFeatureAttribute_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_bound_feature_attribute: Optional[FcBoundFeatureAttribute] = field(
        default=None,
        metadata={
            "name": "FC_BoundFeatureAttribute",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExSpatialTemporalExtentPropertyType1:
    class Meta:
        name = "EX_SpatialTemporalExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_spatial_temporal_extent: Optional[ExSpatialTemporalExtent1] = field(
        default=None,
        metadata={
            "name": "EX_SpatialTemporalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExTemporalExtentPropertyType1:
    class Meta:
        name = "EX_TemporalExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_spatial_temporal_extent: Optional[ExSpatialTemporalExtent1] = field(
        default=None,
        metadata={
            "name": "EX_SpatialTemporalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ex_temporal_extent: Optional[ExTemporalExtent1] = field(
        default=None,
        metadata={
            "name": "EX_TemporalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class History(HistoryPropertyType):
    """A generic sequence of events constitute a gml:history of an object.

    The gml:history element contains a set of elements in the
    substitution group headed by the abstract element
    gml:AbstractTimeSlice, representing the time-varying properties of
    interest. The history property of a dynamic feature associates a
    feature instance with a sequence of time slices (i.e. change events)
    that encapsulate the evolution of the feature.
    """

    class Meta:
        name = "history"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeSet(RangeSetType):
    """The gml:rangeSet property element contains the values of the coverage
    (sometimes called the attribute values).

    Its content model is given by gml:RangeSetType. This content model
    supports a structural description of the range.  The semantic
    information describing the range set is embedded using a uniform
    method, as part of the explicit values, or as a template value
    accompanying the representation using gml:DataBlock and gml:File.
    The values from each component (or "band") in the range may be
    encoded within a gml:ValueArray element or a concrete member of the
    gml:AbstractScalarValueList substitution group . Use of these
    elements satisfies the value-type homogeneity requirement.
    """

    class Meta:
        name = "rangeSet"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Track(HistoryPropertyType):
    class Meta:
        name = "track"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcFeatureTypeType(AbstractFeatureTypeType):
    """
    :ivar type_name: Text string that uniquely identifies this feature
        type within the feature catalogue that contains this feature
        type.
    :ivar definition: Definition of the feature type in a natural
        language. This attribute is required if the definition is not
        provided by FC_FeatureCatalogue::definitionSource. If not
        provided, the definitionReference should specify a citation
        where the definition may be found, and any additional
        information as to which definition is to be used.
        &lt;c&gt;Mandatory if definition not provided by definition
        source.&lt;/c&gt;
    :ivar code: Code that uniquely identifies this feature type within
        the feature catalogue that contains this feature type.
    :ivar is_abstract: Indicates if the feature type is abstract or not.
    :ivar aliases: Equivalent name(s) of this feature type.
    :ivar designation: designation of the feature type in a natural
        language
    :ivar carrier_of_characteristics: Role that links this feature type
        to the property types that it contains.
    :ivar inherits_from: The role that links this feature type to a set
        of superclasses from which it inherits operations, associations
        and properties.
    :ivar inherits_to: The role that links this feature type to a set of
        subclasses which inherit its operations, associations and
        properties.
    :ivar constrained_by: Role that links this feature type to the
        constraints placed upon it.
    :ivar definition_reference: Role that links this feature type to the
        source of its definition.
    :ivar feature_catalogue: The role that links this feature type to
        the feature catalogue that contains it.
    """

    class Meta:
        name = "FC_FeatureType_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    type_name: Optional[CodeType1] = field(
        default=None,
        metadata={
            "name": "typeName",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    definition: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    code: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    is_abstract: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "isAbstract",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    aliases: List[CodeType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    designation: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    carrier_of_characteristics: List[
        AbstractFcCarrierOfCharacteristicsPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "carrierOfCharacteristics",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    inherits_from: List[FcInheritanceRelationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "inheritsFrom",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    inherits_to: List[FcInheritanceRelationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "inheritsTo",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    constrained_by: List[FcConstraintPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "constrainedBy",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition_reference: Optional[FcDefinitionReferencePropertyType] = field(
        default=None,
        metadata={
            "name": "definitionReference",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    feature_catalogue: Optional[ObjectReferencePropertyType1] = field(
        default=None,
        metadata={
            "name": "featureCatalogue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )


@dataclass
class ExExtentType1(AbstractObjectType2):
    """
    Information about spatial, vertical, and temporal extent.
    """

    class Meta:
        name = "EX_Extent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    geographic_element: List[ExGeographicExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "geographicElement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    temporal_element: List[ExTemporalExtentPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "temporalElement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    vertical_element: List[ExVerticalExtentPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "verticalElement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractCoverageType(AbstractFeatureType1):
    """The base type for coverages is gml:AbstractCoverageType.

    The basic elements of a coverage can be seen in this content model: the coverage contains gml:domainSet and gml:rangeSet properties. The gml:domainSet property describes the domain of the coverage and the gml:rangeSet property describes the range of the coverage.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid_domain: Optional[RectifiedGridDomain] = field(
        default=None,
        metadata={
            "name": "rectifiedGridDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_domain: Optional[GridDomain] = field(
        default=None,
        metadata={
            "name": "gridDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_domain: Optional[MultiSolidDomain] = field(
        default=None,
        metadata={
            "name": "multiSolidDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_domain: Optional[MultiSurfaceDomain] = field(
        default=None,
        metadata={
            "name": "multiSurfaceDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_domain: Optional[MultiCurveDomain] = field(
        default=None,
        metadata={
            "name": "multiCurveDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_domain: Optional[MultiPointDomain] = field(
        default=None,
        metadata={
            "name": "multiPointDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    domain_set: Optional[DomainSet] = field(
        default=None,
        metadata={
            "name": "domainSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    range_set: Optional[RangeSet] = field(
        default=None,
        metadata={
            "name": "rangeSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class DynamicFeatureType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    valid_time: Optional[ValidTime] = field(
        default=None,
        metadata={
            "name": "validTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    track: Optional[Track] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    history: Optional[History] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_source: Optional[DataSource] = field(
        default=None,
        metadata={
            "name": "dataSource",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_source_reference: Optional[DataSourceReference] = field(
        default=None,
        metadata={
            "name": "dataSourceReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class FcFeatureAssociationType(FcFeatureTypeType):
    """
    :ivar role_name: Roles that are a part of this association.
    """

    class Meta:
        name = "FC_FeatureAssociation_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    role_name: List[FcAssociationRolePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "roleName",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "min_occurs": 2,
        },
    )


@dataclass
class FcFeatureType(FcFeatureTypeType):
    """Class of real world phenomena with common properties &lt;ocl&gt; typeName realizes GF_FeatureType::typeName; isAbstract realizes GF_FeatureType::isAbstract; constrainedBy realizes GF_FeatureType::constrainedBy &lt;/ocl&gt;"""

    class Meta:
        name = "FC_FeatureType"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class ExExtent1(ExExtentType1):
    class Meta:
        name = "EX_Extent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractContinuousCoverageType(AbstractCoverageType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    coverage_function: Optional[CoverageFunction] = field(
        default=None,
        metadata={
            "name": "coverageFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractCoverage(AbstractCoverageType):
    """This element serves as the head of a substitution group which may contain
    any coverage whose type is derived from gml:AbstractCoverageType.

    It may act as a variable in the definition of content models where
    it is required to permit any coverage to be valid.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DiscreteCoverageType(AbstractCoverageType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    coverage_function: Optional[CoverageFunction] = field(
        default=None,
        metadata={
            "name": "coverageFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DynamicFeature(DynamicFeatureType):
    """States are captured by time-stamped instances of a feature.

    The content model extends the standard gml:AbstractFeatureType with
    the gml:dynamicProperties model group. Each time-stamped instance
    represents a 'snapshot' of a feature. The dynamic feature classes
    will normally be extended to suit particular applications.  A
    dynamic feature bears either a time stamp or a history.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcFeatureAssociation(FcFeatureAssociationType):
    """Relationship that links instances of this feature type with instances of the
    same or of a different feature type.

    The memberOf-linkBetween association in the General Feature Model is
    not directly implemented here since it can be easily derived from
    combining the Role and MemberOf associations.
    """

    class Meta:
        name = "FC_FeatureAssociation"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class ExExtentPropertyType1:
    class Meta:
        name = "EX_Extent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_extent: Optional[ExExtent1] = field(
        default=None,
        metadata={
            "name": "EX_Extent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractContinuousCoverage(AbstractContinuousCoverageType):
    """A continuous coverage as defined in ISO 19123 is a coverage that can return
    different values for the same feature attribute at different direct positions
    within a single spatiotemporal object in its spatiotemporal domain.

    The base type for continuous coverages is
    AbstractContinuousCoverageType. The coverageFunction element
    describes the mapping function. The abstract element
    gml:AbstractContinuousCoverage serves as the head of a substitution
    group which may contain any continuous coverage whose type is
    derived from gml:AbstractContinuousCoverageType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDiscreteCoverage(DiscreteCoverageType):
    """A discrete coverage consists of a domain set, range set and optionally a
    coverage function.

    The domain set consists of either spatial or temporal geometry
    objects, finite in number. The range set is comprised of a finite
    number of attribute values each of which is associated to every
    direct position within any single spatiotemporal object in the
    domain. In other words, the range values are constant on each
    spatiotemporal object in the domain. This coverage function maps
    each element from the coverage domain to an element in its range.
    The coverageFunction element describes the mapping function. This
    element serves as the head of a substitution group which may contain
    any discrete coverage whose type is derived from
    gml:DiscreteCoverageType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DynamicFeatureMemberType(AbstractFeatureMemberType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    dynamic_feature_collection: List["DynamicFeatureCollection"] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: List[DynamicFeature] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridCoverage(DiscreteCoverageType):
    """A gml:GriddedCoverage is a discrete point coverage in which the domain set
    is a geometric grid of points.

    Note that this is the same as the gml:MultiPointCoverage except that
    we have a gml:Grid to describe the domain. The simple gridded
    coverage is not geometrically referenced and hence no geometric
    positions are assignable to the points in the grid. Such geometric
    positioning is introduced in the gml:RectifiedGridCoverage.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveCoverage(DiscreteCoverageType):
    """In a gml:MultiCurveCoverage the domain is partioned into a collection of
    curves comprising a gml:MultiCurve.  The coverage function then maps each curve
    in the collection to a value in the range set. The content model is identical
    with gml:DiscreteCoverageType, but that gml:domainSet shall have values
    gml:MultiCurve.

    In a gml:MultiCurveCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the curves of the gml:MultiCurve are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the curves of the gml:MultiCurve are mapped to the members of the composite value in document order.
    -       For gml:File encodings the curves of the gml:MultiCurve are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPointCoverage(DiscreteCoverageType):
    """In a gml:MultiPointCoverage the domain set is a gml:MultiPoint, that is a
    collection of arbitrarily distributed geometric points. The content model is
    identical with gml:DiscreteCoverageType, but that gml:domainSet shall have
    values gml:MultiPoint.

    In a gml:MultiPointCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the points of the gml:MultiPoint are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the points of the gml:MultiPoint are mapped to the members of the composite value in document order.
    -       For gml:File encodings the points of the gml:MultiPoint are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidCoverage(DiscreteCoverageType):
    """In a gml:MultiSolidCoverage the domain is partioned into a collection of
    solids comprising a gml:MultiSolid.  The coverage function than maps each solid
    in the collection to a value in the range set. The content model is identical
    with gml:DiscreteCoverageType, but that gml:domainSet shall have values
    gml:MultiSolid.

    In a gml:MultiSolidCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the solids of the gml:MultiSolid are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the solids of the gml:MultiSolid are mapped to the members of the composite value in document order.
    -       For gml:File encodings the solids of the gml:MultiSolid are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceCoverage(DiscreteCoverageType):
    """In a gml:MultiSurfaceCoverage the domain is partioned into a collection of
    surfaces comprising a gml:MultiSurface.  The coverage function than maps each
    surface in the collection to a value in the range set. The content model is
    identical with gml:DiscreteCoverageType, but that gml:domainSet shall have
    values gml:MultiSurface.

    In a gml:MultiSurfaceCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the surfaces of the gml:MultiSurface are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the surfaces of the gml:MultiSurface are mapped to the members of the composite value in document order.
    -       For gml:File encodings the surfaces of the gml:MultiSurface are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RectifiedGridCoverage(DiscreteCoverageType):
    """The gml:RectifiedGridCoverage is a discrete point coverage based on a
    rectified grid.

    It is similar to the grid coverage except that the points of the
    grid are geometrically referenced. The rectified grid coverage has a
    domain that is a gml:RectifiedGrid geometry.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DomainOfValidity:
    """
    The gml:domainOfValidity property implements an association role to an
    EX_Extent object as encoded in ISO/TS 19139, either referencing or containing
    the definition of that extent.
    """

    class Meta:
        name = "domainOfValidity"
        namespace = "http://www.opengis.net/gml/3.2"

    ex_extent: Optional[ExExtent1] = field(
        default=None,
        metadata={
            "name": "EX_Extent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractFeatureTypePropertyType:
    class Meta:
        name = "Abstract_FeatureType_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/fcc/2.1"

    fc_feature_association: Optional[FcFeatureAssociation] = field(
        default=None,
        metadata={
            "name": "FC_FeatureAssociation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_feature_type: Optional[FcFeatureType] = field(
        default=None,
        metadata={
            "name": "FC_FeatureType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcFeatureTypePropertyType:
    class Meta:
        name = "FC_FeatureType_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_association: Optional[FcFeatureAssociation] = field(
        default=None,
        metadata={
            "name": "FC_FeatureAssociation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    fc_feature_type: Optional[FcFeatureType] = field(
        default=None,
        metadata={
            "name": "FC_FeatureType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractRsReferenceSystemType(AbstractObjectType2):
    """
    Description of the spatial and temporal reference systems used in the dataset.
    """

    class Meta:
        name = "AbstractRS_ReferenceSystem_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[RsIdentifierPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    domain_of_validity: List[ExExtentPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DqScopeType(AbstractObjectType2):
    class Meta:
        name = "DQ_Scope_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    level: Optional[MdScopeCodePropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    extent: Optional[ExExtentPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    level_description: List[MdScopeDescriptionPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "levelDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class LiSourceType1(AbstractObjectType2):
    class Meta:
        name = "LI_Source_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    scale_denominator: Optional[MdRepresentativeFractionPropertyType1] = field(
        default=None,
        metadata={
            "name": "scaleDenominator",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_reference_system: Optional[MdReferenceSystemPropertyType1] = field(
        default=None,
        metadata={
            "name": "sourceReferenceSystem",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_citation: Optional[CiCitationPropertyType3] = field(
        default=None,
        metadata={
            "name": "sourceCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_extent: List[ExExtentPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "sourceExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_step: List[LiProcessStepPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "sourceStep",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdDataIdentificationType1(AbstractMdIdentificationType1):
    class Meta:
        name = "MD_DataIdentification_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    spatial_representation_type: List[
        MdSpatialRepresentationTypeCodePropertyType2
    ] = field(
        default_factory=list,
        metadata={
            "name": "spatialRepresentationType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    spatial_resolution: List[MdResolutionPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "spatialResolution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    character_set: List[MdCharacterSetCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "characterSet",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    topic_category: List[MdTopicCategoryCodePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "topicCategory",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    environment_description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "environmentDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    extent: List[ExExtentPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    supplemental_information: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "supplementalInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractCrstype(IdentifiedObjectType):
    class Meta:
        name = "AbstractCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: List[DomainOfValidity] = field(
        default_factory=list,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    scope: List[Scope] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class DynamicMembers(DynamicFeatureMemberType):
    class Meta:
        name = "dynamicMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FcFeatureCatalogueType(AbstractFeatureCatalogueType):
    """
    :ivar producer: Name, address, country, and telecommunications
        address of person or organization having primary responsibility
        for the intellectual content of this feature catalogue.
    :ivar functional_language: The formal functional language in which
        the feature operation formal definition occurs in this feature
        catalogue. &lt;c&gt; Mandatory if feature operation formal
        definition occurs in feature catalogue. &lt;/c&gt;
    :ivar identifier: identifier of the feature catalogue
    :ivar feature_type: The role that links this feature catalogue to
        the feature types that it contains.
    :ivar inheritance_relation: role that links this feature catalogue
        to the inheritance relationships that it contains
    :ivar global_property: Role that links this feature catalogue to the
        global feature properties, i.e. the feature properties which may
        bound to many feature types.
    :ivar definition_source: The role that links this feature catalogue
        to the sources of definitions of feature types, property types,
        and listed values that it contains.
    """

    class Meta:
        name = "FC_FeatureCatalogue_Type"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    producer: Optional[AbstractResponsibilityPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
            "required": True,
        },
    )
    functional_language: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "functionalLanguage",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    feature_type: List[FcFeatureTypePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureType",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    inheritance_relation: List[FcInheritanceRelationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "inheritanceRelation",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    global_property: List[AbstractFcPropertyTypePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "globalProperty",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    definition_source: List[FcDefinitionSourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "definitionSource",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )


@dataclass
class AbstractRsReferenceSystem(AbstractRsReferenceSystemType):
    class Meta:
        name = "AbstractRS_ReferenceSystem"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqScope(DqScopeType):
    class Meta:
        name = "DQ_Scope"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LiSource1(LiSourceType1):
    class Meta:
        name = "LI_Source"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDataIdentification1(MdDataIdentificationType1):
    class Meta:
        name = "MD_DataIdentification"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractCrs(AbstractCrstype):
    """Gml:AbstractCRS specifies a coordinate reference system which is usually
    single but may be compound.

    This abstract complex type shall not be used, extended, or
    restricted, in a GML Application Schema, to define a concrete
    subtype with a meaning equivalent to a concrete subtype specified in
    this document.
    """

    class Meta:
        name = "AbstractCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralDerivedCrstype(AbstractCrstype):
    class Meta:
        name = "AbstractGeneralDerivedCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    defined_by_conversion: Optional[DefinedByConversion] = field(
        default=None,
        metadata={
            "name": "definedByConversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractSingleCrs(AbstractCrstype):
    """
    Gml:AbstractSingleCRS implements a coordinate reference system consisting of
    one coordinate system and one datum (as opposed to a Compound CRS).
    """

    class Meta:
        name = "AbstractSingleCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompoundCrstype(AbstractCrstype):
    class Meta:
        name = "CompoundCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    includes_single_crs: List[IncludesSingleCrs] = field(
        default_factory=list,
        metadata={
            "name": "includesSingleCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    component_reference_system: List[ComponentReferenceSystem] = field(
        default_factory=list,
        metadata={
            "name": "componentReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class DynamicFeatureCollectionType(DynamicFeatureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    dynamic_members: Optional[DynamicMembers] = field(
        default=None,
        metadata={
            "name": "dynamicMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class EngineeringCrstype(AbstractCrstype):
    class Meta:
        name = "EngineeringCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_affine_cs: Optional[UsesAffineCs] = field(
        default=None,
        metadata={
            "name": "usesAffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs2] = field(
        default=None,
        metadata={
            "name": "affineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: Optional[CylindricalCs2] = field(
        default=None,
        metadata={
            "name": "cylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: Optional[LinearCs2] = field(
        default=None,
        metadata={
            "name": "linearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: Optional[PolarCs2] = field(
        default=None,
        metadata={
            "name": "polarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_spherical_cs: Optional[UsesSphericalCs] = field(
        default=None,
        metadata={
            "name": "usesSphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs2] = field(
        default=None,
        metadata={
            "name": "sphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: Optional[UserDefinedCs2] = field(
        default=None,
        metadata={
            "name": "userDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cs: Optional[UsesCs] = field(
        default=None,
        metadata={
            "name": "usesCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system: Optional[CoordinateSystem] = field(
        default=None,
        metadata={
            "name": "coordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_engineering_datum: Optional[UsesEngineeringDatum] = field(
        default=None,
        metadata={
            "name": "usesEngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: Optional[EngineeringDatum2] = field(
        default=None,
        metadata={
            "name": "engineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeocentricCrstype(AbstractCrstype):
    class Meta:
        name = "GeocentricCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_spherical_cs: Optional[UsesSphericalCs] = field(
        default=None,
        metadata={
            "name": "usesSphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_geodetic_datum: Optional[UsesGeodeticDatum] = field(
        default=None,
        metadata={
            "name": "usesGeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class GeodeticCrstype(AbstractCrstype):
    """
    Gml:GeodeticCRS is a coordinate reference system based on a geodetic datum.
    """

    class Meta:
        name = "GeodeticCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_ellipsoidal_cs: Optional[UsesEllipsoidalCs] = field(
        default=None,
        metadata={
            "name": "usesEllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: Optional[EllipsoidalCs2] = field(
        default=None,
        metadata={
            "name": "ellipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_spherical_cs: Optional[UsesSphericalCs] = field(
        default=None,
        metadata={
            "name": "usesSphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs2] = field(
        default=None,
        metadata={
            "name": "sphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_geodetic_datum: Optional[UsesGeodeticDatum] = field(
        default=None,
        metadata={
            "name": "usesGeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: Optional[GeodeticDatum2] = field(
        default=None,
        metadata={
            "name": "geodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeographicCrstype(AbstractCrstype):
    class Meta:
        name = "GeographicCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_ellipsoidal_cs: Optional[UsesEllipsoidalCs] = field(
        default=None,
        metadata={
            "name": "usesEllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    uses_geodetic_datum: Optional[UsesGeodeticDatum] = field(
        default=None,
        metadata={
            "name": "usesGeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ImageCrstype(AbstractCrstype):
    class Meta:
        name = "ImageCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_affine_cs: Optional[UsesAffineCs] = field(
        default=None,
        metadata={
            "name": "usesAffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs2] = field(
        default=None,
        metadata={
            "name": "affineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_oblique_cartesian_cs: Optional[UsesObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_image_datum: Optional[UsesImageDatum] = field(
        default=None,
        metadata={
            "name": "usesImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: Optional[ImageDatum2] = field(
        default=None,
        metadata={
            "name": "imageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCrstype(AbstractCrstype):
    class Meta:
        name = "TemporalCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_time_cs: Optional[UsesTimeCs] = field(
        default=None,
        metadata={
            "name": "usesTimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: Optional[TimeCs2] = field(
        default=None,
        metadata={
            "name": "timeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_temporal_cs: Optional[UsesTemporalCs] = field(
        default=None,
        metadata={
            "name": "usesTemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_temporal_datum: Optional[UsesTemporalDatum] = field(
        default=None,
        metadata={
            "name": "usesTemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_datum: Optional[TemporalDatum2] = field(
        default=None,
        metadata={
            "name": "temporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalCrstype(AbstractCrstype):
    class Meta:
        name = "VerticalCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_vertical_cs: Optional[UsesVerticalCs] = field(
        default=None,
        metadata={
            "name": "usesVerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: Optional[VerticalCs2] = field(
        default=None,
        metadata={
            "name": "verticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_vertical_datum: Optional[UsesVerticalDatum] = field(
        default=None,
        metadata={
            "name": "usesVerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: Optional[VerticalDatum2] = field(
        default=None,
        metadata={
            "name": "verticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class FcFeatureCatalogue(FcFeatureCatalogueType):
    """
    A feature catalogue contains the definition of some number feature types with
    other information necessary for those definitions.
    """

    class Meta:
        name = "FC_FeatureCatalogue"
        namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"


@dataclass
class AbstractCtCataloguePropertyType:
    class Meta:
        name = "AbstractCT_Catalogue_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/cat/1.0"

    fc_feature_catalogue: Optional[FcFeatureCatalogue] = field(
        default=None,
        metadata={
            "name": "FC_FeatureCatalogue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    ct_uom_catalogue: Optional[CtUomCatalogue] = field(
        default=None,
        metadata={
            "name": "CT_UomCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    ct_crs_catalogue: Optional[CtCrsCatalogue] = field(
        default=None,
        metadata={
            "name": "CT_CrsCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    ct_codelist_catalogue: Optional[CtCodelistCatalogue] = field(
        default=None,
        metadata={
            "name": "CT_CodelistCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/cat/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqScopePropertyType:
    class Meta:
        name = "DQ_Scope_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_scope: Optional[DqScope] = field(
        default=None,
        metadata={
            "name": "DQ_Scope",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiSourcePropertyType1:
    class Meta:
        name = "LI_Source_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    li_source: Optional[LiSource1] = field(
        default=None,
        metadata={
            "name": "LI_Source",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDataIdentificationPropertyType1:
    class Meta:
        name = "MD_DataIdentification_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_data_identification: Optional[MdDataIdentification1] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdIdentificationPropertyType:
    class Meta:
        name = "MD_Identification_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_service_identification: Optional[MdServiceIdentification] = field(
        default=None,
        metadata={
            "name": "MD_ServiceIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_data_identification: Optional[MdDataIdentification1] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractGeneralDerivedCrs(AbstractGeneralDerivedCrstype):
    """Gml:AbstractGeneralDerivedCRS is a coordinate reference system that is
    defined by its coordinate conversion from another coordinate reference system.

    This abstract complex type shall not be used, extended, or
    restricted, in a GML Application Schema, to define a concrete
    subtype with a meaning equivalent to a concrete subtype specified in
    this document.
    """

    class Meta:
        name = "AbstractGeneralDerivedCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompoundCrs(CompoundCrstype):
    """Gml:CompundCRS is a coordinate reference system describing the position of
    points through two or more independent coordinate reference systems.

    It is associated with a non-repeating sequence of two or more
    instances of SingleCRS.
    """

    class Meta:
        name = "CompoundCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedCrstype1(AbstractGeneralDerivedCrstype):
    class Meta:
        name = "DerivedCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_crs: Optional[BaseCrs] = field(
        default=None,
        metadata={
            "name": "baseCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    derived_crstype: Optional[DerivedCrstype] = field(
        default=None,
        metadata={
            "name": "derivedCRSType",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    uses_cs: Optional[UsesCs] = field(
        default=None,
        metadata={
            "name": "usesCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system: Optional[CoordinateSystem] = field(
        default=None,
        metadata={
            "name": "coordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DynamicFeatureCollection(DynamicFeatureCollectionType):
    """A gml:DynamicFeatureCollection is a feature collection that has a
    gml:validTime property (i.e. is a snapshot of the feature collection) or which
    has a gml:history property that contains one or more gml:AbstractTimeSlices
    each of which contain values of the time varying properties of the feature
    collection.

    Note that the gml:DynamicFeatureCollection may be one of the following:
    1.      A feature collection which consists of static feature members (members do not change in time) but which has properties of the collection object as a whole that do change in time .
    2.      A feature collection which consists of dynamic feature members (the members are gml:DynamicFeatures) but which also has properties of the collection as a whole that vary in time.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringCrs(EngineeringCrstype):
    """Gml:EngineeringCRS is a contextually local coordinate reference system which
    can be divided into two broad categories:

    -       earth-fixed systems applied to engineering activities on or near the surface of the earth;
    -       CRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft, see ISO 19111 8.3.
    """

    class Meta:
        name = "EngineeringCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeocentricCrs(GeocentricCrstype):
    class Meta:
        name = "GeocentricCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticCrs(GeodeticCrstype):
    class Meta:
        name = "GeodeticCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeographicCrs(GeographicCrstype):
    class Meta:
        name = "GeographicCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageCrs(ImageCrstype):
    """Gml:ImageCRS is an engineering coordinate reference system applied to
    locations in images.

    Image coordinate reference systems are treated as a separate sub-
    type because the definition of the associated image datum contains
    two attributes not relevant to other engineering datums.
    """

    class Meta:
        name = "ImageCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ProjectedCrstype(AbstractGeneralDerivedCrstype):
    class Meta:
        name = "ProjectedCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_geodetic_crs: Optional[BaseGeodeticCrs] = field(
        default=None,
        metadata={
            "name": "baseGeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_geographic_crs: Optional[BaseGeographicCrs] = field(
        default=None,
        metadata={
            "name": "baseGeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCrs(TemporalCrstype):
    """
    Gml:TemporalCRS is a 1D coordinate reference system used for the recording of
    time.
    """

    class Meta:
        name = "TemporalCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCrs(VerticalCrstype):
    """Gml:VerticalCRS is a 1D coordinate reference system used for recording
    heights or depths.

    Vertical CRSs make use of the direction of gravity to define the
    concept of height or depth, but the relationship with gravity may
    not be straightforward. By implication, ellipsoidal heights (h)
    cannot be captured in a vertical coordinate reference system.
    Ellipsoidal heights cannot exist independently, but only as an
    inseparable part of a 3D coordinate tuple defined in a geographic 3D
    coordinate reference system.
    """

    class Meta:
        name = "VerticalCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFeatureCataloguePropertyType:
    class Meta:
        name = "Abstract_FeatureCatalogue_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/fcc/2.1"

    fc_feature_catalogue: Optional[FcFeatureCatalogue] = field(
        default=None,
        metadata={
            "name": "FC_FeatureCatalogue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FcFeatureCataloguePropertyType:
    class Meta:
        name = "FC_FeatureCatalogue_PropertyType"
        target_namespace = "https://schemas.isotc211.org/19110/-/gfc/2.1"

    fc_feature_catalogue: Optional[FcFeatureCatalogue] = field(
        default=None,
        metadata={
            "name": "FC_FeatureCatalogue",
            "type": "Element",
            "namespace": "https://schemas.isotc211.org/19110/-/gfc/2.1",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFeatureCatalogueType(AbstractContentInformationType):
    """
    :ivar feature_catalogue: the catalogue of feature types,
        attribution, operations, and relationships used by the resource
    """

    class Meta:
        name = "MD_FeatureCatalogue_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    feature_catalogue: List[AbstractFeatureCataloguePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class LiLineageType1(AbstractObjectType2):
    class Meta:
        name = "LI_Lineage_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    statement: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    process_step: List[LiProcessStepPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "processStep",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source: List[LiSourcePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class LiProcessStepType1(AbstractObjectType2):
    class Meta:
        name = "LI_ProcessStep_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    rationale: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    date_time: Optional[DateTimePropertyType2] = field(
        default=None,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    processor: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source: List[LiSourcePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CompoundCrspropertyType:
    """
    Gml:CompoundCRSPropertyType is a property type for association roles to a
    compound coordinate reference system, either referencing or containing the
    definition of that reference system.
    """

    class Meta:
        name = "CompoundCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    compound_crs: Optional[CompoundCrs] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DerivedCrs(DerivedCrstype1):
    """Gml:DerivedCRS is a single coordinate reference system that is defined by
    its coordinate conversion from another single coordinate reference system known
    as the base CRS.

    The base CRS can be a projected coordinate reference system, if this
    DerivedCRS is used for a georectified grid coverage as described in
    ISO 19123, Clause 8.
    """

    class Meta:
        name = "DerivedCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringCrspropertyType:
    """
    Gml:EngineeringCRSPropertyType is a property type for association roles to an
    engineering coordinate reference system, either referencing or containing the
    definition of that reference system.
    """

    class Meta:
        name = "EngineeringCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeocentricCrspropertyType:
    class Meta:
        name = "GeocentricCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ImageCrspropertyType:
    """
    Gml:ImageCRSPropertyType is a property type for association roles to an image
    coordinate reference system, either referencing or containing the definition of
    that reference system.
    """

    class Meta:
        name = "ImageCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ProcedurePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    feature_collection: Optional["FeatureCollection"] = field(
        default=None,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: Optional[
        "DirectedObservationAtDistance"
    ] = field(
        default=None,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: Optional["DirectedObservation"] = field(
        default=None,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: Optional["Observation"] = field(
        default=None,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
        default=None,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: Optional[GridCoverage] = field(
        default=None,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: Optional[MultiSolidCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: Optional[MultiSurfaceCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: Optional[MultiCurveCoverage] = field(
        default=None,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: Optional[MultiPointCoverage] = field(
        default=None,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: Optional[DynamicFeatureCollection] = field(
        default=None,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: Optional[DynamicFeature] = field(
        default=None,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ProjectedCrs(ProjectedCrstype):
    """Gml:ProjectedCRS is a 2D coordinate reference system used to approximate the
    shape of the earth on a planar surface, but in such a way that the distortion
    that is inherent to the approximation is carefully controlled and known.

    Distortion correction is commonly applied to calculated bearings and
    distances to produce values that are a close match to actual field
    values.
    """

    class Meta:
        name = "ProjectedCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TargetPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    feature_collection: Optional["FeatureCollection"] = field(
        default=None,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: Optional[
        "DirectedObservationAtDistance"
    ] = field(
        default=None,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: Optional["DirectedObservation"] = field(
        default=None,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: Optional["Observation"] = field(
        default=None,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
        default=None,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: Optional[GridCoverage] = field(
        default=None,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: Optional[MultiSolidCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: Optional[MultiSurfaceCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: Optional[MultiCurveCoverage] = field(
        default=None,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: Optional[MultiPointCoverage] = field(
        default=None,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: Optional[DynamicFeatureCollection] = field(
        default=None,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: Optional[DynamicFeature] = field(
        default=None,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCrspropertyType:
    """
    Gml:TemporalCRSPropertyType is a property type for association roles to a
    temporal coordinate reference system, either referencing or containing the
    definition of that reference system.
    """

    class Meta:
        name = "TemporalCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalCrspropertyType:
    """
    Gml:VerticalCRSPropertyType is a property type for association roles to a
    vertical coordinate reference system, either referencing or containing the
    definition of that reference system.
    """

    class Meta:
        name = "VerticalCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ScCrsPropertyType2:
    class Meta:
        name = "SC_CRS_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gmw/1.0"

    compound_crs: Optional[CompoundCrs] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional[GeographicCrs] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional[GeodeticCrs] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional[DerivedCrs] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional[ProjectedCrs] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFeatureCatalogue(MdFeatureCatalogueType):
    """
    A catalogue of feature types.
    """

    class Meta:
        name = "MD_FeatureCatalogue"
        namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"


@dataclass
class LiLineage1(LiLineageType1):
    class Meta:
        name = "LI_Lineage"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LiProcessStep1(LiProcessStepType1):
    class Meta:
        name = "LI_ProcessStep"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DerivedCrspropertyType:
    """
    Gml:DerivedCRSPropertyType is a property type for association roles to a non-
    projected derived coordinate reference system, either referencing or containing
    the definition of that reference system.
    """

    class Meta:
        name = "DerivedCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    derived_crs: Optional[DerivedCrs] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DictionaryEntryType(AbstractMemberType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_proxy: Optional[DefinitionProxy] = field(
        default=None,
        metadata={
            "name": "DefinitionProxy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition_collection: Optional["DefinitionCollection"] = field(
        default=None,
        metadata={
            "name": "DefinitionCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_ordinal_reference_system: Optional[
        TimeOrdinalReferenceSystem
    ] = field(
        default=None,
        metadata={
            "name": "TimeOrdinalReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_clock: Optional[TimeClock] = field(
        default=None,
        metadata={
            "name": "TimeClock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_calendar: Optional[TimeCalendar] = field(
        default=None,
        metadata={
            "name": "TimeCalendar",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_coordinate_system: Optional[TimeCoordinateSystem] = field(
        default=None,
        metadata={
            "name": "TimeCoordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_reference_system: Optional[TimeReferenceSystem] = field(
        default=None,
        metadata={
            "name": "TimeReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter_group: Optional[OperationParameterGroup] = field(
        default=None,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: Optional[OperationParameter1] = field(
        default=None,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_method: Optional[OperationMethod] = field(
        default=None,
        metadata={
            "name": "OperationMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    concatenated_operation: Optional[ConcatenatedOperation] = field(
        default=None,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    prime_meridian: Optional[PrimeMeridian1] = field(
        default=None,
        metadata={
            "name": "PrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoid: Optional[Ellipsoid1] = field(
        default=None,
        metadata={
            "name": "Ellipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_datum: Optional[TemporalDatum1] = field(
        default=None,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: Optional[VerticalDatum1] = field(
        default=None,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: Optional[ImageDatum1] = field(
        default=None,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: Optional[EngineeringDatum1] = field(
        default=None,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: Optional[GeodeticDatum1] = field(
        default=None,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    oblique_cartesian_cs: Optional[ObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_cs: Optional[TemporalCs] = field(
        default=None,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs1] = field(
        default=None,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: Optional[CylindricalCs1] = field(
        default=None,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: Optional[PolarCs1] = field(
        default=None,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs1] = field(
        default=None,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: Optional[UserDefinedCs1] = field(
        default=None,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: Optional[LinearCs1] = field(
        default=None,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: Optional[TimeCs1] = field(
        default=None,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: Optional[VerticalCs1] = field(
        default=None,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs1] = field(
        default=None,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: Optional[EllipsoidalCs1] = field(
        default=None,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system_axis: Optional[CoordinateSystemAxis] = field(
        default=None,
        metadata={
            "name": "CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compound_crs: Optional[CompoundCrs] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional[GeographicCrs] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional[GeodeticCrs] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional[DerivedCrs] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional[ProjectedCrs] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dictionary: Optional["Dictionary"] = field(
        default=None,
        metadata={
            "name": "Dictionary",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition: Optional[Definition] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ProjectedCrspropertyType:
    """
    Gml:ProjectedCRSPropertyType is a property type for association roles to a
    projected coordinate reference system, either referencing or containing the
    definition of that reference system.
    """

    class Meta:
        name = "ProjectedCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    projected_crs: Optional[ProjectedCrs] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CompoundCrsref(CompoundCrspropertyType):
    class Meta:
        name = "compoundCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringCrsref(EngineeringCrspropertyType):
    class Meta:
        name = "engineeringCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeocentricCrsref(GeocentricCrspropertyType):
    class Meta:
        name = "geocentricCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageCrsref(ImageCrspropertyType):
    class Meta:
        name = "imageCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Subject(TargetPropertyType):
    class Meta:
        name = "subject"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Target(TargetPropertyType):
    class Meta:
        name = "target"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCrsref(TemporalCrspropertyType):
    class Meta:
        name = "temporalCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Using(ProcedurePropertyType):
    class Meta:
        name = "using"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCrsref(VerticalCrspropertyType):
    class Meta:
        name = "verticalCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExVerticalExtentType2(AbstractObjectType1):
    """
    :ivar minimum_value: lowest vertical extent contained in the
        resource
    :ivar maximum_value: highest vertical extent contained in the
        resource
    :ivar vertical_crsid:
    :ivar vertical_crs:
    """

    class Meta:
        name = "EX_VerticalExtent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    minimum_value: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "minimumValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )
    maximum_value: Optional[RealPropertyType1] = field(
        default=None,
        metadata={
            "name": "maximumValue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "required": True,
        },
    )
    vertical_crsid: Optional[AbstractReferenceSystemPropertyType] = field(
        default=None,
        metadata={
            "name": "verticalCRSId",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    vertical_crs: Optional[ScCrsPropertyType2] = field(
        default=None,
        metadata={
            "name": "verticalCRS",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )


@dataclass
class AbstractContentInformationPropertyType:
    class Meta:
        name = "Abstract_ContentInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_feature_catalogue_description: Optional[
        MdFeatureCatalogueDescription2
    ] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogueDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_feature_catalogue: Optional[MdFeatureCatalogue] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mi_image_description: Optional[MiImageDescription] = field(
        default=None,
        metadata={
            "name": "MI_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_image_description: Optional[MdImageDescription2] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    mi_coverage_description: Optional[MiCoverageDescription] = field(
        default=None,
        metadata={
            "name": "MI_CoverageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    md_coverage_description: Optional[MdCoverageDescription2] = field(
        default=None,
        metadata={
            "name": "MD_CoverageDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFeatureCataloguePropertyType:
    class Meta:
        name = "MD_FeatureCatalogue_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrc/2.0"

    md_feature_catalogue: Optional[MdFeatureCatalogue] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogue",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrc/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiLineagePropertyType1:
    class Meta:
        name = "LI_Lineage_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    li_lineage: Optional[LiLineage1] = field(
        default=None,
        metadata={
            "name": "LI_Lineage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ObservationType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    valid_time: Optional[ValidTime] = field(
        default=None,
        metadata={
            "name": "validTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    using: Optional[Using] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    subject: Optional[Subject] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    target: Optional[Target] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    result_of: Optional[ResultOf] = field(
        default=None,
        metadata={
            "name": "resultOf",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class DefinitionMember(DictionaryEntryType):
    class Meta:
        name = "definitionMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedCrsref(DerivedCrspropertyType):
    class Meta:
        name = "derivedCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DictionaryEntry(DictionaryEntryType):
    """This property element contains or refers to the definitions which are
    members of a dictionary.

    The content model follows the standard GML property pattern, so a
    gml:dictionaryEntry may either contain or refer to a single
    gml:Definition. Since gml:Dictionary is substitutable for
    gml:Definition, the content of an entry may itself be a lower level
    dictionary. Note that if the value is provided by reference, this
    definition does not carry a handle (gml:id) in this context, so does
    not allow external references to this specific definition in this
    context.  When used in this way the referenced definition will
    usually be in a dictionary in the same XML document.
    """

    class Meta:
        name = "dictionaryEntry"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ProjectedCrsref(ProjectedCrspropertyType):
    class Meta:
        name = "projectedCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExVerticalExtent2(ExVerticalExtentType2):
    """
    Vertical domain of resource.
    """

    class Meta:
        name = "EX_VerticalExtent"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class DqDataQualityType1(AbstractObjectType2):
    class Meta:
        name = "DQ_DataQuality_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    scope: Optional[DqScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    report: List[DqElementPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    lineage: Optional[LiLineagePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DictionaryType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_member: List[DefinitionMember] = field(
        default_factory=list,
        metadata={
            "name": "definitionMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dictionary_entry: List[DictionaryEntry] = field(
        default_factory=list,
        metadata={
            "name": "dictionaryEntry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    indirect_entry: List[IndirectEntry] = field(
        default_factory=list,
        metadata={
            "name": "indirectEntry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class DirectedObservationType(ObservationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    direction: Optional[Direction] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class Observation(ObservationType):
    """The content model is a straightforward extension of gml:AbstractFeatureType;
    it automatically has the gml:identifier, gml:description,
    gml:descriptionReference, gml:name, and gml:boundedBy properties.

    The gml:validTime element describes the time of the observation.
    Note that this may be a time instant or a time period. The gml:using
    property contains or references a description of a sensor,
    instrument or procedure used for the observation. The gml:target
    property contains or references the specimen, region or station
    which is the object of the observation. This property is
    particularly useful for remote observations, such as photographs,
    where a generic location property might apply to the location of the
    camera or the location of the field of view, and thus may be
    ambiguous. The gml:subject element is provided as a convenient
    synonym for gml:target. This is the term commonly used in
    phtotography. The gml:resultOf property indicates the result of the
    observation.  The value may be inline, or a reference to a value
    elsewhere.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExVerticalExtentPropertyType2:
    class Meta:
        name = "EX_VerticalExtent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_vertical_extent: Optional[ExVerticalExtent2] = field(
        default=None,
        metadata={
            "name": "EX_VerticalExtent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDataQuality1(DqDataQualityType1):
    class Meta:
        name = "DQ_DataQuality"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DefinitionCollection(DictionaryType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Dictionary(DictionaryType):
    """Sets of definitions may be collected into dictionaries or collections.

    A gml:Dictionary is a non-abstract collection of definitions. The
    gml:Dictionary content model adds a list of gml:dictionaryEntry
    properties that contain or reference gml:Definition objects.  A
    database handle (gml:id attribute) is required, in order that this
    collection may be referred to. The standard gml:identifier,
    gml:description, gml:descriptionReference and gml:name properties
    are available to reference or contain more information about this
    dictionary. The gml:description and gml:descriptionReference
    property elements may be used for a description of this dictionary.
    The derived gml:name element may be used for the name(s) of this
    dictionary. for remote definiton references gml:dictionaryEntry
    shall be used. If a Definition object contained within a Dictionary
    uses the descriptionReference property to refer to a remote
    definition, then this enables the inclusion of a remote definition
    in a local dictionary, giving a handle and identifier in the context
    of the local dictionary.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedObservation(DirectedObservationType):
    """A gml:DirectedObservation is the same as an observation except that it adds
    an additional gml:direction property.

    This is the direction in which the observation was acquired. Clearly
    this applies only to certain types of observations such as visual
    observations by people, or observations obtained from terrestrial
    cameras.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedObservationAtDistanceType(DirectedObservationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    distance: Optional[MeasureType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ExSpatialTemporalExtentType2(ExTemporalExtentType2):
    """
    :ivar vertical_extent: vertical extent component
    :ivar spatial_extent:
    """

    class Meta:
        name = "EX_SpatialTemporalExtent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    vertical_extent: Optional[ExVerticalExtentPropertyType2] = field(
        default=None,
        metadata={
            "name": "verticalExtent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    spatial_extent: List[AbstractExGeographicExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "spatialExtent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class DqDataQualityPropertyType1:
    class Meta:
        name = "DQ_DataQuality_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_data_quality: Optional[DqDataQuality1] = field(
        default=None,
        metadata={
            "name": "DQ_DataQuality",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DirectedObservationAtDistance(DirectedObservationAtDistanceType):
    """Gml:DirectedObservationAtDistance adds an additional distance property.

    This is the distance from the observer to the subject of the
    observation. Clearly this applies only to certain types of
    observations such as visual observations by people, or observations
    obtained from terrestrial cameras.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExSpatialTemporalExtent2(ExSpatialTemporalExtentType2):
    """
    Extent with respect to date/time and spatial boundaries.
    """

    class Meta:
        name = "EX_SpatialTemporalExtent"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class MdMetadataType1(AbstractObjectType2):
    """
    Information about the metadata.
    """

    class Meta:
        name = "MD_Metadata_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    file_identifier: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "fileIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    character_set: Optional[MdCharacterSetCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "characterSet",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    parent_identifier: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "parentIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    hierarchy_level: List[MdScopeCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "hierarchyLevel",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    hierarchy_level_name: List[CharacterStringPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "hierarchyLevelName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact: List[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    date_stamp: Optional[DatePropertyType2] = field(
        default=None,
        metadata={
            "name": "dateStamp",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    metadata_standard_name: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "metadataStandardName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_standard_version: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "metadataStandardVersion",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    data_set_uri: Optional[CharacterStringPropertyType2] = field(
        default=None,
        metadata={
            "name": "dataSetURI",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    locale: List[PtLocalePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    spatial_representation_info: List[
        MdSpatialRepresentationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "spatialRepresentationInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    reference_system_info: List[MdReferenceSystemPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "referenceSystemInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_extension_info: List[
        MdMetadataExtensionInformationPropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "metadataExtensionInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    identification_info: List[MdIdentificationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "identificationInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    content_info: List[MdContentInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "contentInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distribution_info: Optional[MdDistributionPropertyType1] = field(
        default=None,
        metadata={
            "name": "distributionInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    data_quality_info: List[DqDataQualityPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "dataQualityInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    portrayal_catalogue_info: List[
        MdPortrayalCatalogueReferencePropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "portrayalCatalogueInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_constraints: List[MdConstraintsPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "metadataConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    application_schema_info: List[
        MdApplicationSchemaInformationPropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "applicationSchemaInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_maintenance: Optional[
        MdMaintenanceInformationPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "metadataMaintenance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    series: List[DsAggregatePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    describes: List[DsDataSetPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    property_type: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "propertyType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_type: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "featureType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_attribute: List[ObjectReferencePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "featureAttribute",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class FeatureArrayPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    feature_collection: List["FeatureCollection"] = field(
        default_factory=list,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    directed_observation_at_distance: List[
        DirectedObservationAtDistance
    ] = field(
        default_factory=list,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    directed_observation: List[DirectedObservation] = field(
        default_factory=list,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    observation: List[Observation] = field(
        default_factory=list,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    rectified_grid_coverage: List[RectifiedGridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    grid_coverage: List[GridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_solid_coverage: List[MultiSolidCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_surface_coverage: List[MultiSurfaceCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_curve_coverage: List[MultiCurveCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_point_coverage: List[MultiPointCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    dynamic_feature_collection: List[DynamicFeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    dynamic_feature: List[DynamicFeature] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )


@dataclass
class ExSpatialTemporalExtentPropertyType2:
    class Meta:
        name = "EX_SpatialTemporalExtent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_spatial_temporal_extent: Optional[ExSpatialTemporalExtent2] = field(
        default=None,
        metadata={
            "name": "EX_SpatialTemporalExtent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExTemporalExtentPropertyType2:
    class Meta:
        name = "EX_TemporalExtent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_spatial_temporal_extent: Optional[ExSpatialTemporalExtent2] = field(
        default=None,
        metadata={
            "name": "EX_SpatialTemporalExtent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    ex_temporal_extent: Optional[ExTemporalExtent2] = field(
        default=None,
        metadata={
            "name": "EX_TemporalExtent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMetadata1(MdMetadataType1):
    class Meta:
        name = "MD_Metadata"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class FeatureMembers(FeatureArrayPropertyType):
    class Meta:
        name = "featureMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExExtentType2(AbstractExtentType):
    """
    :ivar description: sets of points defining the bounding polygon or
        any other GM_Object geometry (point, line or polygon)
    :ivar geographic_element:
    :ivar temporal_element:
    :ivar vertical_element:
    """

    class Meta:
        name = "EX_Extent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    geographic_element: List[AbstractExGeographicExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "geographicElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    temporal_element: List[ExTemporalExtentPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "temporalElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    vertical_element: List[ExVerticalExtentPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "verticalElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )


@dataclass
class AbstractFeatureCollectionType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    feature_member: List["FeatureMember"] = field(
        default_factory=list,
        metadata={
            "name": "featureMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    feature_members: Optional[FeatureMembers] = field(
        default=None,
        metadata={
            "name": "featureMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ExExtent2(ExExtentType2):
    """
    Extent of the resource.
    """

    class Meta:
        name = "EX_Extent"
        namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"


@dataclass
class AbstractFeatureCollection(AbstractFeatureCollectionType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FeatureCollectionType(AbstractFeatureCollectionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExExtentPropertyType2:
    class Meta:
        name = "EX_Extent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/gex/1.0"

    ex_extent: Optional[ExExtent2] = field(
        default=None,
        metadata={
            "name": "EX_Extent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractExtentPropertyType:
    class Meta:
        name = "Abstract_Extent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    ex_extent: Optional[ExExtent2] = field(
        default=None,
        metadata={
            "name": "EX_Extent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/gex/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class FeatureCollection(FeatureCollectionType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MiInstrumentationEventType(AbstractObjectType1):
    """
    Instrumentation Event Description.
    """

    class Meta:
        name = "MI_InstrumentationEvent_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    citation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    extent: List[AbstractExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: List[MiInstrumentationEventTypeCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "min_occurs": 1,
        },
    )
    revision_history: List[MiRevisionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "revisionHistory",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MdScopeType(AbstractObjectType1):
    """
    :ivar level: description of the scope
    :ivar extent:
    :ivar level_description:
    """

    class Meta:
        name = "MD_Scope_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    level: Optional[MdScopeCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
            "required": True,
        },
    )
    extent: List[AbstractExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    level_description: List[MdScopeDescriptionPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "levelDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )


@dataclass
class ArrayAssociationType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    generic_meta_data: List[GenericMetaData] = field(
        default_factory=list,
        metadata={
            "name": "GenericMetaData",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value_group: List[ParameterValueGroup] = field(
        default_factory=list,
        metadata={
            "name": "ParameterValueGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: List[ParameterValue1] = field(
        default_factory=list,
        metadata={
            "name": "ParameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_function: List[GridFunction] = field(
        default_factory=list,
        metadata={
            "name": "GridFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coverage_mapping_rule: List[CoverageMappingRule] = field(
        default_factory=list,
        metadata={
            "name": "CoverageMappingRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coverage_function: List[CoverageFunction] = field(
        default_factory=list,
        metadata={
            "name": "coverageFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file: List[File] = field(
        default_factory=list,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_block: List[DataBlock] = field(
        default_factory=list,
        metadata={
            "name": "DataBlock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_extent: List[QuantityExtent] = field(
        default_factory=list,
        metadata={
            "name": "QuantityExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_extent: List[CountExtent] = field(
        default_factory=list,
        metadata={
            "name": "CountExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_extent: List[CategoryExtent] = field(
        default_factory=list,
        metadata={
            "name": "CategoryExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_array: List[ValueArray] = field(
        default_factory=list,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_value: List[CompositeValue] = field(
        default_factory=list,
        metadata={
            "name": "CompositeValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_list: List[QuantityList] = field(
        default_factory=list,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_list: List[CountList] = field(
        default_factory=list,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_list: List[CategoryList] = field(
        default_factory=list,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_list: List[BooleanList] = field(
        default_factory=list,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity: List[Quantity] = field(
        default_factory=list,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    count: List[Count] = field(
        default_factory=list,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    category: List[Category] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    boolean: List[Boolean2] = field(
        default_factory=list,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    affine_placement: List[AffinePlacement] = field(
        default_factory=list,
        metadata={
            "name": "AffinePlacement",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodesic: List[Geodesic] = field(
        default_factory=list,
        metadata={
            "name": "Geodesic",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodesic_string: List[GeodesicString] = field(
        default_factory=list,
        metadata={
            "name": "GeodesicString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    clothoid: List[Clothoid] = field(
        default_factory=list,
        metadata={
            "name": "Clothoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    offset_curve: List[OffsetCurve] = field(
        default_factory=list,
        metadata={
            "name": "OffsetCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bezier: List[Bezier] = field(
        default_factory=list,
        metadata={
            "name": "Bezier",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bspline: List[Bspline] = field(
        default_factory=list,
        metadata={
            "name": "BSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cubic_spline: List[CubicSpline] = field(
        default_factory=list,
        metadata={
            "name": "CubicSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    circle_by_center_point: List[CircleByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "CircleByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_by_center_point: List[ArcByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "ArcByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_by_bulge: List[ArcByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_string_by_bulge: List[ArcStringByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcStringByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    circle: List[Circle] = field(
        default_factory=list,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc: List[Arc1] = field(
        default_factory=list,
        metadata={
            "name": "Arc",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_string: List[ArcString] = field(
        default_factory=list,
        metadata={
            "name": "ArcString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string_segment: List[LineStringSegment] = field(
        default_factory=list,
        metadata={
            "name": "LineStringSegment",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    envelope_with_time_period: List[EnvelopeWithTimePeriod] = field(
        default_factory=list,
        metadata={
            "name": "EnvelopeWithTimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    envelope: List[Envelope] = field(
        default_factory=list,
        metadata={
            "name": "Envelope",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    array: List[Array] = field(
        default_factory=list,
        metadata={
            "name": "Array",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bag: List[Bag] = field(
        default_factory=list,
        metadata={
            "name": "Bag",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_complex: List[TopoComplex] = field(
        default_factory=list,
        metadata={
            "name": "TopoComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_solid: List[TopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    face: List[Face] = field(
        default_factory=list,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    edge: List[Edge] = field(
        default_factory=list,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    node: List[Node] = field(
        default_factory=list,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    moving_object_status: List[MovingObjectStatus] = field(
        default_factory=list,
        metadata={
            "name": "MovingObjectStatus",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    feature_collection: List[FeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: List[
        DirectedObservationAtDistance
    ] = field(
        default_factory=list,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: List[DirectedObservation] = field(
        default_factory=list,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: List[Observation] = field(
        default_factory=list,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: List[RectifiedGridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: List[GridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: List[MultiSolidCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: List[MultiSurfaceCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: List[MultiCurveCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: List[MultiPointCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: List[DynamicFeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: List[DynamicFeature] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_topology_complex: List[TimeTopologyComplex] = field(
        default_factory=list,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_edge: List[TimeEdge] = field(
        default_factory=list,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: List[TimeNode] = field(
        default_factory=list,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: List[TimePeriod] = field(
        default_factory=list,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: List[TimeInstant] = field(
        default_factory=list,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid: List[RectifiedGrid] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: List[Grid] = field(
        default_factory=list,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: List[GeometricComplex] = field(
        default_factory=list,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: List[MultiSolid] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: List[MultiSurface] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: List[MultiCurve] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: List[MultiPoint] = field(
        default_factory=list,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: List[MultiGeometry] = field(
        default_factory=list,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: List[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: List[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: List[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: List[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: List[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: List[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: List[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: List[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: List[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: List[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: List[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: List[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: List[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: List[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: List[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: List[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: List[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition_proxy: List[DefinitionProxy] = field(
        default_factory=list,
        metadata={
            "name": "DefinitionProxy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition_collection: List[DefinitionCollection] = field(
        default_factory=list,
        metadata={
            "name": "DefinitionCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_ordinal_reference_system: List[TimeOrdinalReferenceSystem] = field(
        default_factory=list,
        metadata={
            "name": "TimeOrdinalReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_clock: List[TimeClock] = field(
        default_factory=list,
        metadata={
            "name": "TimeClock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_calendar: List[TimeCalendar] = field(
        default_factory=list,
        metadata={
            "name": "TimeCalendar",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_coordinate_system: List[TimeCoordinateSystem] = field(
        default_factory=list,
        metadata={
            "name": "TimeCoordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_reference_system: List[TimeReferenceSystem] = field(
        default_factory=list,
        metadata={
            "name": "TimeReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter_group: List[OperationParameterGroup] = field(
        default_factory=list,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: List[OperationParameter1] = field(
        default_factory=list,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_method: List[OperationMethod] = field(
        default_factory=list,
        metadata={
            "name": "OperationMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    concatenated_operation: List[ConcatenatedOperation] = field(
        default_factory=list,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    transformation: List[Transformation] = field(
        default_factory=list,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: List[Conversion1] = field(
        default_factory=list,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: List[PassThroughOperation] = field(
        default_factory=list,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    prime_meridian: List[PrimeMeridian1] = field(
        default_factory=list,
        metadata={
            "name": "PrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoid: List[Ellipsoid1] = field(
        default_factory=list,
        metadata={
            "name": "Ellipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_datum: List[TemporalDatum1] = field(
        default_factory=list,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: List[VerticalDatum1] = field(
        default_factory=list,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: List[ImageDatum1] = field(
        default_factory=list,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: List[EngineeringDatum1] = field(
        default_factory=list,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: List[GeodeticDatum1] = field(
        default_factory=list,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    oblique_cartesian_cs: List[ObliqueCartesianCs] = field(
        default_factory=list,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_cs: List[TemporalCs] = field(
        default_factory=list,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: List[AffineCs1] = field(
        default_factory=list,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: List[CylindricalCs1] = field(
        default_factory=list,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: List[PolarCs1] = field(
        default_factory=list,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: List[SphericalCs1] = field(
        default_factory=list,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: List[UserDefinedCs1] = field(
        default_factory=list,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: List[LinearCs1] = field(
        default_factory=list,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: List[TimeCs1] = field(
        default_factory=list,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: List[VerticalCs1] = field(
        default_factory=list,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: List[CartesianCs1] = field(
        default_factory=list,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: List[EllipsoidalCs1] = field(
        default_factory=list,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system_axis: List[CoordinateSystemAxis] = field(
        default_factory=list,
        metadata={
            "name": "CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compound_crs: List[CompoundCrs] = field(
        default_factory=list,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: List[GeocentricCrs] = field(
        default_factory=list,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: List[GeographicCrs] = field(
        default_factory=list,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: List[TemporalCrs] = field(
        default_factory=list,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: List[ImageCrs] = field(
        default_factory=list,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: List[EngineeringCrs] = field(
        default_factory=list,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: List[VerticalCrs] = field(
        default_factory=list,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: List[GeodeticCrs] = field(
        default_factory=list,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: List[DerivedCrs] = field(
        default_factory=list,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: List[ProjectedCrs] = field(
        default_factory=list,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conventional_unit: List[ConventionalUnit] = field(
        default_factory=list,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: List[DerivedUnit] = field(
        default_factory=list,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: List[BaseUnit] = field(
        default_factory=list,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: List[UnitDefinition] = field(
        default_factory=list,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dictionary: List[Dictionary] = field(
        default_factory=list,
        metadata={
            "name": "Dictionary",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition: List[Definition] = field(
        default_factory=list,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FeaturePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    feature_collection: Optional[FeatureCollection] = field(
        default=None,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: Optional[
        DirectedObservationAtDistance
    ] = field(
        default=None,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: Optional[DirectedObservation] = field(
        default=None,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: Optional[Observation] = field(
        default=None,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
        default=None,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: Optional[GridCoverage] = field(
        default=None,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: Optional[MultiSolidCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: Optional[MultiSurfaceCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: Optional[MultiCurveCoverage] = field(
        default=None,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: Optional[MultiPointCoverage] = field(
        default=None,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: Optional[DynamicFeatureCollection] = field(
        default=None,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: Optional[DynamicFeature] = field(
        default=None,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue2]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MiInstrumentationEvent(MiInstrumentationEventType):
    class Meta:
        name = "MI_InstrumentationEvent"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MdScope(MdScopeType):
    """new: information about the scope of the resource"""

    class Meta:
        name = "MD_Scope"
        namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"


@dataclass
class FeatureMember(FeaturePropertyType):
    class Meta:
        name = "featureMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FeatureProperty(FeaturePropertyType):
    class Meta:
        name = "featureProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Members(ArrayAssociationType):
    class Meta:
        name = "members"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MiInstrumentationEventPropertyType:
    class Meta:
        name = "MI_InstrumentationEvent_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_instrumentation_event: Optional[MiInstrumentationEvent] = field(
        default=None,
        metadata={
            "name": "MI_InstrumentationEvent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopePropertyType:
    class Meta:
        name = "MD_Scope_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_scope: Optional[MdScope] = field(
        default=None,
        metadata={
            "name": "MD_Scope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mcc/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiInstrumentationEventListType(AbstractObjectType1):
    """
    Instrumentation EventList Description.
    """

    class Meta:
        name = "MI_InstrumentationEventList_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    locale: Optional[PtLocalePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    metadata_constraints: List[AbstractConstraintsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    instrumentation_event: List[MiInstrumentationEventPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "instrumentationEvent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MdMaintenanceInformationType2(AbstractMaintenanceInformationType):
    """
    :ivar maintenance_and_update_frequency: frequency with which changes
        and additions are made to the resource after the initial
        resource is completed
    :ivar maintenance_date: date information associated with maintenance
        of resource
    :ivar user_defined_maintenance_frequency: maintenance period other
        than those defined
    :ivar maintenance_scope: information about the scope and extent of
        maintenance
    :ivar maintenance_note: information regarding specific requirements
        for maintaining the resource
    :ivar contact: identification of, and means of communicating with,
        person(s) and organisation(s) with responsibility for
        maintaining the metadata
    """

    class Meta:
        name = "MD_MaintenanceInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mmi/1.0"

    maintenance_and_update_frequency: Optional[
        MdMaintenanceFrequencyCodePropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "maintenanceAndUpdateFrequency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    maintenance_date: List[AbstractTypedDatePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "maintenanceDate",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    user_defined_maintenance_frequency: Optional[
        TmPeriodDurationPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "userDefinedMaintenanceFrequency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    maintenance_scope: List[MdScopePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "maintenanceScope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    maintenance_note: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "maintenanceNote",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    contact: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )


@dataclass
class LiProcessStepType2(AbstractObjectType1):
    """
    :ivar description: description of the event, including related
        parameters or tolerances
    :ivar rationale: requirement or purpose for the process step
    :ivar step_date_time: date, time, range or period of process step
    :ivar processor: identification of, and means of communication with,
        person(s) and organisation(s) associated with the process step
    :ivar reference: process step documentation
    :ivar scope: type of resource and/or extent to which the process
        step applies
    :ivar source:
    """

    class Meta:
        name = "LI_ProcessStep_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
            "required": True,
        },
    )
    rationale: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    step_date_time: Optional[TmPrimitivePropertyType2] = field(
        default=None,
        metadata={
            "name": "stepDateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    processor: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    reference: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source: List["LiSourcePropertyType2"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class AbstractMdSpatialRepresentationType2(AbstractSpatialRepresentationType):
    """
    :ivar scope: level and extent of the spatial representation
    """

    class Meta:
        name = "AbstractMD_SpatialRepresentation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class AbstractDqResultType2(AbstractObjectType1):
    """
    :ivar date_time: date when the result was generated
    :ivar result_scope: scope of the result
    """

    class Meta:
        name = "AbstractDQ_Result_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    date_time: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    result_scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "name": "resultScope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class MiInstrumentationEventList(MiInstrumentationEventListType):
    class Meta:
        name = "MI_InstrumentationEventList"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MdMaintenanceInformation2(MdMaintenanceInformationType2):
    """
    Information about the scope and frequency of updating.
    """

    class Meta:
        name = "MD_MaintenanceInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mmi/1.0"


@dataclass
class LeProcessStepType(LiProcessStepType2):
    class Meta:
        name = "LE_ProcessStep_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    processing_information: Optional[LeProcessingPropertyType] = field(
        default=None,
        metadata={
            "name": "processingInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    report: List[LeProcessStepReportPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    output: List[LeSourcePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class LiProcessStep2(LiProcessStepType2):
    """
    Information about an event or transformation in the life of a resource
    including the process used to maintain the resource.
    """

    class Meta:
        name = "LI_ProcessStep"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class AbstractMdSpatialRepresentation2(AbstractMdSpatialRepresentationType2):
    """
    Digital mechanism used to represent spatial information.
    """

    class Meta:
        name = "AbstractMD_SpatialRepresentation"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdGridSpatialRepresentationType2(AbstractMdSpatialRepresentationType2):
    """
    :ivar number_of_dimensions: number of independent spatial-temporal
        axes
    :ivar axis_dimension_properties: information about spatial-temporal
        axis properties
    :ivar cell_geometry: identification of grid data as point or cell
    :ivar transformation_parameter_availability: indication of whether
        or not parameters for transformation between image coordinates
        and geographic or map coordinates exist (are available)
    """

    class Meta:
        name = "MD_GridSpatialRepresentation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    number_of_dimensions: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "numberOfDimensions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    axis_dimension_properties: List[MdDimensionPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "axisDimensionProperties",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    cell_geometry: Optional[MdCellGeometryCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "cellGeometry",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    transformation_parameter_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "transformationParameterAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )


@dataclass
class MdVectorSpatialRepresentationType2(AbstractMdSpatialRepresentationType2):
    """
    :ivar topology_level: code which identifies the degree of complexity
        of the spatial relationships
    :ivar geometric_objects: information about the geometric objects
        used in the resource
    """

    class Meta:
        name = "MD_VectorSpatialRepresentation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    topology_level: Optional[MdTopologyLevelCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "topologyLevel",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    geometric_objects: List[MdGeometricObjectsPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "geometricObjects",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class AbstractDqResult2(AbstractDqResultType2):
    """
    Generalization of more specific result classes.
    """

    class Meta:
        name = "AbstractDQ_Result"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqConformanceResultType2(AbstractDqResultType2):
    """
    :ivar specification: citation of data product specification or user
        requirement against which data is being evaluated
    :ivar explanation: explanation of the meaning of conformance for
        this result
    :ivar pass_value: indication of the conformance result where 0 =
        fail and 1 = pass
    """

    class Meta:
        name = "DQ_ConformanceResult_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    specification: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    explanation: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    pass_value: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "pass",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )


@dataclass
class DqDescriptiveResultType(AbstractDqResultType2):
    """
    :ivar statement: textual expression of the descriptive result
    """

    class Meta:
        name = "DQ_DescriptiveResult_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    statement: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )


@dataclass
class DqQuantitativeResultType2(AbstractDqResultType2):
    """
    :ivar value: quantitative value or values, content determined by the
        evaluation procedure used, accordingly with the value type and
        valueStructure defined for the measure
    :ivar value_unit: value unit for reporting a data quality result
    :ivar value_record_type: value type for reporting a data quality
        result, depends of the implementation
    """

    class Meta:
        name = "DQ_QuantitativeResult_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    value: List[RecordPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "min_occurs": 1,
        },
    )
    value_unit: Optional[UnitOfMeasurePropertyType2] = field(
        default=None,
        metadata={
            "name": "valueUnit",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    value_record_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "valueRecordType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class QeCoverageResultType(AbstractDqResultType2):
    """
    :ivar spatial_representation_type: Description: method used to
        spatially represent the coverage result shortName: spaRepType
    :ivar result_file:
    :ivar result_spatial_representation:
    :ivar result_content_description:
    :ivar result_format:
    """

    class Meta:
        name = "QE_CoverageResult_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    spatial_representation_type: Optional[
        MdSpatialRepresentationTypeCodePropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "spatialRepresentationType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    result_file: Optional[QualityResultFilePropertyType] = field(
        default=None,
        metadata={
            "name": "resultFile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    result_spatial_representation: Optional[
        "AbstractSpatialRepresentationPropertyType"
    ] = field(
        default=None,
        metadata={
            "name": "resultSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    result_content_description: Optional[
        AbstractContentInformationPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "resultContentDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    result_format: Optional[MdFormatPropertyType2] = field(
        default=None,
        metadata={
            "name": "resultFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )


@dataclass
class MiInstrumentationEventListPropertyType:
    class Meta:
        name = "MI_InstrumentationEventList_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_instrumentation_event_list: Optional[
        MiInstrumentationEventList
    ] = field(
        default=None,
        metadata={
            "name": "MI_InstrumentationEventList",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMaintenanceInformationPropertyType:
    class Meta:
        name = "Abstract_MaintenanceInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_maintenance_information: Optional[MdMaintenanceInformation2] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceInformationPropertyType2:
    class Meta:
        name = "MD_MaintenanceInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mmi/1.0"

    md_maintenance_information: Optional[MdMaintenanceInformation2] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mmi/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeProcessStep(LeProcessStepType):
    """Description: Information about an event or transformation in the life of the dataset including details of the algorithm and software used for processing FGDC: shortName: DetailProcStep"""

    class Meta:
        name = "LE_ProcessStep"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class MdGeorectifiedType2(MdGridSpatialRepresentationType2):
    """
    :ivar check_point_availability: indication of whether or not
        geographic position points are available to test the accuracy of
        the georeferenced grid data
    :ivar check_point_description: description of geographic position
        points used to test the accuracy of the georeferenced grid data
    :ivar corner_points: earth location in the coordinate system defined
        by the Spatial Reference System and the grid coordinate of the
        cells at opposite ends of grid coverage along two diagonals in
        the grid spatial dimensions. There are four corner points in a
        georectified grid; at least two corner points along one diagonal
        are required. The first corner point corresponds to the origin
        of the grid.
    :ivar centre_point: earth location in the coordinate system defined
        by the Spatial Reference System and the grid coordinate of the
        cell halfway between opposite ends of the grid in the spatial
        dimensions
    :ivar point_in_pixel: point in a pixel corresponding to the Earth
        location of the pixel
    :ivar transformation_dimension_description: general description of
        the transformation
    :ivar transformation_dimension_mapping: information about which grid
        axes are the spatial (map) axes
    """

    class Meta:
        name = "MD_Georectified_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    check_point_availability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "checkPointAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    check_point_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "checkPointDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    corner_points: List[GmPointPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "cornerPoints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "min_occurs": 2,
            "max_occurs": 4,
        },
    )
    centre_point: Optional[GmPointPropertyType2] = field(
        default=None,
        metadata={
            "name": "centrePoint",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    point_in_pixel: Optional[MdPixelOrientationCodePropertyType2] = field(
        default=None,
        metadata={
            "name": "pointInPixel",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    transformation_dimension_description: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "transformationDimensionDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    transformation_dimension_mapping: List[
        CharacterStringPropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "transformationDimensionMapping",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "max_occurs": 2,
        },
    )


@dataclass
class MdGeoreferenceableType2(MdGridSpatialRepresentationType2):
    """
    :ivar control_point_availability: indication of whether or not
        control point(s) exists
    :ivar orientation_parameter_availability: indication of whether or
        not orientation parameters are available
    :ivar orientation_parameter_description: description of parameters
        used to describe sensor orientation
    :ivar georeferenced_parameters: terms which support grid data
        georeferencing
    :ivar parameter_citation: reference providing description of the
        parameters
    """

    class Meta:
        name = "MD_Georeferenceable_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    control_point_availability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "controlPointAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    orientation_parameter_availability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "orientationParameterAvailability",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    orientation_parameter_description: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "orientationParameterDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    georeferenced_parameters: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "georeferencedParameters",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    parameter_citation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "parameterCitation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class MdGridSpatialRepresentation2(MdGridSpatialRepresentationType2):
    """
    Information about grid spatial objects in the resource.
    """

    class Meta:
        name = "MD_GridSpatialRepresentation"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdVectorSpatialRepresentation2(MdVectorSpatialRepresentationType2):
    """
    Information about the vector spatial objects in the resource.
    """

    class Meta:
        name = "MD_VectorSpatialRepresentation"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class DqConformanceResult2(DqConformanceResultType2):
    """
    Information about the outcome of evaluating the obtained value (or set of
    values) against a specified acceptable conformance quality level.
    """

    class Meta:
        name = "DQ_ConformanceResult"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqDescriptiveResult(DqDescriptiveResultType):
    """
    Data quality descriptive result.
    """

    class Meta:
        name = "DQ_DescriptiveResult"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqQuantitativeResult2(DqQuantitativeResultType2):
    """
    The values or information about the value(s) (or set of values) obtained from
    applying a data quality measure.
    """

    class Meta:
        name = "DQ_QuantitativeResult"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class QeCoverageResult(QeCoverageResultType):
    """Description: Result of a data quality measure organising the measured values as a coverage
    shortName: CoverageResult"""

    class Meta:
        name = "QE_CoverageResult"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class MiPlatformType(AbstractPlatformType):
    """
    :ivar citation: Description: complete citation of the platform FGDC:
        Platform_Full_Name Position: 3 shortName: pltNam Conditional: if
        shortName not specified
    :ivar identifier: Unique identification of the platform
    :ivar description: Description: Narrative description of the
        platform supporting the instrument FGDC: Platform_Description
        Position: 2 shortName: pltfrmDesc
    :ivar sponsor: Description: organization responsible for building,
        launch, or operation of the platform FGDC: Platform_Sponsor
        Position: 6 shortName: pltfrmSpnsr
    :ivar instrument:
    :ivar other_property_type: type of other property description (i.e.
        netcdf/variable in ncml.xsd or AdditionalAttribute in ECHO)
    :ivar other_property: instance of otherPropertyType that defines
        attributes not explicitly included in MI_Platform
    :ivar history:
    """

    class Meta:
        name = "MI_Platform_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    citation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    sponsor: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    instrument: List["MiInstrumentPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "min_occurs": 1,
        },
    )
    other_property_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "otherPropertyType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    other_property: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "otherProperty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    history: List[MiInstrumentationEventListPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class AbstractMdIdentificationType2(AbstractResourceDescriptionType):
    """
    :ivar citation: citation for the resource(s)
    :ivar abstract: brief narrative summary of the content of the
        resource(s)
    :ivar purpose: summary of the intentions with which the resource(s)
        was developed
    :ivar credit: recognition of those who contributed to the
        resource(s)
    :ivar status: status of the resource(s)
    :ivar point_of_contact: identification of, and means of
        communication with, person(s) and organisation(s) associated
        with the resource(s)
    :ivar spatial_representation_type: method used to spatially
        represent geographic information
    :ivar spatial_resolution: factor which provides a general
        understanding of the density of spatial data in the resource
    :ivar temporal_resolution: resolution of the resource with respect
        to time
    :ivar topic_category: main theme(s) of the resource
    :ivar extent: spatial and temporal extent of the resource
    :ivar additional_documentation: other documentation associated with
        the resource
    :ivar processing_level: code that identifies the level of processing
        in the producers coding system of a resource eg. NOAA level 1B
    :ivar resource_maintenance:
    :ivar graphic_overview:
    :ivar resource_format:
    :ivar descriptive_keywords:
    :ivar resource_specific_usage:
    :ivar resource_constraints:
    :ivar associated_resource:
    """

    class Meta:
        name = "AbstractMD_Identification_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )
    abstract: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
            "required": True,
        },
    )
    purpose: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    credit: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    status: List[MdProgressCodePropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    point_of_contact: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "pointOfContact",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    spatial_representation_type: List[
        MdSpatialRepresentationTypeCodePropertyType1
    ] = field(
        default_factory=list,
        metadata={
            "name": "spatialRepresentationType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    spatial_resolution: List[MdResolutionPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "spatialResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    temporal_resolution: List[TmPeriodDurationPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "temporalResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    topic_category: List[MdTopicCategoryCodePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "topicCategory",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    extent: List[AbstractExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    additional_documentation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "additionalDocumentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    processing_level: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "processingLevel",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    resource_maintenance: List[
        AbstractMaintenanceInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "resourceMaintenance",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    graphic_overview: List[MdBrowseGraphicPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "graphicOverview",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    resource_format: List[AbstractFormatPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceFormat",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    descriptive_keywords: List[MdKeywordsPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "descriptiveKeywords",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    resource_specific_usage: List[MdUsagePropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "resourceSpecificUsage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    resource_constraints: List[AbstractConstraintsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    associated_resource: List[MdAssociatedResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "associatedResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )


@dataclass
class LeProcessStepPropertyType:
    class Meta:
        name = "LE_ProcessStep_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_process_step: Optional[LeProcessStep] = field(
        default=None,
        metadata={
            "name": "LE_ProcessStep",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiProcessStepPropertyType2:
    class Meta:
        name = "LI_ProcessStep_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_process_step: Optional[LeProcessStep] = field(
        default=None,
        metadata={
            "name": "LE_ProcessStep",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    li_process_step: Optional[LiProcessStep2] = field(
        default=None,
        metadata={
            "name": "LI_ProcessStep",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeorectified2(MdGeorectifiedType2):
    """
    Grid whose cells are regularly spaced in a geographic (i.e., lat / long) or map
    coordinate system defined in the Spatial Referencing System (SRS) so that any
    cell in the grid can be geolocated given its grid coordinate and the grid
    origin, cell spacing, and orientation.
    """

    class Meta:
        name = "MD_Georectified"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdGeoreferenceable2(MdGeoreferenceableType2):
    """
    Grid with cells irregularly spaced in any given geographic/map projection
    coordinate system, whose individual cells can be geolocated using geolocation
    information supplied with the data but cannot be geolocated from the grid
    properties alone.
    """

    class Meta:
        name = "MD_Georeferenceable"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MdVectorSpatialRepresentationPropertyType2:
    class Meta:
        name = "MD_VectorSpatialRepresentation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqResultPropertyType:
    class Meta:
        name = "AbstractDQ_Result_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_quantitative_result: Optional[DqQuantitativeResult2] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_descriptive_result: Optional[DqDescriptiveResult] = field(
        default=None,
        metadata={
            "name": "DQ_DescriptiveResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_conformance_result: Optional[DqConformanceResult2] = field(
        default=None,
        metadata={
            "name": "DQ_ConformanceResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    qe_coverage_result: Optional[QeCoverageResult] = field(
        default=None,
        metadata={
            "name": "QE_CoverageResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqConformanceResultPropertyType2:
    class Meta:
        name = "DQ_ConformanceResult_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_conformance_result: Optional[DqConformanceResult2] = field(
        default=None,
        metadata={
            "name": "DQ_ConformanceResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDescriptiveResultPropertyType:
    class Meta:
        name = "DQ_DescriptiveResult_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_descriptive_result: Optional[DqDescriptiveResult] = field(
        default=None,
        metadata={
            "name": "DQ_DescriptiveResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqQuantitativeResultPropertyType2:
    class Meta:
        name = "DQ_QuantitativeResult_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_quantitative_result: Optional[DqQuantitativeResult2] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class QeCoverageResultPropertyType:
    class Meta:
        name = "QE_CoverageResult_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    qe_coverage_result: Optional[QeCoverageResult] = field(
        default=None,
        metadata={
            "name": "QE_CoverageResult",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiPlatform(MiPlatformType):
    """Description: Designations for the platform used to acquire the dataset shortName: PltfrmId"""

    class Meta:
        name = "MI_Platform"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class AbstractMdIdentification2(AbstractMdIdentificationType2):
    """
    Basic information required to uniquely identify a resource or resources.
    """

    class Meta:
        name = "AbstractMD_Identification"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class MdDataIdentificationType2(AbstractMdIdentificationType2):
    """
    :ivar default_locale:
    :ivar other_locale:
    :ivar environment_description: description of the resource in the
        producer's processing environment, including items such as the
        software, the computer operating system, file name, and the
        dataset size
    :ivar supplemental_information: any other descriptive information
        about the resource
    """

    class Meta:
        name = "MD_DataIdentification_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    default_locale: Optional[PtLocalePropertyType1] = field(
        default=None,
        metadata={
            "name": "defaultLocale",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    other_locale: List[PtLocalePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "otherLocale",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    environment_description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "environmentDescription",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    supplemental_information: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "supplementalInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )


@dataclass
class LiSourceType2(AbstractObjectType1):
    """
    :ivar description: detailed description of the level of the source
        resource
    :ivar source_spatial_resolution: level of detail expressed as a
        scale factor, a distance or an angle
    :ivar source_reference_system: spatial reference system used by the
        source resource
    :ivar source_citation: recommended reference to be used for the
        source resource
    :ivar source_metadata: identifier and link to source metadata
    :ivar scope: type of resource and/or extent of the source
    :ivar source_step:
    """

    class Meta:
        name = "LI_Source_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source_spatial_resolution: Optional[
        AbstractSpatialResolutionPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "sourceSpatialResolution",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source_reference_system: Optional[
        AbstractReferenceSystemPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "sourceReferenceSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source_citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "sourceCitation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source_metadata: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "sourceMetadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source_step: List[LiProcessStepPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "sourceStep",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class AbstractDqElementType2(AbstractQualityElementType):
    """
    :ivar standalone_quality_report_details: Clause in the
        standaloneQualityReport where this data quality element or any
        related data quality element (original results in case of
        derivation or aggregation) is described
    :ivar measure:
    :ivar evaluation_method:
    :ivar result:
    :ivar derived_element:
    """

    class Meta:
        name = "AbstractDQ_Element_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    standalone_quality_report_details: Optional[
        CharacterStringPropertyType1
    ] = field(
        default=None,
        metadata={
            "name": "standaloneQualityReportDetails",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    measure: Optional[DqMeasureReferencePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    evaluation_method: Optional[DqEvaluationMethodPropertyType] = field(
        default=None,
        metadata={
            "name": "evaluationMethod",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    result: List[AbstractDqResultPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "min_occurs": 1,
        },
    )
    derived_element: List["AbstractDqElementPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "derivedElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class MiPlatformPropertyType:
    class Meta:
        name = "MI_Platform_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_platform: Optional[MiPlatform] = field(
        default=None,
        metadata={
            "name": "MI_Platform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractPlatformPropertyType:
    class Meta:
        name = "Abstract_Platform_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    mi_platform: Optional[MiPlatform] = field(
        default=None,
        metadata={
            "name": "MI_Platform",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDataIdentification2(MdDataIdentificationType2):
    """
    Information required to identify a resource.
    """

    class Meta:
        name = "MD_DataIdentification"
        namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"


@dataclass
class LeSourceType(LiSourceType2):
    """
    :ivar processed_level: Description: Processing level of the source
        data shortName: procLevel
    :ivar resolution: Description: Distance between two adjacent pixels
        shortName: procResol
    """

    class Meta:
        name = "LE_Source_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    processed_level: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "processedLevel",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    resolution: Optional[LeNominalResolutionPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class LiSource2(LiSourceType2):
    """
    Information about the source resource used in creating the data specified by
    the scope.
    """

    class Meta:
        name = "LI_Source"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class AbstractDqCompletenessType2(AbstractDqElementType2):
    class Meta:
        name = "AbstractDQ_Completeness_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqElement2(AbstractDqElementType2):
    """
    Aspect of quantitative quality information.
    """

    class Meta:
        name = "AbstractDQ_Element"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqLogicalConsistencyType2(AbstractDqElementType2):
    class Meta:
        name = "AbstractDQ_LogicalConsistency_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqMetaqualityType(AbstractDqElementType2):
    class Meta:
        name = "AbstractDQ_Metaquality_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    related_element: List["AbstractDqElementPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "relatedElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class AbstractDqPositionalAccuracyType2(AbstractDqElementType2):
    class Meta:
        name = "AbstractDQ_PositionalAccuracy_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqTemporalQualityType(AbstractDqElementType2):
    class Meta:
        name = "AbstractDQ_TemporalQuality_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqThematicAccuracyType2(AbstractDqElementType2):
    class Meta:
        name = "AbstractDQ_ThematicAccuracy_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqUsabilityElementType(AbstractDqElementType2):
    class Meta:
        name = "DQ_UsabilityElement_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class MiInstrumentType(AbstractObjectType1):
    """
    :ivar citation: Description: complete citation of the instrument
        FGDC: Instrument_Full_Name Position: 1 shortName: instNam
        Conditional: if shortName not specified
    :ivar identifier: Description: complete citation of the instrument
        FGDC: Instrument_Full_Name Position: 1 shortName: instNam
        Conditional: if shortName not specified
    :ivar type_value: Description: Code describing the type of
        instrument shortName: instType
    :ivar description: Description: Textual description of the
        instrument shortName: instDesc
    :ivar mounted_on:
    :ivar other_property_type: type of other property description (i.e.
        netcdf/variable in ncml.xsd or AdditionalAttribute in ECHO)
    :ivar other_property: instance of otherPropertyType that defines
        attributes not explicitly included in MI_Platform
    :ivar sensor:
    :ivar history:
    """

    class Meta:
        name = "MI_Instrument_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    citation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    type_value: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mounted_on: Optional[MiPlatformPropertyType] = field(
        default=None,
        metadata={
            "name": "mountedOn",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    other_property_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "otherPropertyType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    other_property: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "otherProperty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    sensor: List[MiSensorPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    history: List[MiInstrumentationEventListPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MdDataIdentificationPropertyType2:
    class Meta:
        name = "MD_DataIdentification_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    md_data_identification: Optional[MdDataIdentification2] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LeSource(LeSourceType):
    """Description: information on source of data sets for processing step shortName: SrcDataset"""

    class Meta:
        name = "LE_Source"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class AbstractDqCompleteness2(AbstractDqCompletenessType2):
    """
    Presence and absence of features, their attributes and their relationships.
    """

    class Meta:
        name = "AbstractDQ_Completeness"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqLogicalConsistency2(AbstractDqLogicalConsistencyType2):
    """
    Degree of adherence to logical rules of data structure, attribution and
    relationships (data structure can be conceptual, logical or physical)
    """

    class Meta:
        name = "AbstractDQ_LogicalConsistency"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqMetaquality(AbstractDqMetaqualityType):
    """
    Information about the reliability of data quality results.
    """

    class Meta:
        name = "AbstractDQ_Metaquality"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqPositionalAccuracy2(AbstractDqPositionalAccuracyType2):
    """
    Accuracy of the position of features.
    """

    class Meta:
        name = "AbstractDQ_PositionalAccuracy"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqTemporalQuality(AbstractDqTemporalQualityType):
    """
    Accuracy of the temporal attributes and temporal relationships of features.
    """

    class Meta:
        name = "AbstractDQ_TemporalQuality"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class AbstractDqThematicAccuracy2(AbstractDqThematicAccuracyType2):
    """
    Accuracy of quantitative attributes and the correctness of non-quantitative
    attributes and of the classifications of features and their relationships.
    """

    class Meta:
        name = "AbstractDQ_ThematicAccuracy"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqAbsoluteExternalPositionalAccuracyType2(
    AbstractDqPositionalAccuracyType2
):
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqAccuracyOfAtimeMeasurementType2(AbstractDqTemporalQualityType):
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqCompletenessCommissionType2(AbstractDqCompletenessType2):
    class Meta:
        name = "DQ_CompletenessCommission_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqCompletenessOmissionType2(AbstractDqCompletenessType2):
    class Meta:
        name = "DQ_CompletenessOmission_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqConceptualConsistencyType2(AbstractDqLogicalConsistencyType2):
    class Meta:
        name = "DQ_ConceptualConsistency_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqConfidenceType(AbstractDqMetaqualityType):
    class Meta:
        name = "DQ_Confidence_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqDomainConsistencyType2(AbstractDqLogicalConsistencyType2):
    class Meta:
        name = "DQ_DomainConsistency_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqFormatConsistencyType2(AbstractDqLogicalConsistencyType2):
    class Meta:
        name = "DQ_FormatConsistency_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqGriddedDataPositionalAccuracyType2(AbstractDqPositionalAccuracyType2):
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqHomogeneityType(AbstractDqMetaqualityType):
    class Meta:
        name = "DQ_Homogeneity_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqNonQuantitativeAttributeCorrectnessType(
    AbstractDqThematicAccuracyType2
):
    class Meta:
        name = "DQ_NonQuantitativeAttributeCorrectness_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqQuantitativeAttributeAccuracyType2(AbstractDqThematicAccuracyType2):
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqRelativeInternalPositionalAccuracyType2(
    AbstractDqPositionalAccuracyType2
):
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqRepresentativityType(AbstractDqMetaqualityType):
    class Meta:
        name = "DQ_Representativity_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqTemporalConsistencyType2(AbstractDqTemporalQualityType):
    class Meta:
        name = "DQ_TemporalConsistency_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqTemporalValidityType2(AbstractDqTemporalQualityType):
    class Meta:
        name = "DQ_TemporalValidity_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqThematicClassificationCorrectnessType2(
    AbstractDqThematicAccuracyType2
):
    class Meta:
        name = "DQ_ThematicClassificationCorrectness_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqTopologicalConsistencyType2(AbstractDqLogicalConsistencyType2):
    class Meta:
        name = "DQ_TopologicalConsistency_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqUsabilityElement(DqUsabilityElementType):
    """
    Degree of adherence of a dataset to a specific set of requirements.
    """

    class Meta:
        name = "DQ_UsabilityElement"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class MiInstrument(MiInstrumentType):
    """Description: Designations for the measuring instruments FGDC: Platform_and_Instrument_Identification shortName: PltfrmInstId"""

    class Meta:
        name = "MI_Instrument"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiSensorType(MiInstrumentType):
    """
    Sensor Description.
    """

    class Meta:
        name = "MI_Sensor_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    hosted: List["MiInstrumentPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class LiSourcePropertyType2:
    class Meta:
        name = "LI_Source_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    le_source: Optional[LeSource] = field(
        default=None,
        metadata={
            "name": "LE_Source",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    li_source: Optional[LiSource2] = field(
        default=None,
        metadata={
            "name": "LI_Source",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvCoupledResourceType(AbstractObjectType1):
    """
    :ivar scoped_name: scoped identifier of the resource in the context
        of the given service instance NOTE: name of the resources (i.e.
        dataset) as it is used by a service instance (e.g. layer name or
        featureTypeName).
    :ivar resource_reference: reference to the dataset on which the
        service operates
    :ivar operation:
    :ivar resource:
    """

    class Meta:
        name = "SV_CoupledResource_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    scoped_name: Optional[ScopedNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "scopedName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    resource_reference: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    operation: Optional[SvOperationMetadataPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    resource: List[MdDataIdentificationPropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )


@dataclass
class DqAbsoluteExternalPositionalAccuracy2(
    DqAbsoluteExternalPositionalAccuracyType2
):
    """
    Closeness of reported coordinate values to values accepted as or being true.
    """

    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqAccuracyOfAtimeMeasurement2(DqAccuracyOfAtimeMeasurementType2):
    """
    Correctness of the temporal references of an item (reporting of error in time
    measurement)
    """

    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqCompletenessCommission2(DqCompletenessCommissionType2):
    """
    Excess data present in the dataset, as described by the scope.
    """

    class Meta:
        name = "DQ_CompletenessCommission"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqCompletenessOmission2(DqCompletenessOmissionType2):
    """
    Data absent from the dataset, as described by the scope.
    """

    class Meta:
        name = "DQ_CompletenessOmission"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqConceptualConsistency2(DqConceptualConsistencyType2):
    """
    Adherence to rules of the conceptual schema.
    """

    class Meta:
        name = "DQ_ConceptualConsistency"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqConfidence(DqConfidenceType):
    """
    Trustworthiness of a data quality result.
    """

    class Meta:
        name = "DQ_Confidence"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqDomainConsistency2(DqDomainConsistencyType2):
    """
    Adherence of values to the value domains.
    """

    class Meta:
        name = "DQ_DomainConsistency"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqFormatConsistency2(DqFormatConsistencyType2):
    """
    Degree to which data is stored in accordance with the physical structure of the
    dataset, as described by the scope.
    """

    class Meta:
        name = "DQ_FormatConsistency"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqGriddedDataPositionalAccuracy2(DqGriddedDataPositionalAccuracyType2):
    """
    Closeness of gridded data position values to values accepted as or being true.
    """

    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqHomogeneity(DqHomogeneityType):
    """
    Expected or tested uniformity of the results obtained for a data quality
    evaluation.
    """

    class Meta:
        name = "DQ_Homogeneity"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqNonQuantitativeAttributeCorrectness(
    DqNonQuantitativeAttributeCorrectnessType
):
    """
    Correctness of non-quantitative attributes.
    """

    class Meta:
        name = "DQ_NonQuantitativeAttributeCorrectness"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqQuantitativeAttributeAccuracy2(DqQuantitativeAttributeAccuracyType2):
    """
    Accuracy of quantitative attributes.
    """

    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqRelativeInternalPositionalAccuracy2(
    DqRelativeInternalPositionalAccuracyType2
):
    """
    Closeness of the relative positions of features in the scope to their
    respective relative positions accepted as or being true.
    """

    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqRepresentativity(DqRepresentativityType):
    """
    Degree to which the sample used has produced a result which is representative
    of the data within the data quality scope.
    """

    class Meta:
        name = "DQ_Representativity"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqTemporalConsistency2(DqTemporalConsistencyType2):
    """
    Correctness of ordered events or sequences, if reported.
    """

    class Meta:
        name = "DQ_TemporalConsistency"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqTemporalValidity2(DqTemporalValidityType2):
    """
    Validity of data specified by the scope with respect to time.
    """

    class Meta:
        name = "DQ_TemporalValidity"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqThematicClassificationCorrectness2(
    DqThematicClassificationCorrectnessType2
):
    """
    Comparison of the classes assigned to features or their attributes to a
    universe of discourse.
    """

    class Meta:
        name = "DQ_ThematicClassificationCorrectness"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqTopologicalConsistency2(DqTopologicalConsistencyType2):
    """
    Correctness of the explicitly encoded topological characteristics of the
    dataset as described by the scope.
    """

    class Meta:
        name = "DQ_TopologicalConsistency"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class DqUsabilityElementPropertyType:
    class Meta:
        name = "DQ_UsabilityElement_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_usability_element: Optional[DqUsabilityElement] = field(
        default=None,
        metadata={
            "name": "DQ_UsabilityElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiSensor(MiSensorType):
    class Meta:
        name = "MI_Sensor"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class LiLineageType2(AbstractLineageInformationType):
    """
    :ivar statement: general explanation of the data producer's
        knowledge about the lineage of a resource
    :ivar scope: type of resource and/or extent to which the lineage
        information applies
    :ivar additional_documentation:
    :ivar source:
    :ivar process_step:
    """

    class Meta:
        name = "LI_Lineage_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    statement: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    additional_documentation: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "additionalDocumentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    source: List[LiSourcePropertyType2] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    process_step: List[LiProcessStepPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "processStep",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )


@dataclass
class SvCoupledResource(SvCoupledResourceType):
    """
    Links a given operationName (mandatory attribute of SV_OperationMetadata) with
    a data set identified by an 'identifier'.
    """

    class Meta:
        name = "SV_CoupledResource"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class AbstractQualityElementPropertyType:
    class Meta:
        name = "Abstract_QualityElement_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/dqc/1.0"

    dq_representativity: Optional[DqRepresentativity] = field(
        default=None,
        metadata={
            "name": "DQ_Representativity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_homogeneity: Optional[DqHomogeneity] = field(
        default=None,
        metadata={
            "name": "DQ_Homogeneity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_confidence: Optional[DqConfidence] = field(
        default=None,
        metadata={
            "name": "DQ_Confidence",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_usability_element: Optional[DqUsabilityElement] = field(
        default=None,
        metadata={
            "name": "DQ_UsabilityElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_non_quantitative_attribute_correctness: Optional[
        DqNonQuantitativeAttributeCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_temporal_validity: Optional[DqTemporalValidity2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_topological_consistency: Optional[DqTopologicalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_conceptual_consistency: Optional[DqConceptualConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_completeness_omission: Optional[DqCompletenessOmission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_completeness_commission: Optional[DqCompletenessCommission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqCompletenessPropertyType:
    class Meta:
        name = "AbstractDQ_Completeness_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_completeness_omission: Optional[DqCompletenessOmission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_completeness_commission: Optional[DqCompletenessCommission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqElementPropertyType:
    class Meta:
        name = "AbstractDQ_Element_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_representativity: Optional[DqRepresentativity] = field(
        default=None,
        metadata={
            "name": "DQ_Representativity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_homogeneity: Optional[DqHomogeneity] = field(
        default=None,
        metadata={
            "name": "DQ_Homogeneity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_confidence: Optional[DqConfidence] = field(
        default=None,
        metadata={
            "name": "DQ_Confidence",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_usability_element: Optional[DqUsabilityElement] = field(
        default=None,
        metadata={
            "name": "DQ_UsabilityElement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_non_quantitative_attribute_correctness: Optional[
        DqNonQuantitativeAttributeCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_temporal_validity: Optional[DqTemporalValidity2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_topological_consistency: Optional[DqTopologicalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_conceptual_consistency: Optional[DqConceptualConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_completeness_omission: Optional[DqCompletenessOmission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_completeness_commission: Optional[DqCompletenessCommission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqLogicalConsistencyPropertyType:
    class Meta:
        name = "AbstractDQ_LogicalConsistency_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_topological_consistency: Optional[DqTopologicalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_conceptual_consistency: Optional[DqConceptualConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqMetaqualityPropertyType:
    class Meta:
        name = "AbstractDQ_Metaquality_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_representativity: Optional[DqRepresentativity] = field(
        default=None,
        metadata={
            "name": "DQ_Representativity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_homogeneity: Optional[DqHomogeneity] = field(
        default=None,
        metadata={
            "name": "DQ_Homogeneity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_confidence: Optional[DqConfidence] = field(
        default=None,
        metadata={
            "name": "DQ_Confidence",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqPositionalAccuracyPropertyType:
    class Meta:
        name = "AbstractDQ_PositionalAccuracy_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqTemporalQualityPropertyType:
    class Meta:
        name = "AbstractDQ_TemporalQuality_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_temporal_validity: Optional[DqTemporalValidity2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqThematicAccuracyPropertyType:
    class Meta:
        name = "AbstractDQ_ThematicAccuracy_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    dq_non_quantitative_attribute_correctness: Optional[
        DqNonQuantitativeAttributeCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqAbsoluteExternalPositionalAccuracyPropertyType2:
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqAccuracyOfAtimeMeasurementPropertyType2:
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessCommissionPropertyType2:
    class Meta:
        name = "DQ_CompletenessCommission_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_completeness_commission: Optional[DqCompletenessCommission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessOmissionPropertyType2:
    class Meta:
        name = "DQ_CompletenessOmission_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_completeness_omission: Optional[DqCompletenessOmission2] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqConceptualConsistencyPropertyType2:
    class Meta:
        name = "DQ_ConceptualConsistency_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_conceptual_consistency: Optional[DqConceptualConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqConfidencePropertyType:
    class Meta:
        name = "DQ_Confidence_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_confidence: Optional[DqConfidence] = field(
        default=None,
        metadata={
            "name": "DQ_Confidence",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDomainConsistencyPropertyType2:
    class Meta:
        name = "DQ_DomainConsistency_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_domain_consistency: Optional[DqDomainConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqFormatConsistencyPropertyType2:
    class Meta:
        name = "DQ_FormatConsistency_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_format_consistency: Optional[DqFormatConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqGriddedDataPositionalAccuracyPropertyType2:
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqHomogeneityPropertyType:
    class Meta:
        name = "DQ_Homogeneity_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_homogeneity: Optional[DqHomogeneity] = field(
        default=None,
        metadata={
            "name": "DQ_Homogeneity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqNonQuantitativeAttributeCorrectnessPropertyType:
    class Meta:
        name = "DQ_NonQuantitativeAttributeCorrectness_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_non_quantitative_attribute_correctness: Optional[
        DqNonQuantitativeAttributeCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqQuantitativeAttributeAccuracyPropertyType2:
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqRelativeInternalPositionalAccuracyPropertyType2:
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqRepresentativityPropertyType:
    class Meta:
        name = "DQ_Representativity_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_representativity: Optional[DqRepresentativity] = field(
        default=None,
        metadata={
            "name": "DQ_Representativity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalConsistencyPropertyType2:
    class Meta:
        name = "DQ_TemporalConsistency_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_temporal_consistency: Optional[DqTemporalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalValidityPropertyType2:
    class Meta:
        name = "DQ_TemporalValidity_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_temporal_validity: Optional[DqTemporalValidity2] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqThematicClassificationCorrectnessPropertyType2:
    class Meta:
        name = "DQ_ThematicClassificationCorrectness_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness2
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTopologicalConsistencyPropertyType2:
    class Meta:
        name = "DQ_TopologicalConsistency_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_topological_consistency: Optional[DqTopologicalConsistency2] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiInstrumentPropertyType:
    class Meta:
        name = "MI_Instrument_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_sensor: Optional[MiSensor] = field(
        default=None,
        metadata={
            "name": "MI_Sensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    mi_instrument: Optional[MiInstrument] = field(
        default=None,
        metadata={
            "name": "MI_Instrument",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiLineage2(LiLineageType2):
    """
    Information about the events or source data used in constructing the data
    specified by the scope or lack of knowledge about lineage.
    """

    class Meta:
        name = "LI_Lineage"
        namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"


@dataclass
class MiGcpType(AbstractObjectType1):
    class Meta:
        name = "MI_GCP_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    geographic_coordinates: Optional[GmPointPropertyType2] = field(
        default=None,
        metadata={
            "name": "geographicCoordinates",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    accuracy_report: List[AbstractQualityElementPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "accuracyReport",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class SvCoupledResourcePropertyType:
    class Meta:
        name = "SV_CoupledResource_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_coupled_resource: Optional[SvCoupledResource] = field(
        default=None,
        metadata={
            "name": "SV_CoupledResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqStandaloneQualityReportInformationType(AbstractObjectType1):
    """
    :ivar report_reference: reference to the associated standalone
        quality report
    :ivar abstract: abstract for the associated standalone quality
        report
    :ivar element_report:
    """

    class Meta:
        name = "DQ_StandaloneQualityReportInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    report_reference: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "reportReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    abstract: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    element_report: List[AbstractDqElementPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "elementReport",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )


@dataclass
class MiEventType(AbstractObjectType1):
    """
    :ivar identifier: Description: Event name or number shortName: evtId
    :ivar trigger: Description: Initiator of the event shortName:
        evtTrig
    :ivar context: Description: Meaning of the event shortName: evtCntxt
    :ivar sequence: Description: Relative time ordering of the event
        shortName: evtSeq
    :ivar time: Description: Time the event occured shortName: evtTime
    :ivar related_pass:
    :ivar related_sensor:
    :ivar expected_objective:
    """

    class Meta:
        name = "MI_Event_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    trigger: Optional[MiTriggerCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    context: Optional[MiContextCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    sequence: Optional[MiSequenceCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    time: Optional[DateTimePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    related_pass: Optional["MiPlatformPassPropertyType"] = field(
        default=None,
        metadata={
            "name": "relatedPass",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    related_sensor: List[MiInstrumentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "relatedSensor",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    expected_objective: List["MiObjectivePropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "expectedObjective",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class AbstractLineageInformationPropertyType:
    class Meta:
        name = "Abstract_LineageInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    li_lineage: Optional[LiLineage2] = field(
        default=None,
        metadata={
            "name": "LI_Lineage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiLineagePropertyType2:
    class Meta:
        name = "LI_Lineage_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mrl/2.0"

    li_lineage: Optional[LiLineage2] = field(
        default=None,
        metadata={
            "name": "LI_Lineage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mrl/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiGcp(MiGcpType):
    class Meta:
        name = "MI_GCP"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class SvServiceIdentificationType(AbstractMdIdentificationType2):
    """
    :ivar service_type: a service type name, E.G. 'discovery', 'view',
        'download', 'transformation', or 'invoke'
    :ivar service_type_version: provide for searching based on the
        version of serviceType. For example, we may only be interested
        in OGC Catalogue V1.1 services. If version is maintained as a
        separate attribute, users can easily search for all services of
        a type regardless of the version
    :ivar access_properties: information about the availability of the
        service, including, 'fees' 'planned' 'available date and time'
        'ordering instructions' 'turnaround'
    :ivar coupling_type: type of coupling between service and associated
        data (if exists)
    :ivar coupled_resource: further description of the data coupling in
        the case of tightly coupled services
    :ivar operated_dataset: provides a reference to the dataset on which
        the service operates
    :ivar profile:
    :ivar service_standard:
    :ivar contains_operations:
    :ivar operates_on:
    :ivar contains_chain:
    """

    class Meta:
        name = "SV_ServiceIdentification_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    service_type: Optional[GenericNamePropertyType1] = field(
        default=None,
        metadata={
            "name": "serviceType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
            "required": True,
        },
    )
    service_type_version: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "serviceTypeVersion",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    access_properties: Optional[
        AbstractStandardOrderProcessPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "accessProperties",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    coupling_type: Optional[SvCouplingTypePropertyType] = field(
        default=None,
        metadata={
            "name": "couplingType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    coupled_resource: List[SvCoupledResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "coupledResource",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    operated_dataset: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "operatedDataset",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    profile: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    service_standard: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "serviceStandard",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    contains_operations: List[SvOperationMetadataPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "containsOperations",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    operates_on: List[MdDataIdentificationPropertyType2] = field(
        default_factory=list,
        metadata={
            "name": "operatesOn",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    contains_chain: List[SvOperationChainMetadataPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "containsChain",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )


@dataclass
class DqStandaloneQualityReportInformation(
    DqStandaloneQualityReportInformationType
):
    """
    Reference to an external standalone quality report.
    """

    class Meta:
        name = "DQ_StandaloneQualityReportInformation"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class MiEvent(MiEventType):
    """Description: identification of a significant collection point within an operation shortName: Event"""

    class Meta:
        name = "MI_Event"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiGcpPropertyType:
    class Meta:
        name = "MI_GCP_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_gcp: Optional[MiGcp] = field(
        default=None,
        metadata={
            "name": "MI_GCP",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SvServiceIdentification(SvServiceIdentificationType):
    """identification of capabilities which a service provider makes available to a service user through a set of interfaces that define a behaviour - See ISO 19119 for further information"""

    class Meta:
        name = "SV_ServiceIdentification"
        namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"


@dataclass
class DqStandaloneQualityReportInformationPropertyType:
    class Meta:
        name = "DQ_StandaloneQualityReportInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_standalone_quality_report_information: Optional[
        DqStandaloneQualityReportInformation
    ] = field(
        default=None,
        metadata={
            "name": "DQ_StandaloneQualityReportInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiEventPropertyType:
    class Meta:
        name = "MI_Event_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_event: Optional[MiEvent] = field(
        default=None,
        metadata={
            "name": "MI_Event",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractResourceDescriptionPropertyType:
    class Meta:
        name = "Abstract_ResourceDescription_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    sv_service_identification: Optional[SvServiceIdentification] = field(
        default=None,
        metadata={
            "name": "SV_ServiceIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    md_data_identification: Optional[MdDataIdentification2] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMdIdentificationPropertyType:
    class Meta:
        name = "AbstractMD_Identification_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mri/1.0"

    sv_service_identification: Optional[SvServiceIdentification] = field(
        default=None,
        metadata={
            "name": "SV_ServiceIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    md_data_identification: Optional[MdDataIdentification2] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mri/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiGeorectifiedType(MdGeorectifiedType2):
    class Meta:
        name = "MI_Georectified_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    check_point: List[MiGcpPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "checkPoint",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class SvServiceIdentificationPropertyType:
    class Meta:
        name = "SV_ServiceIdentification_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/srv/2.0"

    sv_service_identification: Optional[SvServiceIdentification] = field(
        default=None,
        metadata={
            "name": "SV_ServiceIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/srv/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDataQualityType2(AbstractDataQualityType):
    """
    :ivar scope: the specific data to which the data quality information
        applies
    :ivar standalone_quality_report:
    :ivar report:
    """

    class Meta:
        name = "DQ_DataQuality_Type"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "required": True,
        },
    )
    standalone_quality_report: Optional[
        DqStandaloneQualityReportInformationPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "standaloneQualityReport",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    report: List[AbstractDqElementPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
            "min_occurs": 1,
        },
    )


@dataclass
class MiPlatformPassType(AbstractObjectType1):
    """
    :ivar identifier: Description: unique name of the pass shortName:
        passId
    :ivar extent: Description: Area covered by the pass shortName:
        passExt
    :ivar related_event:
    """

    class Meta:
        name = "MI_PlatformPass_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    extent: Optional[AbstractExtentPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    related_event: List[MiEventPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "relatedEvent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MiGeorectified(MiGeorectifiedType):
    """Description: extends georectified grid description to include associated checkpoints
    shortName: IGeorect"""

    class Meta:
        name = "MI_Georectified"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class DqDataQuality2(DqDataQualityType2):
    """
    Quality information for the data specified by a data quality scope.
    """

    class Meta:
        name = "DQ_DataQuality"
        namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"


@dataclass
class MiPlatformPass(MiPlatformPassType):
    """Description: identification of collection coverage shortName: PlatformPass"""

    class Meta:
        name = "MI_PlatformPass"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MdGeorectifiedPropertyType2:
    class Meta:
        name = "MD_Georectified_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_georectified: Optional[MiGeorectified] = field(
        default=None,
        metadata={
            "name": "MI_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georectified: Optional[MdGeorectified2] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiGeorectifiedPropertyType:
    class Meta:
        name = "MI_Georectified_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_georectified: Optional[MiGeorectified] = field(
        default=None,
        metadata={
            "name": "MI_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDataQualityPropertyType:
    class Meta:
        name = "Abstract_DataQuality_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/dqc/1.0"

    dq_data_quality: Optional[DqDataQuality2] = field(
        default=None,
        metadata={
            "name": "DQ_DataQuality",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDataQualityPropertyType2:
    class Meta:
        name = "DQ_DataQuality_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19157/-2/mdq/1.0"

    dq_data_quality: Optional[DqDataQuality2] = field(
        default=None,
        metadata={
            "name": "DQ_DataQuality",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19157/-2/mdq/1.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiPlatformPassPropertyType:
    class Meta:
        name = "MI_PlatformPass_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_platform_pass: Optional[MiPlatformPass] = field(
        default=None,
        metadata={
            "name": "MI_PlatformPass",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMiGeolocationInformationType(AbstractObjectType1):
    class Meta:
        name = "AbstractMI_GeolocationInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    quality_info: List[AbstractDataQualityPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "qualityInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )


@dataclass
class MiObjectiveType(AbstractObjectType1):
    """
    :ivar identifier: Description: Registered code used to identify the
        objective Postion: 1 shortName: targetId
    :ivar priority: Description: priority applied to the target
        Position: 3 shortName: trgtPriority
    :ivar type_value: Description: collection technique for the
        objective Position: 4 shortName: trgtType
    :ivar function: Description: function performed by or at the
        objective Position: 5 shortName: trgtFunct
    :ivar extent: Description: extent information including the bounding
        box, bounding polygon, vertical and temporal extent of the
        objective Position: 6 shortName: trgtExtent
    :ivar sensing_instrument:
    :ivar pass_value:
    :ivar objective_occurence:
    """

    class Meta:
        name = "MI_Objective_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    identifier: List[MdIdentifierPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "min_occurs": 1,
        },
    )
    priority: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: List[MiObjectiveTypeCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    function: List[CharacterStringPropertyType1] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    extent: List[AbstractExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    sensing_instrument: List[MiInstrumentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "sensingInstrument",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    pass_value: List[MiPlatformPassPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "pass",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    objective_occurence: List[MiEventPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "objectiveOccurence",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class AbstractMiGeolocationInformation(AbstractMiGeolocationInformationType):
    class Meta:
        name = "AbstractMI_GeolocationInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MiGcpcollectionType(AbstractMiGeolocationInformationType):
    class Meta:
        name = "MI_GCPCollection_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    gcp: List[MiGcpPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "min_occurs": 1,
        },
    )
    collection_identification: Optional[IntegerPropertyType1] = field(
        default=None,
        metadata={
            "name": "collectionIdentification",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    collection_name: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "name": "collectionName",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )
    coordinate_reference_system: Optional[
        AbstractReferenceSystemPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "coordinateReferenceSystem",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "required": True,
        },
    )


@dataclass
class MiObjective(MiObjectiveType):
    """Description: Describes the characteristics, spatial and temportal extent of the intended object to be observed shortName: TargetId"""

    class Meta:
        name = "MI_Objective"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiGcpcollection(MiGcpcollectionType):
    class Meta:
        name = "MI_GCPCollection"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MiObjectivePropertyType:
    class Meta:
        name = "MI_Objective_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_objective: Optional[MiObjective] = field(
        default=None,
        metadata={
            "name": "MI_Objective",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMiGeolocationInformationPropertyType:
    class Meta:
        name = "AbstractMI_GeolocationInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_gcpcollection: Optional[MiGcpcollection] = field(
        default=None,
        metadata={
            "name": "MI_GCPCollection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiGcpcollectionPropertyType:
    class Meta:
        name = "MI_GCPCollection_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_gcpcollection: Optional[MiGcpcollection] = field(
        default=None,
        metadata={
            "name": "MI_GCPCollection",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiOperationType(AbstractObjectType1):
    """
    :ivar description: Description: Description of the mission on which
        the platform observations are part and the objectives of that
        mission FGDC: Mission_Description Position: 3 shortName:
        mssnDesc
    :ivar citation: Description: character string by which the mission
        is known FGDC: Mission_Name Position: 1 shortName: pltMssnNam
        NITF_ACFTA:AC_MSN_ID
    :ivar identifier: Description: character string by which the mission
        is known FGDC: Mission_Name Position: 1 shortName: pltMssnNam
        NITF_ACFTA:AC_MSN_ID
    :ivar status: Description: status of the data acquisition FGDC:
        Mission_Start_Date Position: 4 shortName: mssnStatus
    :ivar type_value: Description: status of the data acquisition FGDC:
        Mission_Start_Date Position: 4 shortName: mssnStatus
    :ivar parent_operation:
    :ivar child_operation:
    :ivar platform: Description: Platform (or platforms) used in the
        operation.
    :ivar objective:
    :ivar plan:
    :ivar significant_event:
    :ivar other_property_type: type of other property description (i.e.
        netcdf/variable in ncml.xsd or AdditionalAttribute in ECHO)
    :ivar other_property: instance of otherPropertyType that defines
        attributes not explicitly included in MI_Operation
    """

    class Meta:
        name = "MI_Operation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    description: Optional[CharacterStringPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    citation: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    status: Optional[MdProgressCodePropertyType1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
            "required": True,
        },
    )
    type_value: Optional[MiOperationTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    parent_operation: Optional["MiOperationPropertyType"] = field(
        default=None,
        metadata={
            "name": "parentOperation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    child_operation: List["MiOperationPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "childOperation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    platform: List[MiPlatformPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    objective: List[MiObjectivePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    plan: Optional[MiPlanPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    significant_event: List[MiEventPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "significantEvent",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    other_property_type: Optional[RecordTypePropertyType1] = field(
        default=None,
        metadata={
            "name": "otherPropertyType",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    other_property: Optional[RecordPropertyType1] = field(
        default=None,
        metadata={
            "name": "otherProperty",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MiGeoreferenceableType(MdGeoreferenceableType2):
    class Meta:
        name = "MI_Georeferenceable_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    platform_parameters: Optional[AbstractPlatformPropertyType] = field(
        default=None,
        metadata={
            "name": "platformParameters",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    geolocation_information: List[
        AbstractMiGeolocationInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "geolocationInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
            "min_occurs": 1,
        },
    )


@dataclass
class MiOperation(MiOperationType):
    """Description: Designations for the operation used to acquire the dataset shortName: MssnId"""

    class Meta:
        name = "MI_Operation"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiGeoreferenceable(MiGeoreferenceableType):
    """Description: Description of information provided in metadata that allows the geographic or map location raster points to be located
    FGDC: Georeferencing_Description
    shortName: IGeoref"""

    class Meta:
        name = "MI_Georeferenceable"
        namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"


@dataclass
class MiOperationPropertyType:
    class Meta:
        name = "MI_Operation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_operation: Optional[MiOperation] = field(
        default=None,
        metadata={
            "name": "MI_Operation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractSpatialRepresentationPropertyType:
    class Meta:
        name = "Abstract_SpatialRepresentation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    mi_georeferenceable: Optional[MiGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MI_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable2] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    mi_georectified: Optional[MiGeorectified] = field(
        default=None,
        metadata={
            "name": "MI_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georectified: Optional[MdGeorectified2] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_grid_spatial_representation: Optional[
        MdGridSpatialRepresentation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_GridSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMdSpatialRepresentationPropertyType:
    class Meta:
        name = "AbstractMD_SpatialRepresentation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    mi_georeferenceable: Optional[MiGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MI_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable2] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    mi_georectified: Optional[MiGeorectified] = field(
        default=None,
        metadata={
            "name": "MI_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georectified: Optional[MdGeorectified2] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_grid_spatial_representation: Optional[
        MdGridSpatialRepresentation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_GridSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeoreferenceablePropertyType2:
    class Meta:
        name = "MD_Georeferenceable_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_georeferenceable: Optional[MiGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MI_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable2] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGridSpatialRepresentationPropertyType2:
    class Meta:
        name = "MD_GridSpatialRepresentation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_georeferenceable: Optional[MiGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MI_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable2] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    mi_georectified: Optional[MiGeorectified] = field(
        default=None,
        metadata={
            "name": "MI_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_georectified: Optional[MdGeorectified2] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    md_grid_spatial_representation: Optional[
        MdGridSpatialRepresentation2
    ] = field(
        default=None,
        metadata={
            "name": "MD_GridSpatialRepresentation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiGeoreferenceablePropertyType:
    class Meta:
        name = "MI_Georeferenceable_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/msr/2.0"

    mi_georeferenceable: Optional[MiGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MI_Georeferenceable",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/msr/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MiAcquisitionInformationType(AbstractAcquisitionInformationType):
    """
    :ivar scope: the specific data to which the acquisition information
        applies
    :ivar instrument:
    :ivar operation:
    :ivar platform:
    :ivar acquisition_plan:
    :ivar objective:
    :ivar acquisition_requirement:
    :ivar environmental_conditions:
    """

    class Meta:
        name = "MI_AcquisitionInformation_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    scope: Optional[MdScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    instrument: List[MiInstrumentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    operation: List[MiOperationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    platform: List[MiPlatformPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    acquisition_plan: List[MiPlanPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "acquisitionPlan",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    objective: List[MiObjectivePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    acquisition_requirement: List[MiRequirementPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "acquisitionRequirement",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    environmental_conditions: Optional[
        MiEnvironmentalRecordPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "environmentalConditions",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MiAcquisitionInformation(MiAcquisitionInformationType):
    """Description: Designations for the measuring instruments and their bands, the platform carrying them, and the mission to which the data contributes FGDC: Platform_and_Instrument_Identification, Mission_Information shortName: PltfrmInstId"""

    class Meta:
        name = "MI_AcquisitionInformation"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiAcquisitionInformationPropertyType:
    class Meta:
        name = "MI_AcquisitionInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_acquisition_information: Optional[MiAcquisitionInformation] = field(
        default=None,
        metadata={
            "name": "MI_AcquisitionInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractAcquisitionInformationPropertyType:
    class Meta:
        name = "Abstract_AcquisitionInformation_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    mi_acquisition_information: Optional[MiAcquisitionInformation] = field(
        default=None,
        metadata={
            "name": "MI_AcquisitionInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMetadataType2(AbstractMetadataType2):
    """
    :ivar metadata_identifier:
    :ivar default_locale: Provides information about an alternatively
        used localized character string for a linguistic extension
    :ivar parent_metadata: Identifier and onlineResource for a parent
        metadata record
    :ivar metadata_scope:
    :ivar contact: party responsible for the metadata information
    :ivar date_info: Date(s) other than creation dateEG: expiry date
    :ivar metadata_standard: Citation for the standards to which the
        metadata conforms
    :ivar metadata_profile:
    :ivar alternative_metadata_reference: unique Identifier and
        onlineResource for alternative metadata
    :ivar other_locale:
    :ivar metadata_linkage: online location where the metadata is
        available
    :ivar spatial_representation_info:
    :ivar reference_system_info:
    :ivar metadata_extension_info:
    :ivar identification_info:
    :ivar content_info:
    :ivar distribution_info:
    :ivar data_quality_info:
    :ivar resource_lineage:
    :ivar portrayal_catalogue_info:
    :ivar metadata_constraints:
    :ivar application_schema_info:
    :ivar metadata_maintenance:
    :ivar describes:
    :ivar standards_iso_org_iso_19115_3_mdb_2_0_acquisition_information:
    """

    class Meta:
        name = "MD_Metadata_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mdb/2.0"

    metadata_identifier: Optional[MdIdentifierPropertyType1] = field(
        default=None,
        metadata={
            "name": "metadataIdentifier",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    default_locale: Optional[PtLocalePropertyType1] = field(
        default=None,
        metadata={
            "name": "defaultLocale",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    parent_metadata: Optional[AbstractCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "parentMetadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    metadata_scope: List[MdMetadataScopePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataScope",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    contact: List[AbstractResponsibilityPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
            "min_occurs": 1,
        },
    )
    date_info: List[AbstractTypedDatePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "dateInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
            "min_occurs": 1,
        },
    )
    metadata_standard: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataStandard",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    metadata_profile: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataProfile",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    alternative_metadata_reference: List[AbstractCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "alternativeMetadataReference",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    other_locale: List[PtLocalePropertyType1] = field(
        default_factory=list,
        metadata={
            "name": "otherLocale",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    metadata_linkage: List[AbstractOnlineResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataLinkage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    spatial_representation_info: List[
        AbstractSpatialRepresentationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "spatialRepresentationInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    reference_system_info: List[AbstractReferenceSystemPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "referenceSystemInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    metadata_extension_info: List[
        AbstractMetadataExtensionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "metadataExtensionInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    identification_info: List[AbstractResourceDescriptionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "identificationInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
            "min_occurs": 1,
        },
    )
    content_info: List[AbstractContentInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "contentInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    distribution_info: List[AbstractDistributionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "distributionInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    data_quality_info: List[AbstractDataQualityPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "dataQualityInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    resource_lineage: List[AbstractLineageInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceLineage",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    portrayal_catalogue_info: List[
        AbstractPortrayalCatalogueInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "portrayalCatalogueInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    metadata_constraints: List[AbstractConstraintsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataConstraints",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    application_schema_info: List[
        AbstractApplicationSchemaInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "applicationSchemaInfo",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    metadata_maintenance: Optional[
        AbstractMaintenanceInformationPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "metadataMaintenance",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    describes: List[AbstractDsResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    standards_iso_org_iso_19115_3_mdb_2_0_acquisition_information: List[
        AbstractAcquisitionInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "acquisitionInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )


@dataclass
class MiMetadataType(MdMetadataType2):
    """Description: Root entity that defines information about imagery or gridded data - shortName: IMetadata"""

    class Meta:
        name = "MI_Metadata_Type"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    acquisition_information: List[
        MiAcquisitionInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "acquisitionInformation",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )


@dataclass
class MdMetadata2(MdMetadataType2):
    """
    Root entity which defines metadata about a resource or resources.
    """

    class Meta:
        name = "MD_Metadata"
        namespace = "http://standards.iso.org/iso/19115/-3/mdb/2.0"


@dataclass
class MiMetadata(MiMetadataType):
    class Meta:
        name = "MI_Metadata"
        namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"


@dataclass
class MiMetadataPropertyType:
    class Meta:
        name = "MI_Metadata_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mac/2.0"

    mi_metadata: Optional[MiMetadata] = field(
        default=None,
        metadata={
            "name": "MI_Metadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractMetadataPropertyType2:
    class Meta:
        name = "Abstract_Metadata_PropertyType"
        target_namespace = "http://standards.iso.org/iso/19115/-3/mcc/1.0"

    mi_metadata: Optional[MiMetadata] = field(
        default=None,
        metadata={
            "name": "MI_Metadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mac/2.0",
        },
    )
    md_metadata: Optional[MdMetadata2] = field(
        default=None,
        metadata={
            "name": "MD_Metadata",
            "type": "Element",
            "namespace": "http://standards.iso.org/iso/19115/-3/mdb/2.0",
        },
    )
    type_value: TypeType = field(
        init=False,
        default=TypeType.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateType] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue1]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://standards.iso.org/iso/19115/-3/gco/1.0",
            "pattern": r"other:\w{2,}",
        },
    )
